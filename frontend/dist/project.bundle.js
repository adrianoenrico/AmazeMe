!function(t){var e={};function i(s){if(e[s])return e[s].exports;var r=e[s]={i:s,l:!1,exports:{}};return t[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(s,r,function(e){return t[e]}.bind(null,r));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=16)}([function(t,e){t.exports=function(t,e,i){if(t&&"number"!=typeof t){if(t.hasOwnProperty(e))return t[e];if(-1!==e.indexOf(".")){for(var s=e.split("."),r=t,n=i,o=0;o<s.length;o++){if(!r.hasOwnProperty(s[o])){n=i;break}n=r[s[o]],r=r[s[o]]}return n}return i}return i}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var s,r=(s=i(9))&&s.__esModule?s:{default:s};function n(t){arguments.length>1&&void 0!==arguments[1]&&arguments[1]?console.warn("[@withkoji/vcc] ".concat(t," is deprectated and no longer available.")):console.warn("[@withkoji/vcc] ".concat(t," is deprecated and no longer needs to be called.\nYou can safely remove this call from your project!"))}var o={config:i(11),resolveSecret:r.default,pageLoad:function(){return n("Koji.pageLoad()")},on:function(){return n("Koji.on()")},request:function(){return n("Koji.request()",!0)},pwaPrompt:function(){return n("Koji.pwaPrompt()",!0)}};e.default=o},function(t,e){
/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2018 Photon Storm Ltd.
 * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
 */
const i=Math.PI/180;t.exports=function(t){return t*i}},function(t,e,i){"use strict";
/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2019 Photon Storm Ltd.
 * @license      {@link https://opensource.org/licenses/MIT|MIT License}
 */function s(t,e,i){i=i||2;var s,h,a,l,u,p,g,v=e&&e.length,m=v?e[0]*i:t.length,y=r(t,0,m,i,!0),x=[];if(!y||y.next===y.prev)return x;if(v&&(y=function(t,e,i,s){var o,h,a,l,u,p=[];for(o=0,h=e.length;o<h;o++)a=e[o]*s,l=o<h-1?e[o+1]*s:t.length,(u=r(t,a,l,s,!1))===u.next&&(u.steiner=!0),p.push(f(u));for(p.sort(c),o=0;o<p.length;o++)d(p[o],i),i=n(i,i.next);return i}(t,e,y,i)),t.length>80*i){s=a=t[0],h=l=t[1];for(var b=i;b<m;b+=i)(u=t[b])<s&&(s=u),(p=t[b+1])<h&&(h=p),u>a&&(a=u),p>l&&(l=p);g=0!==(g=Math.max(a-s,l-h))?1/g:0}return o(y,x,i,s,h,g),x}function r(t,e,i,s,r){var n,o;if(r===_(t,e,i,s)>0)for(n=e;n<i;n+=s)o=C(n,t[n],t[n+1],o);else for(n=i-s;n>=e;n-=s)o=C(n,t[n],t[n+1],o);return o&&y(o,o.next)&&(S(o),o=o.next),o}function n(t,e){if(!t)return t;e||(e=t);var i,s=t;do{if(i=!1,s.steiner||!y(s,s.next)&&0!==m(s.prev,s,s.next))s=s.next;else{if(S(s),(s=e=s.prev)===s.next)break;i=!0}}while(i||s!==e);return e}function o(t,e,i,s,r,c,d){if(t){!d&&c&&function(t,e,i,s){var r=t;do{null===r.z&&(r.z=p(r.x,r.y,e,i,s)),r.prevZ=r.prev,r.nextZ=r.next,r=r.next}while(r!==t);r.prevZ.nextZ=null,r.prevZ=null,function(t){var e,i,s,r,n,o,h,a,l=1;do{for(i=t,t=null,n=null,o=0;i;){for(o++,s=i,h=0,e=0;e<l&&(h++,s=s.nextZ);e++);for(a=l;h>0||a>0&&s;)0!==h&&(0===a||!s||i.z<=s.z)?(r=i,i=i.nextZ,h--):(r=s,s=s.nextZ,a--),n?n.nextZ=r:t=r,r.prevZ=n,n=r;i=s}n.nextZ=null,l*=2}while(o>1)}(r)}(t,s,r,c);for(var f,g,v=t;t.prev!==t.next;)if(f=t.prev,g=t.next,c?a(t,s,r,c):h(t))e.push(f.i/i),e.push(t.i/i),e.push(g.i/i),S(t),t=g.next,v=g.next;else if((t=g)===v){d?1===d?o(t=l(t,e,i),e,i,s,r,c,2):2===d&&u(t,e,i,s,r,c):o(n(t),e,i,s,r,c,1);break}}}function h(t){var e=t.prev,i=t,s=t.next;if(m(e,i,s)>=0)return!1;for(var r=t.next.next;r!==t.prev;){if(g(e.x,e.y,i.x,i.y,s.x,s.y,r.x,r.y)&&m(r.prev,r,r.next)>=0)return!1;r=r.next}return!0}function a(t,e,i,s){var r=t.prev,n=t,o=t.next;if(m(r,n,o)>=0)return!1;for(var h=r.x<n.x?r.x<o.x?r.x:o.x:n.x<o.x?n.x:o.x,a=r.y<n.y?r.y<o.y?r.y:o.y:n.y<o.y?n.y:o.y,l=r.x>n.x?r.x>o.x?r.x:o.x:n.x>o.x?n.x:o.x,u=r.y>n.y?r.y>o.y?r.y:o.y:n.y>o.y?n.y:o.y,c=p(h,a,e,i,s),d=p(l,u,e,i,s),f=t.prevZ,v=t.nextZ;f&&f.z>=c&&v&&v.z<=d;){if(f!==t.prev&&f!==t.next&&g(r.x,r.y,n.x,n.y,o.x,o.y,f.x,f.y)&&m(f.prev,f,f.next)>=0)return!1;if(f=f.prevZ,v!==t.prev&&v!==t.next&&g(r.x,r.y,n.x,n.y,o.x,o.y,v.x,v.y)&&m(v.prev,v,v.next)>=0)return!1;v=v.nextZ}for(;f&&f.z>=c;){if(f!==t.prev&&f!==t.next&&g(r.x,r.y,n.x,n.y,o.x,o.y,f.x,f.y)&&m(f.prev,f,f.next)>=0)return!1;f=f.prevZ}for(;v&&v.z<=d;){if(v!==t.prev&&v!==t.next&&g(r.x,r.y,n.x,n.y,o.x,o.y,v.x,v.y)&&m(v.prev,v,v.next)>=0)return!1;v=v.nextZ}return!0}function l(t,e,i){var s=t;do{var r=s.prev,n=s.next.next;!y(r,n)&&x(r,s,s.next,n)&&b(r,n)&&b(n,r)&&(e.push(r.i/i),e.push(s.i/i),e.push(n.i/i),S(s),S(s.next),s=t=n),s=s.next}while(s!==t);return s}function u(t,e,i,s,r,h){var a=t;do{for(var l=a.next.next;l!==a.prev;){if(a.i!==l.i&&v(a,l)){var u=w(a,l);return a=n(a,a.next),u=n(u,u.next),o(a,e,i,s,r,h),void o(u,e,i,s,r,h)}l=l.next}a=a.next}while(a!==t)}function c(t,e){return t.x-e.x}function d(t,e){if(e=function(t,e){var i,s=e,r=t.x,n=t.y,o=-1/0;do{if(n<=s.y&&n>=s.next.y&&s.next.y!==s.y){var h=s.x+(n-s.y)*(s.next.x-s.x)/(s.next.y-s.y);if(h<=r&&h>o){if(o=h,h===r){if(n===s.y)return s;if(n===s.next.y)return s.next}i=s.x<s.next.x?s:s.next}}s=s.next}while(s!==e);if(!i)return null;if(r===o)return i.prev;var a,l=i,u=i.x,c=i.y,d=1/0;s=i.next;for(;s!==l;)r>=s.x&&s.x>=u&&r!==s.x&&g(n<c?r:o,n,u,c,n<c?o:r,n,s.x,s.y)&&((a=Math.abs(n-s.y)/(r-s.x))<d||a===d&&s.x>i.x)&&b(s,t)&&(i=s,d=a),s=s.next;return i}(t,e)){var i=w(e,t);n(i,i.next)}}function p(t,e,i,s,r){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-i)*r)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-s)*r)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function f(t){var e=t,i=t;do{e.x<i.x&&(i=e),e=e.next}while(e!==t);return i}function g(t,e,i,s,r,n,o,h){return(r-o)*(e-h)-(t-o)*(n-h)>=0&&(t-o)*(s-h)-(i-o)*(e-h)>=0&&(i-o)*(n-h)-(r-o)*(s-h)>=0}function v(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){var i=t;do{if(i.i!==t.i&&i.next.i!==t.i&&i.i!==e.i&&i.next.i!==e.i&&x(i,i.next,t,e))return!0;i=i.next}while(i!==t);return!1}(t,e)&&b(t,e)&&b(e,t)&&function(t,e){var i=t,s=!1,r=(t.x+e.x)/2,n=(t.y+e.y)/2;do{i.y>n!=i.next.y>n&&i.next.y!==i.y&&r<(i.next.x-i.x)*(n-i.y)/(i.next.y-i.y)+i.x&&(s=!s),i=i.next}while(i!==t);return s}(t,e)}function m(t,e,i){return(e.y-t.y)*(i.x-e.x)-(e.x-t.x)*(i.y-e.y)}function y(t,e){return t.x===e.x&&t.y===e.y}function x(t,e,i,s){return!!(y(t,e)&&y(i,s)||y(t,s)&&y(i,e))||m(t,e,i)>0!=m(t,e,s)>0&&m(i,s,t)>0!=m(i,s,e)>0}function b(t,e){return m(t.prev,t,t.next)<0?m(t,e,t.next)>=0&&m(t,t.prev,e)>=0:m(t,e,t.prev)<0||m(t,t.next,e)<0}function w(t,e){var i=new O(t.i,t.x,t.y),s=new O(e.i,e.x,e.y),r=t.next,n=e.prev;return t.next=e,e.prev=t,i.next=r,r.prev=i,s.next=i,i.prev=s,n.next=s,s.prev=n,s}function C(t,e,i,s){var r=new O(t,e,i);return s?(r.next=s.next,r.prev=s,s.next.prev=r,s.next=r):(r.prev=r,r.next=r),r}function S(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function O(t,e,i){this.i=t,this.x=e,this.y=i,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function _(t,e,i,s){for(var r=0,n=e,o=i-s;n<i;n+=s)r+=(t[o]-t[n])*(t[n+1]+t[o+1]),o=n;return r}t.exports=s,s.deviation=function(t,e,i,s){var r=e&&e.length,n=r?e[0]*i:t.length,o=Math.abs(_(t,0,n,i));if(r)for(var h=0,a=e.length;h<a;h++){var l=e[h]*i,u=h<a-1?e[h+1]*i:t.length;o-=Math.abs(_(t,l,u,i))}var c=0;for(h=0;h<s.length;h+=3){var d=s[h]*i,p=s[h+1]*i,f=s[h+2]*i;c+=Math.abs((t[d]-t[f])*(t[p+1]-t[d+1])-(t[d]-t[p])*(t[f+1]-t[d+1]))}return 0===o&&0===c?0:Math.abs((c-o)/o)},s.flatten=function(t){for(var e=t[0][0].length,i={vertices:[],holes:[],dimensions:e},s=0,r=0;r<t.length;r++){for(var n=0;n<t[r].length;n++)for(var o=0;o<e;o++)i.vertices.push(t[r][n][o]);r>0&&(s+=t[r-1].length,i.holes.push(s))}return i}},function(t,e,i){
/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2019 Photon Storm Ltd.
 * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
 */
var s=i(12),r=i(13);t.exports=function(t,e,i,n,o){var h=this.pipeline,a=h._tempMatrix1,l=h._tempMatrix2,u=h._tempMatrix3;t.setPipeline(h),l.applyITRS(e.x,e.y,e.rotation,e.scaleX,e.scaleY),a.copyFrom(n.matrix),o?(a.multiplyWithOffset(o,-n.scrollX*e.scrollFactorX,-n.scrollY*e.scrollFactorY),l.e=e.x,l.f=e.y):(l.e-=n.scrollX*e.scrollFactorX,l.f-=n.scrollY*e.scrollFactorY),a.multiply(l,u);var c=e._displayOriginX,d=e._displayOriginY,p=n.alpha*e.alpha;e.isFilled&&s(h,u,e,p,c,d),e.isStroked&&r(h,e,p,c,d)}},function(t,e,i){
/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2019 Photon Storm Ltd.
 * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
 */
var s=i(14),r=i(15),n=Phaser.Renderer.Canvas.SetTransform;t.exports=function(t,e,i,o,h){var a=t.currentContext;if(n(t,a,e,o,h)){var l=e._displayOriginX,u=e._displayOriginY,c=e.pathData,d=c.length-1,p=c[0]-l,f=c[1]-u;a.beginPath(),a.moveTo(p,f),e.closePath||(d-=2);for(var g=2;g<d;g+=2){var v=c[g]-l,m=c[g+1]-u;a.lineTo(v,m)}a.closePath(),e.isFilled&&(s(a,e),a.fill()),e.isStroked&&(r(a,e),a.stroke()),a.restore()}}},function(t,e){
/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2019 Photon Storm Ltd.
 * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
 */
var i=Phaser.Renderer.WebGL.Utils;t.exports=function(t,e,s,r,n){if(0!==e.width&&0!==e.height){var o=e.frame,h=o.width,a=o.height,l=i.getTintAppendFloatAlpha;this.pipeline.batchTexture(e,o.glTexture,h,a,e.x,e.y,h/e.style.resolution,a/e.style.resolution,e.scaleX,e.scaleY,e.rotation,e.flipX,e.flipY,e.scrollFactorX,e.scrollFactorY,e.displayOriginX,e.displayOriginY,0,0,h,a,l(e._tintTL,r.alpha*e._alphaTL),l(e._tintTR,r.alpha*e._alphaTR),l(e._tintBL,r.alpha*e._alphaBL),l(e._tintBR,r.alpha*e._alphaBR),e._isTinted&&e.tintFill,0,0,r,n)}}},function(t,e){t.exports=function(t,e,i,s,r){0!==e.width&&0!==e.height&&t.batchSprite(e,e.frame,s,r)}},function(t,e,i){t.exports=function(t){function e(s){if(i[s])return i[s].exports;var r=i[s]={i:s,l:!1,exports:{}};return t[s].call(r.exports,r,r.exports,e),r.l=!0,r.exports}var i={};return e.m=t,e.c=i,e.i=function(t){return t},e.d=function(t,i,s){e.o(t,i)||Object.defineProperty(t,i,{configurable:!1,enumerable:!0,get:s})},e.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(i,"a",i),i},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=1)}([function(t,e,i){"use strict";function s(t){var e=n.default.reject(t,(function(t){return t.set})),i=n.default.chain(t).map("set").uniq().compact().value(),s=n.default.range(1,t.length+1),r=n.default.chain(s).difference(i).shuffle().value();e.forEach((function(t,e){return t.set=r[e]}))}function r(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.5;n.default.initial(t).forEach((function(i,s){var r=t[s+1],o=i.set!==r.set,h=Math.random()<=e;o&&h&&(function(t,e,i){n.default.filter(t,{set:e}).forEach((function(t){t.set=i}))}(t,r.set,i.set),i.right=!1,r.left=!1)}))}Object.defineProperty(e,"__esModule",{value:!0});var n=function(t){return t&&t.__esModule?t:{default:t}}(i(2));e.default=function(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,i=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],o=[],h=n.default.range(t),a=0;a<e;a+=1)!function(s){var r=h.map((function(r){return{x:r,y:s,top:i||s>0,left:i||r>0,bottom:i||s<e-1,right:i||r<t-1}}));o.push(r)}(a);n.default.initial(o).forEach((function(t,e){s(t),r(t),function(t,e){var i=n.default.chain(t).groupBy("set").values().value(),s=Math.ceil,r=Math.random;i.forEach((function(t){n.default.sampleSize(t,s(r()*t.length)).forEach((function(t){if(t){var i=e[t.x];t.bottom=!1,i.top=!1,i.set=t.set}}))}))}(t,o[e+1])}));var l=n.default.last(o);return s(l),r(l,1),o}},function(t,e,i){"use strict";t.exports=i(0).default},function(t,e,i){(function(t,s){var r;(function(){function n(t,e){return t.set(e[0],e[1]),t}function o(t,e){return t.add(e),t}function h(t,e,i){switch(i.length){case 0:return t.call(e);case 1:return t.call(e,i[0]);case 2:return t.call(e,i[0],i[1]);case 3:return t.call(e,i[0],i[1],i[2])}return t.apply(e,i)}function a(t,e,i,s){for(var r=-1,n=t?t.length:0;++r<n;){var o=t[r];e(s,o,i(o),t)}return s}function l(t,e){for(var i=-1,s=t?t.length:0;++i<s&&!1!==e(t[i],i,t););return t}function u(t,e){for(var i=t?t.length:0;i--&&!1!==e(t[i],i,t););return t}function c(t,e){for(var i=-1,s=t?t.length:0;++i<s;)if(!e(t[i],i,t))return!1;return!0}function d(t,e){for(var i=-1,s=t?t.length:0,r=0,n=[];++i<s;){var o=t[i];e(o,i,t)&&(n[r++]=o)}return n}function p(t,e){return!(!t||!t.length)&&C(t,e,0)>-1}function f(t,e,i){for(var s=-1,r=t?t.length:0;++s<r;)if(i(e,t[s]))return!0;return!1}function g(t,e){for(var i=-1,s=t?t.length:0,r=Array(s);++i<s;)r[i]=e(t[i],i,t);return r}function v(t,e){for(var i=-1,s=e.length,r=t.length;++i<s;)t[r+i]=e[i];return t}function m(t,e,i,s){var r=-1,n=t?t.length:0;for(s&&n&&(i=t[++r]);++r<n;)i=e(i,t[r],r,t);return i}function y(t,e,i,s){var r=t?t.length:0;for(s&&r&&(i=t[--r]);r--;)i=e(i,t[r],r,t);return i}function x(t,e){for(var i=-1,s=t?t.length:0;++i<s;)if(e(t[i],i,t))return!0;return!1}function b(t,e,i){var s;return i(t,(function(t,i,r){if(e(t,i,r))return s=i,!1})),s}function w(t,e,i,s){for(var r=t.length,n=i+(s?1:-1);s?n--:++n<r;)if(e(t[n],n,t))return n;return-1}function C(t,e,i){if(e!=e)return L(t,i);for(var s=i-1,r=t.length;++s<r;)if(t[s]===e)return s;return-1}function S(t,e,i,s){for(var r=i-1,n=t.length;++r<n;)if(s(t[r],e))return r;return-1}function O(t,e){var i=t?t.length:0;return i?P(t,e)/i:bt}function _(t,e,i,s,r){return r(t,(function(t,r,n){i=s?(s=!1,t):e(i,t,r,n)})),i}function P(t,e){for(var i,s=-1,r=t.length;++s<r;){var n=e(t[s]);n!==N&&(i=i===N?n:i+n)}return i}function T(t,e){for(var i=-1,s=Array(t);++i<t;)s[i]=e(i);return s}function k(t){return function(e){return t(e)}}function M(t,e){return g(e,(function(e){return t[e]}))}function E(t,e){return t.has(e)}function j(t,e){for(var i=-1,s=t.length;++i<s&&C(e,t[i],0)>-1;);return i}function I(t,e){for(var i=t.length;i--&&C(e,t[i],0)>-1;);return i}function z(t){return t&&t.Object===Object?t:null}function D(t){return qe[t]}function R(t){return Qe[t]}function B(t){return"\\"+ei[t]}function L(t,e,i){for(var s=t.length,r=e+(i?1:-1);i?r--:++r<s;){var n=t[r];if(n!=n)return r}return-1}function Y(t){var e=!1;if(null!=t&&"function"!=typeof t.toString)try{e=!!(t+"")}catch(t){}return e}function A(t){for(var e,i=[];!(e=t.next()).done;)i.push(e.value);return i}function W(t){var e=-1,i=Array(t.size);return t.forEach((function(t,s){i[++e]=[s,t]})),i}function F(t,e){for(var i=-1,s=t.length,r=0,n=[];++i<s;){var o=t[i];o!==e&&o!==$||(t[i]=$,n[r++]=i)}return n}function H(t){var e=-1,i=Array(t.size);return t.forEach((function(t){i[++e]=t})),i}function V(t){if(!t||!Ne.test(t))return t.length;for(var e=Xe.lastIndex=0;Xe.test(t);)e++;return e}function X(t){return t.match(Xe)}function G(t){return ti[t]}var N,U="4.13.1",J=200,Z="Expected a function",K="__lodash_hash_undefined__",$="__lodash_placeholder__",q=1,Q=2,tt=4,et=8,it=16,st=32,rt=64,nt=128,ot=256,ht=512,at=1,lt=2,ut=30,ct="...",dt=150,pt=16,ft=1,gt=2,vt=3,mt=1/0,yt=9007199254740991,xt=17976931348623157e292,bt=NaN,wt=4294967295,Ct=wt-1,St=wt>>>1,Ot="[object Arguments]",_t="[object Array]",Pt="[object Boolean]",Tt="[object Date]",kt="[object Error]",Mt="[object Function]",Et="[object GeneratorFunction]",jt="[object Map]",It="[object Number]",zt="[object Object]",Dt="[object Promise]",Rt="[object RegExp]",Bt="[object Set]",Lt="[object String]",Yt="[object Symbol]",At="[object WeakMap]",Wt="[object WeakSet]",Ft="[object ArrayBuffer]",Ht="[object DataView]",Vt="[object Float32Array]",Xt="[object Float64Array]",Gt="[object Int8Array]",Nt="[object Int16Array]",Ut="[object Int32Array]",Jt="[object Uint8Array]",Zt="[object Uint8ClampedArray]",Kt="[object Uint16Array]",$t="[object Uint32Array]",qt=/\b__p \+= '';/g,Qt=/\b(__p \+=) '' \+/g,te=/(__e\(.*?\)|\b__t\)) \+\n'';/g,ee=/&(?:amp|lt|gt|quot|#39|#96);/g,ie=/[&<>"'`]/g,se=RegExp(ee.source),re=RegExp(ie.source),ne=/<%-([\s\S]+?)%>/g,oe=/<%([\s\S]+?)%>/g,he=/<%=([\s\S]+?)%>/g,ae=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,le=/^\w*$/,ue=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(\.|\[\])(?:\4|$))/g,ce=/[\\^$.*+?()[\]{}|]/g,de=RegExp(ce.source),pe=/^\s+|\s+$/g,fe=/^\s+/,ge=/\s+$/,ve=/[a-zA-Z0-9]+/g,me=/\\(\\)?/g,ye=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,xe=/\w*$/,be=/^0x/i,we=/^[-+]0x[0-9a-f]+$/i,Ce=/^0b[01]+$/i,Se=/^\[object .+?Constructor\]$/,Oe=/^0o[0-7]+$/i,_e=/^(?:0|[1-9]\d*)$/,Pe=/[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g,Te=/($^)/,ke=/['\n\r\u2028\u2029\\]/g,Me="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Ee="["+Me+"]",je="[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]",Ie="[a-z\\xdf-\\xf6\\xf8-\\xff]",ze="\\ud83c[\\udffb-\\udfff]",De="(?:\\ud83c[\\udde6-\\uddff]){2}",Re="[\\ud800-\\udbff][\\udc00-\\udfff]",Be="[A-Z\\xc0-\\xd6\\xd8-\\xde]",Le="(?:"+Ie+"|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])",Ye="(?:[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]|\\ud83c[\\udffb-\\udfff])?",Ae="[\\ufe0e\\ufe0f]?"+Ye+"(?:\\u200d(?:"+["[^\\ud800-\\udfff]",De,Re].join("|")+")[\\ufe0e\\ufe0f]?"+Ye+")*",We="(?:"+["[\\u2700-\\u27bf]",De,Re].join("|")+")"+Ae,Fe="(?:"+["[^\\ud800-\\udfff]"+je+"?",je,De,Re,"[\\ud800-\\udfff]"].join("|")+")",He=RegExp("['’]","g"),Ve=RegExp(je,"g"),Xe=RegExp(ze+"(?="+ze+")|"+Fe+Ae,"g"),Ge=RegExp([Be+"?"+Ie+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[Ee,Be,"$"].join("|")+")","(?:[A-Z\\xc0-\\xd6\\xd8-\\xde]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[Ee,Be+Le,"$"].join("|")+")",Be+"?"+Le+"+(?:['’](?:d|ll|m|re|s|t|ve))?",Be+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d+",We].join("|"),"g"),Ne=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0\\ufe0e\\ufe0f]"),Ue=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Je=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","Reflect","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","isFinite","parseInt","setTimeout"],Ze=-1,Ke={};Ke[Vt]=Ke[Xt]=Ke[Gt]=Ke[Nt]=Ke[Ut]=Ke[Jt]=Ke[Zt]=Ke[Kt]=Ke[$t]=!0,Ke[Ot]=Ke[_t]=Ke[Ft]=Ke[Pt]=Ke[Ht]=Ke[Tt]=Ke[kt]=Ke[Mt]=Ke[jt]=Ke[It]=Ke[zt]=Ke[Rt]=Ke[Bt]=Ke[Lt]=Ke[At]=!1;var $e={};$e[Ot]=$e[_t]=$e[Ft]=$e[Ht]=$e[Pt]=$e[Tt]=$e[Vt]=$e[Xt]=$e[Gt]=$e[Nt]=$e[Ut]=$e[jt]=$e[It]=$e[zt]=$e[Rt]=$e[Bt]=$e[Lt]=$e[Yt]=$e[Jt]=$e[Zt]=$e[Kt]=$e[$t]=!0,$e[kt]=$e[Mt]=$e[At]=!1;var qe={"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss"},Qe={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","`":"&#96;"},ti={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'","&#96;":"`"},ei={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},ii=parseFloat,si=parseInt,ri="object"==typeof e&&e,ni=ri&&"object"==typeof t&&t,oi=ni&&ni.exports===ri,hi=z("object"==typeof s&&s),ai=z("object"==typeof self&&self),li=z("object"==typeof this&&this),ui=hi||ai||li||Function("return this")(),ci=function t(e){function i(t){if(zr(t)&&!lh(t)&&!(t instanceof n)){if(t instanceof r)return t;if(wn.call(t,"__wrapped__"))return er(t)}return new r(t)}function s(){}function r(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=N}function n(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=wt,this.__views__=[]}function o(t){var e=-1,i=t?t.length:0;for(this.clear();++e<i;){var s=t[e];this.set(s[0],s[1])}}function z(t){var e=-1,i=t?t.length:0;for(this.clear();++e<i;){var s=t[e];this.set(s[0],s[1])}}function Me(t){var e=-1,i=t?t.length:0;for(this.clear();++e<i;){var s=t[e];this.set(s[0],s[1])}}function Ee(t){var e=-1,i=t?t.length:0;for(this.__data__=new Me;++e<i;)this.add(t[e])}function je(t){this.__data__=new z(t)}function Ie(t,e,i,s){return t===N||Or(t,vn[i])&&!wn.call(s,i)?e:t}function ze(t,e,i){(i===N||Or(t[e],i))&&("number"!=typeof e||i!==N||e in t)||(t[e]=i)}function De(t,e,i){var s=t[e];wn.call(t,e)&&Or(s,i)&&(i!==N||e in t)||(t[e]=i)}function Re(t,e){for(var i=t.length;i--;)if(Or(t[i][0],e))return i;return-1}function Be(t,e,i,s){return go(t,(function(t,r,n){e(s,t,i(t),n)})),s}function Le(t,e){return t&&os(e,Zr(e),t)}function Ye(t,e){for(var i=-1,s=null==t,r=e.length,n=Array(r);++i<r;)n[i]=s?N:Ur(t,e[i]);return n}function Ae(t,e,i){return t==t&&(i!==N&&(t=t<=i?t:i),e!==N&&(t=t>=e?t:e)),t}function We(t,e,i,s,r,n,o){var h;if(s&&(h=n?s(t,r,n,o):s(t)),h!==N)return h;if(!Ir(t))return t;var a=lh(t);if(a){if(h=function(t){var e=t.length,i=t.constructor(e);return e&&"string"==typeof t[0]&&wn.call(t,"index")&&(i.index=t.index,i.input=t.input),i}(t),!e)return ns(t,h)}else{var u=As(t),c=u==Mt||u==Et;if(uh(t))return function(t,e){if(e)return t.slice();var i=new t.constructor(t.length);return t.copy(i),i}(t,e);if(u==zt||u==Ot||c&&!n){if(Y(t))return n?t:{};if(h=function(t){return"function"!=typeof t.constructor||Js(t)?{}:Fe(Ls(t))}(c?{}:t),!e)return function(t,e){return os(t,Ys(t),e)}(t,Le(h,t))}else{if(!$e[u])return n?t:{};h=function(t,e,i,s){var r=t.constructor;switch(e){case Ft:return es(t);case Pt:case Tt:return new r(+t);case Ht:return function(t,e){var i=e?es(t.buffer):t.buffer;return new t.constructor(i,t.byteOffset,t.byteLength)}(t,s);case Vt:case Xt:case Gt:case Nt:case Ut:case Jt:case Zt:case Kt:case $t:return function(t,e){var i=e?es(t.buffer):t.buffer;return new t.constructor(i,t.byteOffset,t.length)}(t,s);case jt:return function(t,e,i){return m(e?i(W(t),!0):W(t),n,new t.constructor)}(t,s,i);case It:case Lt:return new r(t);case Rt:return function(t){var e=new t.constructor(t.source,xe.exec(t));return e.lastIndex=t.lastIndex,e}(t);case Bt:return function(t,e,i){return m(e?i(H(t),!0):H(t),o,new t.constructor)}(t,s,i);case Yt:return function(t){return po?Object(po.call(t)):{}}(t)}}(t,u,We,e)}}o||(o=new je);var d=o.get(t);if(d)return d;if(o.set(t,h),!a)var p=i?function(t){return di(t,Zr,Ys)}(t):Zr(t);return l(p||t,(function(r,n){p&&(r=t[n=r]),De(h,n,We(r,e,i,s,n,t,o))})),h}function Fe(t){return Ir(t)?Dn(t):{}}function Xe(t,e,i){if("function"!=typeof t)throw new fn(Z);return Ln((function(){t.apply(N,i)}),e)}function qe(t,e,i,s){var r=-1,n=p,o=!0,h=t.length,a=[],l=e.length;if(!h)return a;i&&(e=g(e,k(i))),s?(n=f,o=!1):e.length>=J&&(n=E,o=!1,e=new Ee(e));t:for(;++r<h;){var u=t[r],c=i?i(u):u;if(u=s||0!==u?u:0,o&&c==c){for(var d=l;d--;)if(e[d]===c)continue t;a.push(u)}else n(e,c,s)||a.push(u)}return a}function Qe(t,e){var i=!0;return go(t,(function(t,s,r){return i=!!e(t,s,r)})),i}function ti(t,e,i){for(var s=-1,r=t.length;++s<r;){var n=t[s],o=e(n);if(null!=o&&(h===N?o==o&&!Yr(o):i(o,h)))var h=o,a=n}return a}function ei(t,e){var i=[];return go(t,(function(t,s,r){e(t,s,r)&&i.push(t)})),i}function ri(t,e,i,s,r){var n=-1,o=t.length;for(i||(i=Hs),r||(r=[]);++n<o;){var h=t[n];e>0&&i(h)?e>1?ri(h,e-1,i,s,r):v(r,h):s||(r[r.length]=h)}return r}function ni(t,e){return t&&mo(t,e,Zr)}function hi(t,e){return t&&yo(t,e,Zr)}function ai(t,e){return d(e,(function(e){return Mr(t[e])}))}function li(t,e){for(var i=0,s=(e=Ns(e,t)?[e]:Qi(e)).length;null!=t&&i<s;)t=t[Qs(e[i++])];return i&&i==s?t:N}function di(t,e,i){var s=e(t);return lh(t)?s:v(s,i(t))}function pi(t,e){return t>e}function fi(t,e){return null!=t&&(wn.call(t,e)||"object"==typeof t&&e in t&&null===Ls(t))}function gi(t,e){return null!=t&&e in Object(t)}function vi(t,e,i){for(var s=i?f:p,r=t[0].length,n=t.length,o=n,h=Array(n),a=1/0,l=[];o--;){var u=t[o];o&&e&&(u=g(u,k(e))),a=Gn(u.length,a),h[o]=!i&&(e||r>=120&&u.length>=120)?new Ee(o&&u):N}u=t[0];var c=-1,d=h[0];t:for(;++c<r&&l.length<a;){var v=u[c],m=e?e(v):v;if(v=i||0!==v?v:0,!(d?E(d,m):s(l,m,i))){for(o=n;--o;){var y=h[o];if(!(y?E(y,m):s(t[o],m,i)))continue t}d&&d.push(m),l.push(v)}}return l}function mi(t,e,i){Ns(e,t)||(t=qs(t,e=Qi(e)),e=hr(e));var s=null==t?t:t[Qs(e)];return null==s?N:h(s,t,i)}function yi(t,e,i,s,r){return t===e||(null==t||null==e||!Ir(t)&&!zr(e)?t!=t&&e!=e:function(t,e,i,s,r,n){var o=lh(t),h=lh(e),a=_t,l=_t;o||(a=(a=As(t))==Ot?zt:a),h||(l=(l=As(e))==Ot?zt:l);var u=a==zt&&!Y(t),c=l==zt&&!Y(e),d=a==l;if(d&&!u)return n||(n=new je),o||Ar(t)?Ms(t,e,i,s,r,n):function(t,e,i,s,r,n,o){switch(i){case Ht:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case Ft:return!(t.byteLength!=e.byteLength||!s(new En(t),new En(e)));case Pt:case Tt:return+t==+e;case kt:return t.name==e.name&&t.message==e.message;case It:return t!=+t?e!=+e:t==+e;case Rt:case Lt:return t==e+"";case jt:var h=W;case Bt:var a=n&lt;if(h||(h=H),t.size!=e.size&&!a)return!1;var l=o.get(t);return l?l==e:(n|=at,o.set(t,e),Ms(h(t),h(e),s,r,n,o));case Yt:if(po)return po.call(t)==po.call(e)}return!1}(t,e,a,i,s,r,n);if(!(r&lt)){var p=u&&wn.call(t,"__wrapped__"),f=c&&wn.call(e,"__wrapped__");if(p||f){var g=p?t.value():t,v=f?e.value():e;return n||(n=new je),i(g,v,s,r,n)}}return!!d&&(n||(n=new je),function(t,e,i,s,r,n){var o=r&lt,h=Zr(t),a=h.length;if(a!=Zr(e).length&&!o)return!1;for(var l=a;l--;){var u=h[l];if(!(o?u in e:fi(e,u)))return!1}var c=n.get(t);if(c)return c==e;var d=!0;n.set(t,e);for(var p=o;++l<a;){u=h[l];var f=t[u],g=e[u];if(s)var v=o?s(g,f,u,e,t,n):s(f,g,u,t,e,n);if(!(v===N?f===g||i(f,g,s,r,n):v)){d=!1;break}p||(p="constructor"==u)}if(d&&!p){var m=t.constructor,y=e.constructor;m!=y&&"constructor"in t&&"constructor"in e&&!("function"==typeof m&&m instanceof m&&"function"==typeof y&&y instanceof y)&&(d=!1)}return n.delete(t),d}(t,e,i,s,r,n))}(t,e,yi,i,s,r))}function xi(t,e,i,s){var r=i.length,n=r,o=!s;if(null==t)return!n;for(t=Object(t);r--;){var h=i[r];if(o&&h[2]?h[1]!==t[h[0]]:!(h[0]in t))return!1}for(;++r<n;){var a=(h=i[r])[0],l=t[a],u=h[1];if(o&&h[2]){if(l===N&&!(a in t))return!1}else{var c=new je;if(s)var d=s(l,u,a,t,e,c);if(!(d===N?yi(u,l,s,at|lt,c):d))return!1}}return!0}function bi(t){return!(!Ir(t)||function(t){return!!xn&&xn in t}(t))&&(Mr(t)||Y(t)?Pn:Se).test(tr(t))}function wi(t){return"function"==typeof t?t:null==t?sn:"object"==typeof t?lh(t)?Pi(t[0],t[1]):_i(t):hn(t)}function Ci(t){t=null==t?t:Object(t);var e=[];for(var i in t)e.push(i);return e}function Si(t,e){return t<e}function Oi(t,e){var i=-1,s=Pr(t)?Array(t.length):[];return go(t,(function(t,r,n){s[++i]=e(t,r,n)})),s}function _i(t){var e=Rs(t);return 1==e.length&&e[0][2]?Ks(e[0][0],e[0][1]):function(i){return i===t||xi(i,t,e)}}function Pi(t,e){return Ns(t)&&Zs(e)?Ks(Qs(t),e):function(i){var s=Ur(i,t);return s===N&&s===e?Jr(i,t):yi(e,s,N,at|lt)}}function Ti(t,e,i,s,r){if(t!==e){if(!lh(e)&&!Ar(e))var n=Kr(e);l(n||e,(function(o,h){if(n&&(o=e[h=o]),Ir(o))r||(r=new je),function(t,e,i,s,r,n,o){var h=t[i],a=e[i],l=o.get(a);if(l)ze(t,i,l);else{var u=n?n(h,a,i+"",t,e,o):N,c=u===N;c&&(u=a,lh(a)||Ar(a)?lh(h)?u=h:Tr(h)?u=ns(h):(c=!1,u=We(a,!0)):Rr(a)||_r(a)?_r(h)?u=Gr(h):!Ir(h)||s&&Mr(h)?(c=!1,u=We(a,!0)):u=h:c=!1),o.set(a,u),c&&r(u,a,s,n,o),o.delete(a),ze(t,i,u)}}(t,e,h,i,Ti,s,r);else{var a=s?s(t[h],o,h+"",t,e,r):N;a===N&&(a=o),ze(t,h,a)}}))}}function ki(t,e){var i=t.length;if(i)return Xs(e+=e<0?i:0,i)?t[e]:N}function Mi(t,e,i){var s=-1;return e=g(e.length?e:[sn],k(zs())),function(t,e){var i=t.length;for(t.sort(e);i--;)t[i]=t[i].value;return t}(Oi(t,(function(t,i,r){return{criteria:g(e,(function(e){return e(t)})),index:++s,value:t}})),(function(t,e){return function(t,e,i){for(var s=-1,r=t.criteria,n=e.criteria,o=r.length,h=i.length;++s<o;){var a=is(r[s],n[s]);if(a)return s>=h?a:a*("desc"==i[s]?-1:1)}return t.index-e.index}(t,e,i)}))}function Ei(t,e){return t=Object(t),m(e,(function(e,i){return i in t&&(e[i]=t[i]),e}),{})}function ji(t,e){for(var i=-1,s=Es(t),r=s.length,n={};++i<r;){var o=s[i],h=t[o];e(h,o)&&(n[o]=h)}return n}function Ii(t){return function(e){return null==e?N:e[t]}}function zi(t,e,i,s){var r=s?S:C,n=-1,o=e.length,h=t;for(t===e&&(e=ns(e)),i&&(h=g(t,k(i)));++n<o;)for(var a=0,l=e[n],u=i?i(l):l;(a=r(h,u,a,s))>-1;)h!==t&&Bn.call(h,a,1),Bn.call(t,a,1);return t}function Di(t,e){for(var i=t?e.length:0,s=i-1;i--;){var r=e[i];if(i==s||r!==n){var n=r;if(Xs(r))Bn.call(t,r,1);else if(Ns(r,t))delete t[Qs(r)];else{var o=Qi(r),h=qs(t,o);null!=h&&delete h[Qs(hr(o))]}}}return t}function Ri(t,e){return t+An(Un()*(e-t+1))}function Bi(t,e){var i="";if(!t||e<1||e>yt)return i;do{e%2&&(i+=t),(e=An(e/2))&&(t+=t)}while(e);return i}function Li(t,e,i,s){for(var r=-1,n=(e=Ns(e,t)?[e]:Qi(e)).length,o=n-1,h=t;null!=h&&++r<n;){var a=Qs(e[r]);if(Ir(h)){var l=i;if(r!=o){var u=h[a];(l=s?s(u,a,h):N)===N&&(l=null==u?Xs(e[r+1])?[]:{}:u)}De(h,a,l)}h=h[a]}return t}function Yi(t,e,i){var s=-1,r=t.length;e<0&&(e=-e>r?0:r+e),(i=i>r?r:i)<0&&(i+=r),r=e>i?0:i-e>>>0,e>>>=0;for(var n=Array(r);++s<r;)n[s]=t[s+e];return n}function Ai(t,e){var i;return go(t,(function(t,s,r){return!(i=e(t,s,r))})),!!i}function Wi(t,e,i){var s=0,r=t?t.length:s;if("number"==typeof e&&e==e&&r<=St){for(;s<r;){var n=s+r>>>1,o=t[n];null!==o&&!Yr(o)&&(i?o<=e:o<e)?s=n+1:r=n}return r}return Fi(t,e,sn,i)}function Fi(t,e,i,s){e=i(e);for(var r=0,n=t?t.length:0,o=e!=e,h=null===e,a=Yr(e),l=e===N;r<n;){var u=An((r+n)/2),c=i(t[u]),d=c!==N,p=null===c,f=c==c,g=Yr(c);if(o)var v=s||f;else v=l?f&&(s||d):h?f&&d&&(s||!p):a?f&&d&&!p&&(s||!g):!p&&!g&&(s?c<=e:c<e);v?r=u+1:n=u}return Gn(n,Ct)}function Hi(t,e){for(var i=-1,s=t.length,r=0,n=[];++i<s;){var o=t[i],h=e?e(o):o;if(!i||!Or(h,a)){var a=h;n[r++]=0===o?0:o}}return n}function Vi(t){return"number"==typeof t?t:Yr(t)?bt:+t}function Xi(t){if("string"==typeof t)return t;if(Yr(t))return fo?fo.call(t):"";var e=t+"";return"0"==e&&1/t==-mt?"-0":e}function Gi(t,e,i){var s=-1,r=p,n=t.length,o=!0,h=[],a=h;if(i)o=!1,r=f;else if(n>=J){var l=e?null:bo(t);if(l)return H(l);o=!1,r=E,a=new Ee}else a=e?[]:h;t:for(;++s<n;){var u=t[s],c=e?e(u):u;if(u=i||0!==u?u:0,o&&c==c){for(var d=a.length;d--;)if(a[d]===c)continue t;e&&a.push(c),h.push(u)}else r(a,c,i)||(a!==h&&a.push(c),h.push(u))}return h}function Ni(t,e,i,s){return Li(t,e,i(li(t,e)),s)}function Ui(t,e,i,s){for(var r=t.length,n=s?r:-1;(s?n--:++n<r)&&e(t[n],n,t););return i?Yi(t,s?0:n,s?n+1:r):Yi(t,s?n+1:0,s?r:n)}function Ji(t,e){var i=t;return i instanceof n&&(i=i.value()),m(e,(function(t,e){return e.func.apply(e.thisArg,v([t],e.args))}),i)}function Zi(t,e,i){for(var s=-1,r=t.length;++s<r;)var n=n?v(qe(n,t[s],e,i),qe(t[s],n,e,i)):t[s];return n&&n.length?Gi(n,e,i):[]}function Ki(t,e,i){for(var s=-1,r=t.length,n=e.length,o={};++s<r;){var h=s<n?e[s]:N;i(o,t[s],h)}return o}function $i(t){return Tr(t)?t:[]}function qi(t){return"function"==typeof t?t:sn}function Qi(t){return lh(t)?t:Po(t)}function ts(t,e,i){var s=t.length;return i=i===N?s:i,!e&&i>=s?t:Yi(t,e,i)}function es(t){var e=new t.constructor(t.byteLength);return new En(e).set(new En(t)),e}function is(t,e){if(t!==e){var i=t!==N,s=null===t,r=t==t,n=Yr(t),o=e!==N,h=null===e,a=e==e,l=Yr(e);if(!h&&!l&&!n&&t>e||n&&o&&a&&!h&&!l||s&&o&&a||!i&&a||!r)return 1;if(!s&&!n&&!l&&t<e||l&&i&&r&&!s&&!n||h&&i&&r||!o&&r||!a)return-1}return 0}function ss(t,e,i,s){for(var r=-1,n=t.length,o=i.length,h=-1,a=e.length,l=Xn(n-o,0),u=Array(a+l),c=!s;++h<a;)u[h]=e[h];for(;++r<o;)(c||r<n)&&(u[i[r]]=t[r]);for(;l--;)u[h++]=t[r++];return u}function rs(t,e,i,s){for(var r=-1,n=t.length,o=-1,h=i.length,a=-1,l=e.length,u=Xn(n-h,0),c=Array(u+l),d=!s;++r<u;)c[r]=t[r];for(var p=r;++a<l;)c[p+a]=e[a];for(;++o<h;)(d||r<n)&&(c[p+i[o]]=t[r++]);return c}function ns(t,e){var i=-1,s=t.length;for(e||(e=Array(s));++i<s;)e[i]=t[i];return e}function os(t,e,i,s){i||(i={});for(var r=-1,n=e.length;++r<n;){var o=e[r];De(i,o,s?s(i[o],t[o],o,i,t):t[o])}return i}function hs(t,e){return function(i,s){var r=lh(i)?a:Be,n=e?e():{};return r(i,t,zs(s),n)}}function as(t){return Sr((function(e,i){var s=-1,r=i.length,n=r>1?i[r-1]:N,o=r>2?i[2]:N;for(n=t.length>3&&"function"==typeof n?(r--,n):N,o&&Gs(i[0],i[1],o)&&(n=r<3?N:n,r=1),e=Object(e);++s<r;){var h=i[s];h&&t(e,h,s,n)}return e}))}function ls(t,e){return function(i,s){if(null==i)return i;if(!Pr(i))return t(i,s);for(var r=i.length,n=e?r:-1,o=Object(i);(e?n--:++n<r)&&!1!==s(o[n],n,o););return i}}function us(t){return function(e,i,s){for(var r=-1,n=Object(e),o=s(e),h=o.length;h--;){var a=o[t?h:++r];if(!1===i(n[a],a,n))break}return e}}function cs(t){return function(e){e=Nr(e);var i=Ne.test(e)?X(e):N,s=i?i[0]:e.charAt(0),r=i?ts(i,1).join(""):e.slice(1);return s[t]()+r}}function ds(t){return function(e){return m(tn(Qr(e).replace(He,"")),t,"")}}function ps(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var i=Fe(t.prototype),s=t.apply(i,e);return Ir(s)?s:i}}function fs(t,e,i){var s=ps(t);return function r(){for(var n=arguments.length,o=Array(n),a=n,l=Is(r);a--;)o[a]=arguments[a];var u=n<3&&o[0]!==l&&o[n-1]!==l?[]:F(o,l);return(n-=u.length)<i?_s(t,e,ms,r.placeholder,N,o,u,N,N,i-n):h(this&&this!==ui&&this instanceof r?s:t,this,o)}}function gs(t){return function(e,i,s){var r=Object(e);if(i=zs(i,3),!Pr(e))var n=Zr(e);var o=t(n||e,(function(t,e){return n&&(t=r[e=t]),i(t,e,r)}),s);return o>-1?e[n?n[o]:o]:N}}function vs(t){return Sr((function(e){var i=(e=ri(e,1)).length,s=i,n=r.prototype.thru;for(t&&e.reverse();s--;){var o=e[s];if("function"!=typeof o)throw new fn(Z);if(n&&!h&&"wrapper"==js(o))var h=new r([],!0)}for(s=h?s:i;++s<i;){var a=js(o=e[s]),l="wrapper"==a?wo(o):N;h=l&&Us(l[0])&&l[1]==(nt|et|st|ot)&&!l[4].length&&1==l[9]?h[js(l[0])].apply(h,l[3]):1==o.length&&Us(o)?h[a]():h.thru(o)}return function(){var t=arguments,s=t[0];if(h&&1==t.length&&lh(s)&&s.length>=J)return h.plant(s).value();for(var r=0,n=i?e[r].apply(this,t):s;++r<i;)n=e[r].call(this,n);return n}}))}function ms(t,e,i,s,r,n,o,h,a,l){var u=e&nt,c=e&q,d=e&Q,p=e&(et|it),f=e&ht,g=d?N:ps(t);return function v(){for(var m=arguments.length,y=Array(m),x=m;x--;)y[x]=arguments[x];if(p)var b=Is(v),w=function(t,e){for(var i=t.length,s=0;i--;)t[i]===e&&s++;return s}(y,b);if(s&&(y=ss(y,s,r,p)),n&&(y=rs(y,n,o,p)),m-=w,p&&m<l){var C=F(y,b);return _s(t,e,ms,v.placeholder,i,y,C,h,a,l-m)}var S=c?i:this,O=d?S[t]:t;return m=y.length,h?y=function(t,e){for(var i=t.length,s=Gn(e.length,i),r=ns(t);s--;){var n=e[s];t[s]=Xs(n,i)?r[n]:N}return t}(y,h):f&&m>1&&y.reverse(),u&&a<m&&(y.length=a),this&&this!==ui&&this instanceof v&&(O=g||ps(O)),O.apply(S,y)}}function ys(t,e){return function(i,s){return function(t,e,i,s){return ni(t,(function(t,r,n){e(s,i(t),r,n)})),s}(i,t,e(s),{})}}function xs(t){return function(e,i){var s;if(e===N&&i===N)return 0;if(e!==N&&(s=e),i!==N){if(s===N)return i;"string"==typeof e||"string"==typeof i?(e=Xi(e),i=Xi(i)):(e=Vi(e),i=Vi(i)),s=t(e,i)}return s}}function bs(t){return Sr((function(e){return e=1==e.length&&lh(e[0])?g(e[0],k(zs())):g(ri(e,1,Vs),k(zs())),Sr((function(i){var s=this;return t(e,(function(t){return h(t,s,i)}))}))}))}function ws(t,e){var i=(e=e===N?" ":Xi(e)).length;if(i<2)return i?Bi(e,t):e;var s=Bi(e,Yn(t/V(e)));return Ne.test(e)?ts(X(s),0,t).join(""):s.slice(0,t)}function Cs(t,e,i,s){var r=e&q,n=ps(t);return function e(){for(var o=-1,a=arguments.length,l=-1,u=s.length,c=Array(u+a),d=this&&this!==ui&&this instanceof e?n:t;++l<u;)c[l]=s[l];for(;a--;)c[l++]=arguments[++o];return h(d,r?i:this,c)}}function Ss(t){return function(e,i,s){return s&&"number"!=typeof s&&Gs(e,i,s)&&(i=s=N),e=(e=Xr(e))==e?e:0,i===N?(i=e,e=0):i=Xr(i)||0,function(t,e,i,s){for(var r=-1,n=Xn(Yn((e-t)/(i||1)),0),o=Array(n);n--;)o[s?n:++r]=t,t+=i;return o}(e,i,s=s===N?e<i?1:-1:Xr(s)||0,t)}}function Os(t){return function(e,i){return"string"==typeof e&&"string"==typeof i||(e=Xr(e),i=Xr(i)),t(e,i)}}function _s(t,e,i,s,r,n,o,h,a,l){var u=e&et;e|=u?st:rt,(e&=~(u?rt:st))&tt||(e&=~(q|Q));var c=[t,e,r,u?n:N,u?o:N,u?N:n,u?N:o,h,a,l],d=i.apply(N,c);return Us(t)&&_o(d,c),d.placeholder=s,d}function Ps(t){var e=dn[t];return function(t,i){if(t=Xr(t),i=Gn(Hr(i),292)){var s=(Nr(t)+"e").split("e");return+((s=(Nr(e(s[0]+"e"+(+s[1]+i)))+"e").split("e"))[0]+"e"+(+s[1]-i))}return e(t)}}function Ts(t){return function(e){var i=As(e);return i==jt?W(e):i==Bt?function(t){var e=-1,i=Array(t.size);return t.forEach((function(t){i[++e]=[t,t]})),i}(e):function(t,e){return g(e,(function(e){return[e,t[e]]}))}(e,t(e))}}function ks(t,e,i,s,r,n,o,h){var a=e&Q;if(!a&&"function"!=typeof t)throw new fn(Z);var l=s?s.length:0;if(l||(e&=~(st|rt),s=r=N),o=o===N?o:Xn(Hr(o),0),h=h===N?h:Hr(h),l-=r?r.length:0,e&rt){var u=s,c=r;s=r=N}var d=a?N:wo(t),p=[t,e,i,s,r,u,c,n,o,h];if(d&&function(t,e){var i=t[1],s=e[1],r=i|s,n=r<(q|Q|nt),o=s==nt&&i==et||s==nt&&i==ot&&t[7].length<=e[8]||s==(nt|ot)&&e[7].length<=e[8]&&i==et;if(!n&&!o)return t;s&q&&(t[2]=e[2],r|=i&q?0:tt);var h=e[3];if(h){var a=t[3];t[3]=a?ss(a,h,e[4]):h,t[4]=a?F(t[3],$):e[4]}(h=e[5])&&(a=t[5],t[5]=a?rs(a,h,e[6]):h,t[6]=a?F(t[5],$):e[6]),(h=e[7])&&(t[7]=h),s&nt&&(t[8]=null==t[8]?e[8]:Gn(t[8],e[8])),null==t[9]&&(t[9]=e[9]),t[0]=e[0],t[1]=r}(p,d),t=p[0],e=p[1],i=p[2],s=p[3],r=p[4],!(h=p[9]=null==p[9]?a?0:t.length:Xn(p[9]-l,0))&&e&(et|it)&&(e&=~(et|it)),e&&e!=q)f=e==et||e==it?fs(t,e,h):e!=st&&e!=(q|st)||r.length?ms.apply(N,p):Cs(t,e,i,s);else var f=function(t,e,i){var s=e&q,r=ps(t);return function e(){return(this&&this!==ui&&this instanceof e?r:t).apply(s?i:this,arguments)}}(t,e,i);return(d?xo:_o)(f,p)}function Ms(t,e,i,s,r,n){var o=r&lt,h=t.length,a=e.length;if(h!=a&&!(o&&a>h))return!1;var l=n.get(t);if(l)return l==e;var u=-1,c=!0,d=r&at?new Ee:N;for(n.set(t,e);++u<h;){var p=t[u],f=e[u];if(s)var g=o?s(f,p,u,e,t,n):s(p,f,u,t,e,n);if(g!==N){if(g)continue;c=!1;break}if(d){if(!x(e,(function(t,e){if(!d.has(e)&&(p===t||i(p,t,s,r,n)))return d.add(e)}))){c=!1;break}}else if(p!==f&&!i(p,f,s,r,n)){c=!1;break}}return n.delete(t),c}function Es(t){return di(t,Kr,So)}function js(t){for(var e=t.name+"",i=no[e],s=wn.call(no,e)?i.length:0;s--;){var r=i[s],n=r.func;if(null==n||n==t)return r.name}return e}function Is(t){return(wn.call(i,"placeholder")?i:t).placeholder}function zs(){var t=i.iteratee||rn;return t=t===rn?wi:t,arguments.length?t(arguments[0],arguments[1]):t}function Ds(t,e){var i=t.__data__;return function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}(e)?i["string"==typeof e?"string":"hash"]:i.map}function Rs(t){for(var e=Zr(t),i=e.length;i--;){var s=e[i],r=t[s];e[i]=[s,r,Zs(r)]}return e}function Bs(t,e){var i=function(t,e){return null==t?N:t[e]}(t,e);return bi(i)?i:N}function Ls(t){return Wn(Object(t))}function Ys(t){return In(Object(t))}function As(t){return On.call(t)}function Ws(t,e,i){for(var s,r=-1,n=(e=Ns(e,t)?[e]:Qi(e)).length;++r<n;){var o=Qs(e[r]);if(!(s=null!=t&&i(t,o)))break;t=t[o]}return s||!!(n=t?t.length:0)&&jr(n)&&Xs(o,n)&&(lh(t)||Lr(t)||_r(t))}function Fs(t){var e=t?t.length:N;return jr(e)&&(lh(t)||Lr(t)||_r(t))?T(e,String):null}function Hs(t){return lh(t)||_r(t)}function Vs(t){return lh(t)&&!(2==t.length&&!Mr(t[0]))}function Xs(t,e){return!!(e=null==e?yt:e)&&("number"==typeof t||_e.test(t))&&t>-1&&t%1==0&&t<e}function Gs(t,e,i){if(!Ir(i))return!1;var s=typeof e;return!!("number"==s?Pr(i)&&Xs(e,i.length):"string"==s&&e in i)&&Or(i[e],t)}function Ns(t,e){if(lh(t))return!1;var i=typeof t;return!("number"!=i&&"symbol"!=i&&"boolean"!=i&&null!=t&&!Yr(t))||le.test(t)||!ae.test(t)||null!=e&&t in Object(e)}function Us(t){var e=js(t),s=i[e];if("function"!=typeof s||!(e in n.prototype))return!1;if(t===s)return!0;var r=wo(s);return!!r&&t===r[0]}function Js(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||vn)}function Zs(t){return t==t&&!Ir(t)}function Ks(t,e){return function(i){return null!=i&&i[t]===e&&(e!==N||t in Object(i))}}function $s(t,e,i,s,r,n){return Ir(t)&&Ir(e)&&Ti(t,e,N,$s,n.set(e,t)),t}function qs(t,e){return 1==e.length?t:li(t,Yi(e,0,-1))}function Qs(t){if("string"==typeof t||Yr(t))return t;var e=t+"";return"0"==e&&1/t==-mt?"-0":e}function tr(t){if(null!=t){try{return bn.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function er(t){if(t instanceof n)return t.clone();var e=new r(t.__wrapped__,t.__chain__);return e.__actions__=ns(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}function ir(t,e,i){var s=t?t.length:0;return s?Yi(t,(e=i||e===N?1:Hr(e))<0?0:e,s):[]}function sr(t,e,i){var s=t?t.length:0;return s?Yi(t,0,(e=s-(e=i||e===N?1:Hr(e)))<0?0:e):[]}function rr(t,e,i){var s=t?t.length:0;if(!s)return-1;var r=null==i?0:Hr(i);return r<0&&(r=Xn(s+r,0)),w(t,zs(e,3),r)}function nr(t,e,i){var s=t?t.length:0;if(!s)return-1;var r=s-1;return i!==N&&(r=Hr(i),r=i<0?Xn(s+r,0):Gn(r,s-1)),w(t,zs(e,3),r,!0)}function or(t){return t&&t.length?t[0]:N}function hr(t){var e=t?t.length:0;return e?t[e-1]:N}function ar(t,e){return t&&t.length&&e&&e.length?zi(t,e):t}function lr(t){return t?Zn.call(t):t}function ur(t){if(!t||!t.length)return[];var e=0;return t=d(t,(function(t){if(Tr(t))return e=Xn(t.length,e),!0})),T(e,(function(e){return g(t,Ii(e))}))}function cr(t,e){if(!t||!t.length)return[];var i=ur(t);return null==e?i:g(i,(function(t){return h(e,N,t)}))}function dr(t){var e=i(t);return e.__chain__=!0,e}function pr(t,e){return e(t)}function fr(t,e){return(lh(t)?l:go)(t,zs(e,3))}function gr(t,e){return(lh(t)?u:vo)(t,zs(e,3))}function vr(t,e){return(lh(t)?g:Oi)(t,zs(e,3))}function mr(t,e,i){var s=-1,r=Wr(t),n=r.length,o=n-1;for(e=(i?Gs(t,e,i):e===N)?1:Ae(Hr(e),0,n);++s<e;){var h=Ri(s,o),a=r[h];r[h]=r[s],r[s]=a}return r.length=e,r}function yr(){return un.now()}function xr(t,e,i){return e=i?N:e,e=t&&null==e?t.length:e,ks(t,nt,N,N,N,N,e)}function br(t,e){var i;if("function"!=typeof e)throw new fn(Z);return t=Hr(t),function(){return--t>0&&(i=e.apply(this,arguments)),t<=1&&(e=N),i}}function wr(t,e,i){function s(e){var i=a,s=l;return a=l=N,f=e,c=t.apply(s,i)}function r(t){var i=t-p;return p===N||i>=e||i<0||v&&t-f>=u}function n(){var t=yr();if(r(t))return o(t);d=Ln(n,function(t){var i=e-(t-p);return v?Gn(i,u-(t-f)):i}(t))}function o(t){return d=N,m&&a?s(t):(a=l=N,c)}function h(){var t=yr(),i=r(t);if(a=arguments,l=this,p=t,i){if(d===N)return function(t){return f=t,d=Ln(n,e),g?s(t):c}(p);if(v)return d=Ln(n,e),s(p)}return d===N&&(d=Ln(n,e)),c}var a,l,u,c,d,p,f=0,g=!1,v=!1,m=!0;if("function"!=typeof t)throw new fn(Z);return e=Xr(e)||0,Ir(i)&&(g=!!i.leading,u=(v="maxWait"in i)?Xn(Xr(i.maxWait)||0,e):u,m="trailing"in i?!!i.trailing:m),h.cancel=function(){f=0,a=p=l=d=N},h.flush=function(){return d===N?c:o(yr())},h}function Cr(t,e){if("function"!=typeof t||e&&"function"!=typeof e)throw new fn(Z);var i=function(){var s=arguments,r=e?e.apply(this,s):s[0],n=i.cache;if(n.has(r))return n.get(r);var o=t.apply(this,s);return i.cache=n.set(r,o),o};return i.cache=new(Cr.Cache||Me),i}function Sr(t,e){if("function"!=typeof t)throw new fn(Z);return e=Xn(e===N?t.length-1:Hr(e),0),function(){for(var i=arguments,s=-1,r=Xn(i.length-e,0),n=Array(r);++s<r;)n[s]=i[e+s];switch(e){case 0:return t.call(this,n);case 1:return t.call(this,i[0],n);case 2:return t.call(this,i[0],i[1],n)}var o=Array(e+1);for(s=-1;++s<e;)o[s]=i[s];return o[e]=n,h(t,this,o)}}function Or(t,e){return t===e||t!=t&&e!=e}function _r(t){return Tr(t)&&wn.call(t,"callee")&&(!Rn.call(t,"callee")||On.call(t)==Ot)}function Pr(t){return null!=t&&jr(Co(t))&&!Mr(t)}function Tr(t){return zr(t)&&Pr(t)}function kr(t){return!!zr(t)&&(On.call(t)==kt||"string"==typeof t.message&&"string"==typeof t.name)}function Mr(t){var e=Ir(t)?On.call(t):"";return e==Mt||e==Et}function Er(t){return"number"==typeof t&&t==Hr(t)}function jr(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=yt}function Ir(t){var e=typeof t;return!!t&&("object"==e||"function"==e)}function zr(t){return!!t&&"object"==typeof t}function Dr(t){return"number"==typeof t||zr(t)&&On.call(t)==It}function Rr(t){if(!zr(t)||On.call(t)!=zt||Y(t))return!1;var e=Ls(t);if(null===e)return!0;var i=wn.call(e,"constructor")&&e.constructor;return"function"==typeof i&&i instanceof i&&bn.call(i)==Sn}function Br(t){return Ir(t)&&On.call(t)==Rt}function Lr(t){return"string"==typeof t||!lh(t)&&zr(t)&&On.call(t)==Lt}function Yr(t){return"symbol"==typeof t||zr(t)&&On.call(t)==Yt}function Ar(t){return zr(t)&&jr(t.length)&&!!Ke[On.call(t)]}function Wr(t){if(!t)return[];if(Pr(t))return Lr(t)?X(t):ns(t);if(zn&&t[zn])return A(t[zn]());var e=As(t);return(e==jt?W:e==Bt?H:$r)(t)}function Fr(t){return t?(t=Xr(t))===mt||t===-mt?(t<0?-1:1)*xt:t==t?t:0:0===t?t:0}function Hr(t){var e=Fr(t),i=e%1;return e==e?i?e-i:e:0}function Vr(t){return t?Ae(Hr(t),0,wt):0}function Xr(t){if("number"==typeof t)return t;if(Yr(t))return bt;if(Ir(t)){var e=Mr(t.valueOf)?t.valueOf():t;t=Ir(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(pe,"");var i=Ce.test(t);return i||Oe.test(t)?si(t.slice(2),i?2:8):we.test(t)?bt:+t}function Gr(t){return os(t,Kr(t))}function Nr(t){return null==t?"":Xi(t)}function Ur(t,e,i){var s=null==t?N:li(t,e);return s===N?i:s}function Jr(t,e){return null!=t&&Ws(t,e,gi)}function Zr(t){var e=Js(t);if(!e&&!Pr(t))return function(t){return Vn(Object(t))}(t);var i=Fs(t),s=!!i,r=i||[],n=r.length;for(var o in t)!fi(t,o)||s&&("length"==o||Xs(o,n))||e&&"constructor"==o||r.push(o);return r}function Kr(t){for(var e=-1,i=Js(t),s=Ci(t),r=s.length,n=Fs(t),o=!!n,h=n||[],a=h.length;++e<r;){var l=s[e];o&&("length"==l||Xs(l,a))||"constructor"==l&&(i||!wn.call(t,l))||h.push(l)}return h}function $r(t){return t?M(t,Zr(t)):[]}function qr(t){return Bh(Nr(t).toLowerCase())}function Qr(t){return(t=Nr(t))&&t.replace(Pe,D).replace(Ve,"")}function tn(t,e,i){return t=Nr(t),(e=i?N:e)===N&&(e=Ue.test(t)?Ge:ve),t.match(e)||[]}function en(t){return function(){return t}}function sn(t){return t}function rn(t){return wi("function"==typeof t?t:We(t,!0))}function nn(t,e,i){var s=Zr(e),r=ai(e,s);null!=i||Ir(e)&&(r.length||!s.length)||(i=e,e=t,t=this,r=ai(e,Zr(e)));var n=!(Ir(i)&&"chain"in i&&!i.chain),o=Mr(t);return l(r,(function(i){var s=e[i];t[i]=s,o&&(t.prototype[i]=function(){var e=this.__chain__;if(n||e){var i=t(this.__wrapped__);return(i.__actions__=ns(this.__actions__)).push({func:s,args:arguments,thisArg:t}),i.__chain__=e,i}return s.apply(t,v([this.value()],arguments))})})),t}function on(){}function hn(t){return Ns(t)?Ii(Qs(t)):function(t){return function(e){return li(e,t)}}(t)}function an(){return[]}function ln(){return!1}var un=(e=e?ci.defaults({},e,ci.pick(ui,Je)):ui).Date,cn=e.Error,dn=e.Math,pn=e.RegExp,fn=e.TypeError,gn=e.Array.prototype,vn=e.Object.prototype,mn=e.String.prototype,yn=e["__core-js_shared__"],xn=function(){var t=/[^.]+$/.exec(yn&&yn.keys&&yn.keys.IE_PROTO||"");return t?"Symbol(src)_1."+t:""}(),bn=e.Function.prototype.toString,wn=vn.hasOwnProperty,Cn=0,Sn=bn.call(Object),On=vn.toString,_n=ui._,Pn=pn("^"+bn.call(wn).replace(ce,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Tn=oi?e.Buffer:N,kn=e.Reflect,Mn=e.Symbol,En=e.Uint8Array,jn=kn?kn.enumerate:N,In=Object.getOwnPropertySymbols,zn="symbol"==typeof(zn=Mn&&Mn.iterator)?zn:N,Dn=Object.create,Rn=vn.propertyIsEnumerable,Bn=gn.splice,Ln=function(t,i){return e.setTimeout.call(ui,t,i)},Yn=dn.ceil,An=dn.floor,Wn=Object.getPrototypeOf,Fn=e.isFinite,Hn=gn.join,Vn=Object.keys,Xn=dn.max,Gn=dn.min,Nn=e.parseInt,Un=dn.random,Jn=mn.replace,Zn=gn.reverse,Kn=mn.split,$n=Bs(e,"DataView"),qn=Bs(e,"Map"),Qn=Bs(e,"Promise"),to=Bs(e,"Set"),eo=Bs(e,"WeakMap"),io=Bs(Object,"create"),so=eo&&new eo,ro=!Rn.call({valueOf:1},"valueOf"),no={},oo=tr($n),ho=tr(qn),ao=tr(Qn),lo=tr(to),uo=tr(eo),co=Mn?Mn.prototype:N,po=co?co.valueOf:N,fo=co?co.toString:N;i.templateSettings={escape:ne,evaluate:oe,interpolate:he,variable:"",imports:{_:i}},i.prototype=s.prototype,i.prototype.constructor=i,r.prototype=Fe(s.prototype),r.prototype.constructor=r,n.prototype=Fe(s.prototype),n.prototype.constructor=n,o.prototype.clear=function(){this.__data__=io?io(null):{}},o.prototype.delete=function(t){return this.has(t)&&delete this.__data__[t]},o.prototype.get=function(t){var e=this.__data__;if(io){var i=e[t];return i===K?N:i}return wn.call(e,t)?e[t]:N},o.prototype.has=function(t){var e=this.__data__;return io?e[t]!==N:wn.call(e,t)},o.prototype.set=function(t,e){return this.__data__[t]=io&&e===N?K:e,this},z.prototype.clear=function(){this.__data__=[]},z.prototype.delete=function(t){var e=this.__data__,i=Re(e,t);return!(i<0||(i==e.length-1?e.pop():Bn.call(e,i,1),0))},z.prototype.get=function(t){var e=this.__data__,i=Re(e,t);return i<0?N:e[i][1]},z.prototype.has=function(t){return Re(this.__data__,t)>-1},z.prototype.set=function(t,e){var i=this.__data__,s=Re(i,t);return s<0?i.push([t,e]):i[s][1]=e,this},Me.prototype.clear=function(){this.__data__={hash:new o,map:new(qn||z),string:new o}},Me.prototype.delete=function(t){return Ds(this,t).delete(t)},Me.prototype.get=function(t){return Ds(this,t).get(t)},Me.prototype.has=function(t){return Ds(this,t).has(t)},Me.prototype.set=function(t,e){return Ds(this,t).set(t,e),this},Ee.prototype.add=Ee.prototype.push=function(t){return this.__data__.set(t,K),this},Ee.prototype.has=function(t){return this.__data__.has(t)},je.prototype.clear=function(){this.__data__=new z},je.prototype.delete=function(t){return this.__data__.delete(t)},je.prototype.get=function(t){return this.__data__.get(t)},je.prototype.has=function(t){return this.__data__.has(t)},je.prototype.set=function(t,e){var i=this.__data__;return i instanceof z&&i.__data__.length==J&&(i=this.__data__=new Me(i.__data__)),i.set(t,e),this};var go=ls(ni),vo=ls(hi,!0),mo=us(),yo=us(!0);jn&&!Rn.call({valueOf:1},"valueOf")&&(Ci=function(t){return A(jn(t))});var xo=so?function(t,e){return so.set(t,e),t}:sn,bo=to&&1/H(new to([,-0]))[1]==mt?function(t){return new to(t)}:on,wo=so?function(t){return so.get(t)}:on,Co=Ii("length");In||(Ys=an);var So=In?function(t){for(var e=[];t;)v(e,Ys(t)),t=Ls(t);return e}:Ys;($n&&As(new $n(new ArrayBuffer(1)))!=Ht||qn&&As(new qn)!=jt||Qn&&As(Qn.resolve())!=Dt||to&&As(new to)!=Bt||eo&&As(new eo)!=At)&&(As=function(t){var e=On.call(t),i=e==zt?t.constructor:N,s=i?tr(i):N;if(s)switch(s){case oo:return Ht;case ho:return jt;case ao:return Dt;case lo:return Bt;case uo:return At}return e});var Oo=yn?Mr:ln,_o=function(){var t=0,e=0;return function(i,s){var r=yr(),n=pt-(r-e);if(e=r,n>0){if(++t>=dt)return i}else t=0;return xo(i,s)}}(),Po=Cr((function(t){var e=[];return Nr(t).replace(ue,(function(t,i,s,r){e.push(s?r.replace(me,"$1"):i||t)})),e})),To=Sr((function(t,e){return Tr(t)?qe(t,ri(e,1,Tr,!0)):[]})),ko=Sr((function(t,e){var i=hr(e);return Tr(i)&&(i=N),Tr(t)?qe(t,ri(e,1,Tr,!0),zs(i)):[]})),Mo=Sr((function(t,e){var i=hr(e);return Tr(i)&&(i=N),Tr(t)?qe(t,ri(e,1,Tr,!0),N,i):[]})),Eo=Sr((function(t){var e=g(t,$i);return e.length&&e[0]===t[0]?vi(e):[]})),jo=Sr((function(t){var e=hr(t),i=g(t,$i);return e===hr(i)?e=N:i.pop(),i.length&&i[0]===t[0]?vi(i,zs(e)):[]})),Io=Sr((function(t){var e=hr(t),i=g(t,$i);return e===hr(i)?e=N:i.pop(),i.length&&i[0]===t[0]?vi(i,N,e):[]})),zo=Sr(ar),Do=Sr((function(t,e){e=ri(e,1);var i=t?t.length:0,s=Ye(t,e);return Di(t,g(e,(function(t){return Xs(t,i)?+t:t})).sort(is)),s})),Ro=Sr((function(t){return Gi(ri(t,1,Tr,!0))})),Bo=Sr((function(t){var e=hr(t);return Tr(e)&&(e=N),Gi(ri(t,1,Tr,!0),zs(e))})),Lo=Sr((function(t){var e=hr(t);return Tr(e)&&(e=N),Gi(ri(t,1,Tr,!0),N,e)})),Yo=Sr((function(t,e){return Tr(t)?qe(t,e):[]})),Ao=Sr((function(t){return Zi(d(t,Tr))})),Wo=Sr((function(t){var e=hr(t);return Tr(e)&&(e=N),Zi(d(t,Tr),zs(e))})),Fo=Sr((function(t){var e=hr(t);return Tr(e)&&(e=N),Zi(d(t,Tr),N,e)})),Ho=Sr(ur),Vo=Sr((function(t){var e=t.length,i=e>1?t[e-1]:N;return i="function"==typeof i?(t.pop(),i):N,cr(t,i)})),Xo=Sr((function(t){var e=(t=ri(t,1)).length,i=e?t[0]:0,s=this.__wrapped__,o=function(e){return Ye(e,t)};return!(e>1||this.__actions__.length)&&s instanceof n&&Xs(i)?((s=s.slice(i,+i+(e?1:0))).__actions__.push({func:pr,args:[o],thisArg:N}),new r(s,this.__chain__).thru((function(t){return e&&!t.length&&t.push(N),t}))):this.thru(o)})),Go=hs((function(t,e,i){wn.call(t,i)?++t[i]:t[i]=1})),No=gs(rr),Uo=gs(nr),Jo=hs((function(t,e,i){wn.call(t,i)?t[i].push(e):t[i]=[e]})),Zo=Sr((function(t,e,i){var s=-1,r="function"==typeof e,n=Ns(e),o=Pr(t)?Array(t.length):[];return go(t,(function(t){var a=r?e:n&&null!=t?t[e]:N;o[++s]=a?h(a,t,i):mi(t,e,i)})),o})),Ko=hs((function(t,e,i){t[i]=e})),$o=hs((function(t,e,i){t[i?0:1].push(e)}),(function(){return[[],[]]})),qo=Sr((function(t,e){if(null==t)return[];var i=e.length;return i>1&&Gs(t,e[0],e[1])?e=[]:i>2&&Gs(e[0],e[1],e[2])&&(e=[e[0]]),Mi(t,e=1==e.length&&lh(e[0])?e[0]:ri(e,1,Vs),[])})),Qo=Sr((function(t,e,i){var s=q;if(i.length){var r=F(i,Is(Qo));s|=st}return ks(t,s,e,i,r)})),th=Sr((function(t,e,i){var s=q|Q;if(i.length){var r=F(i,Is(th));s|=st}return ks(e,s,t,i,r)})),eh=Sr((function(t,e){return Xe(t,1,e)})),ih=Sr((function(t,e,i){return Xe(t,Xr(e)||0,i)}));Cr.Cache=Me;var sh=Sr((function(t,e){var i=(e=1==e.length&&lh(e[0])?g(e[0],k(zs())):g(ri(e,1,Vs),k(zs()))).length;return Sr((function(s){for(var r=-1,n=Gn(s.length,i);++r<n;)s[r]=e[r].call(this,s[r]);return h(t,this,s)}))})),rh=Sr((function(t,e){var i=F(e,Is(rh));return ks(t,st,N,e,i)})),nh=Sr((function(t,e){var i=F(e,Is(nh));return ks(t,rt,N,e,i)})),oh=Sr((function(t,e){return ks(t,ot,N,N,N,ri(e,1))})),hh=Os(pi),ah=Os((function(t,e){return t>=e})),lh=Array.isArray,uh=Tn?function(t){return t instanceof Tn}:ln,ch=Os(Si),dh=Os((function(t,e){return t<=e})),ph=as((function(t,e){if(ro||Js(e)||Pr(e))os(e,Zr(e),t);else for(var i in e)wn.call(e,i)&&De(t,i,e[i])})),fh=as((function(t,e){if(ro||Js(e)||Pr(e))os(e,Kr(e),t);else for(var i in e)De(t,i,e[i])})),gh=as((function(t,e,i,s){os(e,Kr(e),t,s)})),vh=as((function(t,e,i,s){os(e,Zr(e),t,s)})),mh=Sr((function(t,e){return Ye(t,ri(e,1))})),yh=Sr((function(t){return t.push(N,Ie),h(gh,N,t)})),xh=Sr((function(t){return t.push(N,$s),h(Oh,N,t)})),bh=ys((function(t,e,i){t[e]=i}),en(sn)),wh=ys((function(t,e,i){wn.call(t,e)?t[e].push(i):t[e]=[i]}),zs),Ch=Sr(mi),Sh=as((function(t,e,i){Ti(t,e,i)})),Oh=as((function(t,e,i,s){Ti(t,e,i,s)})),_h=Sr((function(t,e){return null==t?{}:(e=g(ri(e,1),Qs),Ei(t,qe(Es(t),e)))})),Ph=Sr((function(t,e){return null==t?{}:Ei(t,g(ri(e,1),Qs))})),Th=Ts(Zr),kh=Ts(Kr),Mh=ds((function(t,e,i){return e=e.toLowerCase(),t+(i?qr(e):e)})),Eh=ds((function(t,e,i){return t+(i?"-":"")+e.toLowerCase()})),jh=ds((function(t,e,i){return t+(i?" ":"")+e.toLowerCase()})),Ih=cs("toLowerCase"),zh=ds((function(t,e,i){return t+(i?"_":"")+e.toLowerCase()})),Dh=ds((function(t,e,i){return t+(i?" ":"")+Bh(e)})),Rh=ds((function(t,e,i){return t+(i?" ":"")+e.toUpperCase()})),Bh=cs("toUpperCase"),Lh=Sr((function(t,e){try{return h(t,N,e)}catch(t){return kr(t)?t:new cn(t)}})),Yh=Sr((function(t,e){return l(ri(e,1),(function(e){e=Qs(e),t[e]=Qo(t[e],t)})),t})),Ah=vs(),Wh=vs(!0),Fh=Sr((function(t,e){return function(i){return mi(i,t,e)}})),Hh=Sr((function(t,e){return function(i){return mi(t,i,e)}})),Vh=bs(g),Xh=bs(c),Gh=bs(x),Nh=Ss(),Uh=Ss(!0),Jh=xs((function(t,e){return t+e})),Zh=Ps("ceil"),Kh=xs((function(t,e){return t/e})),$h=Ps("floor"),qh=xs((function(t,e){return t*e})),Qh=Ps("round"),ta=xs((function(t,e){return t-e}));return i.after=function(t,e){if("function"!=typeof e)throw new fn(Z);return t=Hr(t),function(){if(--t<1)return e.apply(this,arguments)}},i.ary=xr,i.assign=ph,i.assignIn=fh,i.assignInWith=gh,i.assignWith=vh,i.at=mh,i.before=br,i.bind=Qo,i.bindAll=Yh,i.bindKey=th,i.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return lh(t)?t:[t]},i.chain=dr,i.chunk=function(t,e,i){e=(i?Gs(t,e,i):e===N)?1:Xn(Hr(e),0);var s=t?t.length:0;if(!s||e<1)return[];for(var r=0,n=0,o=Array(Yn(s/e));r<s;)o[n++]=Yi(t,r,r+=e);return o},i.compact=function(t){for(var e=-1,i=t?t.length:0,s=0,r=[];++e<i;){var n=t[e];n&&(r[s++]=n)}return r},i.concat=function(){for(var t=arguments.length,e=Array(t?t-1:0),i=arguments[0],s=t;s--;)e[s-1]=arguments[s];return t?v(lh(i)?ns(i):[i],ri(e,1)):[]},i.cond=function(t){var e=t?t.length:0,i=zs();return t=e?g(t,(function(t){if("function"!=typeof t[1])throw new fn(Z);return[i(t[0]),t[1]]})):[],Sr((function(i){for(var s=-1;++s<e;){var r=t[s];if(h(r[0],this,i))return h(r[1],this,i)}}))},i.conforms=function(t){return function(t){var e=Zr(t),i=e.length;return function(s){if(null==s)return!i;for(var r=i;r--;){var n=e[r],o=t[n],h=s[n];if(h===N&&!(n in Object(s))||!o(h))return!1}return!0}}(We(t,!0))},i.constant=en,i.countBy=Go,i.create=function(t,e){var i=Fe(t);return e?Le(i,e):i},i.curry=function t(e,i,s){var r=ks(e,et,N,N,N,N,N,i=s?N:i);return r.placeholder=t.placeholder,r},i.curryRight=function t(e,i,s){var r=ks(e,it,N,N,N,N,N,i=s?N:i);return r.placeholder=t.placeholder,r},i.debounce=wr,i.defaults=yh,i.defaultsDeep=xh,i.defer=eh,i.delay=ih,i.difference=To,i.differenceBy=ko,i.differenceWith=Mo,i.drop=ir,i.dropRight=sr,i.dropRightWhile=function(t,e){return t&&t.length?Ui(t,zs(e,3),!0,!0):[]},i.dropWhile=function(t,e){return t&&t.length?Ui(t,zs(e,3),!0):[]},i.fill=function(t,e,i,s){var r=t?t.length:0;return r?(i&&"number"!=typeof i&&Gs(t,e,i)&&(i=0,s=r),function(t,e,i,s){var r=t.length;for((i=Hr(i))<0&&(i=-i>r?0:r+i),(s=s===N||s>r?r:Hr(s))<0&&(s+=r),s=i>s?0:Vr(s);i<s;)t[i++]=e;return t}(t,e,i,s)):[]},i.filter=function(t,e){return(lh(t)?d:ei)(t,zs(e,3))},i.flatMap=function(t,e){return ri(vr(t,e),1)},i.flatMapDeep=function(t,e){return ri(vr(t,e),mt)},i.flatMapDepth=function(t,e,i){return i=i===N?1:Hr(i),ri(vr(t,e),i)},i.flatten=function(t){return t&&t.length?ri(t,1):[]},i.flattenDeep=function(t){return t&&t.length?ri(t,mt):[]},i.flattenDepth=function(t,e){return t&&t.length?ri(t,e=e===N?1:Hr(e)):[]},i.flip=function(t){return ks(t,ht)},i.flow=Ah,i.flowRight=Wh,i.fromPairs=function(t){for(var e=-1,i=t?t.length:0,s={};++e<i;){var r=t[e];s[r[0]]=r[1]}return s},i.functions=function(t){return null==t?[]:ai(t,Zr(t))},i.functionsIn=function(t){return null==t?[]:ai(t,Kr(t))},i.groupBy=Jo,i.initial=function(t){return sr(t,1)},i.intersection=Eo,i.intersectionBy=jo,i.intersectionWith=Io,i.invert=bh,i.invertBy=wh,i.invokeMap=Zo,i.iteratee=rn,i.keyBy=Ko,i.keys=Zr,i.keysIn=Kr,i.map=vr,i.mapKeys=function(t,e){var i={};return e=zs(e,3),ni(t,(function(t,s,r){i[e(t,s,r)]=t})),i},i.mapValues=function(t,e){var i={};return e=zs(e,3),ni(t,(function(t,s,r){i[s]=e(t,s,r)})),i},i.matches=function(t){return _i(We(t,!0))},i.matchesProperty=function(t,e){return Pi(t,We(e,!0))},i.memoize=Cr,i.merge=Sh,i.mergeWith=Oh,i.method=Fh,i.methodOf=Hh,i.mixin=nn,i.negate=function(t){if("function"!=typeof t)throw new fn(Z);return function(){return!t.apply(this,arguments)}},i.nthArg=function(t){return t=Hr(t),Sr((function(e){return ki(e,t)}))},i.omit=_h,i.omitBy=function(t,e){return e=zs(e),ji(t,(function(t,i){return!e(t,i)}))},i.once=function(t){return br(2,t)},i.orderBy=function(t,e,i,s){return null==t?[]:(lh(e)||(e=null==e?[]:[e]),lh(i=s?N:i)||(i=null==i?[]:[i]),Mi(t,e,i))},i.over=Vh,i.overArgs=sh,i.overEvery=Xh,i.overSome=Gh,i.partial=rh,i.partialRight=nh,i.partition=$o,i.pick=Ph,i.pickBy=function(t,e){return null==t?{}:ji(t,zs(e))},i.property=hn,i.propertyOf=function(t){return function(e){return null==t?N:li(t,e)}},i.pull=zo,i.pullAll=ar,i.pullAllBy=function(t,e,i){return t&&t.length&&e&&e.length?zi(t,e,zs(i)):t},i.pullAllWith=function(t,e,i){return t&&t.length&&e&&e.length?zi(t,e,N,i):t},i.pullAt=Do,i.range=Nh,i.rangeRight=Uh,i.rearg=oh,i.reject=function(t,e){var i=lh(t)?d:ei;return e=zs(e,3),i(t,(function(t,i,s){return!e(t,i,s)}))},i.remove=function(t,e){var i=[];if(!t||!t.length)return i;var s=-1,r=[],n=t.length;for(e=zs(e,3);++s<n;){var o=t[s];e(o,s,t)&&(i.push(o),r.push(s))}return Di(t,r),i},i.rest=Sr,i.reverse=lr,i.sampleSize=mr,i.set=function(t,e,i){return null==t?t:Li(t,e,i)},i.setWith=function(t,e,i,s){return s="function"==typeof s?s:N,null==t?t:Li(t,e,i,s)},i.shuffle=function(t){return mr(t,wt)},i.slice=function(t,e,i){var s=t?t.length:0;return s?(i&&"number"!=typeof i&&Gs(t,e,i)?(e=0,i=s):(e=null==e?0:Hr(e),i=i===N?s:Hr(i)),Yi(t,e,i)):[]},i.sortBy=qo,i.sortedUniq=function(t){return t&&t.length?Hi(t):[]},i.sortedUniqBy=function(t,e){return t&&t.length?Hi(t,zs(e)):[]},i.split=function(t,e,i){return i&&"number"!=typeof i&&Gs(t,e,i)&&(e=i=N),(i=i===N?wt:i>>>0)?(t=Nr(t))&&("string"==typeof e||null!=e&&!Br(e))&&""==(e=Xi(e))&&Ne.test(t)?ts(X(t),0,i):Kn.call(t,e,i):[]},i.spread=function(t,e){if("function"!=typeof t)throw new fn(Z);return e=e===N?0:Xn(Hr(e),0),Sr((function(i){var s=i[e],r=ts(i,0,e);return s&&v(r,s),h(t,this,r)}))},i.tail=function(t){return ir(t,1)},i.take=function(t,e,i){return t&&t.length?Yi(t,0,(e=i||e===N?1:Hr(e))<0?0:e):[]},i.takeRight=function(t,e,i){var s=t?t.length:0;return s?Yi(t,(e=s-(e=i||e===N?1:Hr(e)))<0?0:e,s):[]},i.takeRightWhile=function(t,e){return t&&t.length?Ui(t,zs(e,3),!1,!0):[]},i.takeWhile=function(t,e){return t&&t.length?Ui(t,zs(e,3)):[]},i.tap=function(t,e){return e(t),t},i.throttle=function(t,e,i){var s=!0,r=!0;if("function"!=typeof t)throw new fn(Z);return Ir(i)&&(s="leading"in i?!!i.leading:s,r="trailing"in i?!!i.trailing:r),wr(t,e,{leading:s,maxWait:e,trailing:r})},i.thru=pr,i.toArray=Wr,i.toPairs=Th,i.toPairsIn=kh,i.toPath=function(t){return lh(t)?g(t,Qs):Yr(t)?[t]:ns(Po(t))},i.toPlainObject=Gr,i.transform=function(t,e,i){var s=lh(t)||Ar(t);if(e=zs(e,4),null==i)if(s||Ir(t)){var r=t.constructor;i=s?lh(t)?new r:[]:Mr(r)?Fe(Ls(t)):{}}else i={};return(s?l:ni)(t,(function(t,s,r){return e(i,t,s,r)})),i},i.unary=function(t){return xr(t,1)},i.union=Ro,i.unionBy=Bo,i.unionWith=Lo,i.uniq=function(t){return t&&t.length?Gi(t):[]},i.uniqBy=function(t,e){return t&&t.length?Gi(t,zs(e)):[]},i.uniqWith=function(t,e){return t&&t.length?Gi(t,N,e):[]},i.unset=function(t,e){return null==t||function(t,e){t=qs(t,e=Ns(e,t)?[e]:Qi(e));var i=Qs(hr(e));return!(null!=t&&fi(t,i))||delete t[i]}(t,e)},i.unzip=ur,i.unzipWith=cr,i.update=function(t,e,i){return null==t?t:Ni(t,e,qi(i))},i.updateWith=function(t,e,i,s){return s="function"==typeof s?s:N,null==t?t:Ni(t,e,qi(i),s)},i.values=$r,i.valuesIn=function(t){return null==t?[]:M(t,Kr(t))},i.without=Yo,i.words=tn,i.wrap=function(t,e){return rh(e=null==e?sn:e,t)},i.xor=Ao,i.xorBy=Wo,i.xorWith=Fo,i.zip=Ho,i.zipObject=function(t,e){return Ki(t||[],e||[],De)},i.zipObjectDeep=function(t,e){return Ki(t||[],e||[],Li)},i.zipWith=Vo,i.entries=Th,i.entriesIn=kh,i.extend=fh,i.extendWith=gh,nn(i,i),i.add=Jh,i.attempt=Lh,i.camelCase=Mh,i.capitalize=qr,i.ceil=Zh,i.clamp=function(t,e,i){return i===N&&(i=e,e=N),i!==N&&(i=(i=Xr(i))==i?i:0),e!==N&&(e=(e=Xr(e))==e?e:0),Ae(Xr(t),e,i)},i.clone=function(t){return We(t,!1,!0)},i.cloneDeep=function(t){return We(t,!0,!0)},i.cloneDeepWith=function(t,e){return We(t,!0,!0,e)},i.cloneWith=function(t,e){return We(t,!1,!0,e)},i.deburr=Qr,i.divide=Kh,i.endsWith=function(t,e,i){t=Nr(t),e=Xi(e);var s=t.length;return i=i===N?s:Ae(Hr(i),0,s),(i-=e.length)>=0&&t.indexOf(e,i)==i},i.eq=Or,i.escape=function(t){return(t=Nr(t))&&re.test(t)?t.replace(ie,R):t},i.escapeRegExp=function(t){return(t=Nr(t))&&de.test(t)?t.replace(ce,"\\$&"):t},i.every=function(t,e,i){var s=lh(t)?c:Qe;return i&&Gs(t,e,i)&&(e=N),s(t,zs(e,3))},i.find=No,i.findIndex=rr,i.findKey=function(t,e){return b(t,zs(e,3),ni)},i.findLast=Uo,i.findLastIndex=nr,i.findLastKey=function(t,e){return b(t,zs(e,3),hi)},i.floor=$h,i.forEach=fr,i.forEachRight=gr,i.forIn=function(t,e){return null==t?t:mo(t,zs(e,3),Kr)},i.forInRight=function(t,e){return null==t?t:yo(t,zs(e,3),Kr)},i.forOwn=function(t,e){return t&&ni(t,zs(e,3))},i.forOwnRight=function(t,e){return t&&hi(t,zs(e,3))},i.get=Ur,i.gt=hh,i.gte=ah,i.has=function(t,e){return null!=t&&Ws(t,e,fi)},i.hasIn=Jr,i.head=or,i.identity=sn,i.includes=function(t,e,i,s){t=Pr(t)?t:$r(t),i=i&&!s?Hr(i):0;var r=t.length;return i<0&&(i=Xn(r+i,0)),Lr(t)?i<=r&&t.indexOf(e,i)>-1:!!r&&C(t,e,i)>-1},i.indexOf=function(t,e,i){var s=t?t.length:0;if(!s)return-1;var r=null==i?0:Hr(i);return r<0&&(r=Xn(s+r,0)),C(t,e,r)},i.inRange=function(t,e,i){return e=Xr(e)||0,i===N?(i=e,e=0):i=Xr(i)||0,function(t,e,i){return t>=Gn(e,i)&&t<Xn(e,i)}(t=Xr(t),e,i)},i.invoke=Ch,i.isArguments=_r,i.isArray=lh,i.isArrayBuffer=function(t){return zr(t)&&On.call(t)==Ft},i.isArrayLike=Pr,i.isArrayLikeObject=Tr,i.isBoolean=function(t){return!0===t||!1===t||zr(t)&&On.call(t)==Pt},i.isBuffer=uh,i.isDate=function(t){return zr(t)&&On.call(t)==Tt},i.isElement=function(t){return!!t&&1===t.nodeType&&zr(t)&&!Rr(t)},i.isEmpty=function(t){if(Pr(t)&&(lh(t)||Lr(t)||Mr(t.splice)||_r(t)||uh(t)))return!t.length;if(zr(t)){var e=As(t);if(e==jt||e==Bt)return!t.size}for(var i in t)if(wn.call(t,i))return!1;return!(ro&&Zr(t).length)},i.isEqual=function(t,e){return yi(t,e)},i.isEqualWith=function(t,e,i){var s=(i="function"==typeof i?i:N)?i(t,e):N;return s===N?yi(t,e,i):!!s},i.isError=kr,i.isFinite=function(t){return"number"==typeof t&&Fn(t)},i.isFunction=Mr,i.isInteger=Er,i.isLength=jr,i.isMap=function(t){return zr(t)&&As(t)==jt},i.isMatch=function(t,e){return t===e||xi(t,e,Rs(e))},i.isMatchWith=function(t,e,i){return i="function"==typeof i?i:N,xi(t,e,Rs(e),i)},i.isNaN=function(t){return Dr(t)&&t!=+t},i.isNative=function(t){if(Oo(t))throw new cn("This method is not supported with `core-js`. Try https://github.com/es-shims.");return bi(t)},i.isNil=function(t){return null==t},i.isNull=function(t){return null===t},i.isNumber=Dr,i.isObject=Ir,i.isObjectLike=zr,i.isPlainObject=Rr,i.isRegExp=Br,i.isSafeInteger=function(t){return Er(t)&&t>=-yt&&t<=yt},i.isSet=function(t){return zr(t)&&As(t)==Bt},i.isString=Lr,i.isSymbol=Yr,i.isTypedArray=Ar,i.isUndefined=function(t){return t===N},i.isWeakMap=function(t){return zr(t)&&As(t)==At},i.isWeakSet=function(t){return zr(t)&&On.call(t)==Wt},i.join=function(t,e){return t?Hn.call(t,e):""},i.kebabCase=Eh,i.last=hr,i.lastIndexOf=function(t,e,i){var s=t?t.length:0;if(!s)return-1;var r=s;if(i!==N&&(r=((r=Hr(i))<0?Xn(s+r,0):Gn(r,s-1))+1),e!=e)return L(t,r-1,!0);for(;r--;)if(t[r]===e)return r;return-1},i.lowerCase=jh,i.lowerFirst=Ih,i.lt=ch,i.lte=dh,i.max=function(t){return t&&t.length?ti(t,sn,pi):N},i.maxBy=function(t,e){return t&&t.length?ti(t,zs(e),pi):N},i.mean=function(t){return O(t,sn)},i.meanBy=function(t,e){return O(t,zs(e))},i.min=function(t){return t&&t.length?ti(t,sn,Si):N},i.minBy=function(t,e){return t&&t.length?ti(t,zs(e),Si):N},i.stubArray=an,i.stubFalse=ln,i.stubObject=function(){return{}},i.stubString=function(){return""},i.stubTrue=function(){return!0},i.multiply=qh,i.nth=function(t,e){return t&&t.length?ki(t,Hr(e)):N},i.noConflict=function(){return ui._===this&&(ui._=_n),this},i.noop=on,i.now=yr,i.pad=function(t,e,i){t=Nr(t);var s=(e=Hr(e))?V(t):0;if(!e||s>=e)return t;var r=(e-s)/2;return ws(An(r),i)+t+ws(Yn(r),i)},i.padEnd=function(t,e,i){t=Nr(t);var s=(e=Hr(e))?V(t):0;return e&&s<e?t+ws(e-s,i):t},i.padStart=function(t,e,i){t=Nr(t);var s=(e=Hr(e))?V(t):0;return e&&s<e?ws(e-s,i)+t:t},i.parseInt=function(t,e,i){return i||null==e?e=0:e&&(e=+e),t=Nr(t).replace(pe,""),Nn(t,e||(be.test(t)?16:10))},i.random=function(t,e,i){if(i&&"boolean"!=typeof i&&Gs(t,e,i)&&(e=i=N),i===N&&("boolean"==typeof e?(i=e,e=N):"boolean"==typeof t&&(i=t,t=N)),t===N&&e===N?(t=0,e=1):(t=Xr(t)||0,e===N?(e=t,t=0):e=Xr(e)||0),t>e){var s=t;t=e,e=s}if(i||t%1||e%1){var r=Un();return Gn(t+r*(e-t+ii("1e-"+((r+"").length-1))),e)}return Ri(t,e)},i.reduce=function(t,e,i){var s=lh(t)?m:_,r=arguments.length<3;return s(t,zs(e,4),i,r,go)},i.reduceRight=function(t,e,i){var s=lh(t)?y:_,r=arguments.length<3;return s(t,zs(e,4),i,r,vo)},i.repeat=function(t,e,i){return e=(i?Gs(t,e,i):e===N)?1:Hr(e),Bi(Nr(t),e)},i.replace=function(){var t=arguments,e=Nr(t[0]);return t.length<3?e:Jn.call(e,t[1],t[2])},i.result=function(t,e,i){var s=-1,r=(e=Ns(e,t)?[e]:Qi(e)).length;for(r||(t=N,r=1);++s<r;){var n=null==t?N:t[Qs(e[s])];n===N&&(s=r,n=i),t=Mr(n)?n.call(t):n}return t},i.round=Qh,i.runInContext=t,i.sample=function(t){var e=Pr(t)?t:$r(t),i=e.length;return i>0?e[Ri(0,i-1)]:N},i.size=function(t){if(null==t)return 0;if(Pr(t)){var e=t.length;return e&&Lr(t)?V(t):e}if(zr(t)){var i=As(t);if(i==jt||i==Bt)return t.size}return Zr(t).length},i.snakeCase=zh,i.some=function(t,e,i){var s=lh(t)?x:Ai;return i&&Gs(t,e,i)&&(e=N),s(t,zs(e,3))},i.sortedIndex=function(t,e){return Wi(t,e)},i.sortedIndexBy=function(t,e,i){return Fi(t,e,zs(i))},i.sortedIndexOf=function(t,e){var i=t?t.length:0;if(i){var s=Wi(t,e);if(s<i&&Or(t[s],e))return s}return-1},i.sortedLastIndex=function(t,e){return Wi(t,e,!0)},i.sortedLastIndexBy=function(t,e,i){return Fi(t,e,zs(i),!0)},i.sortedLastIndexOf=function(t,e){if(t&&t.length){var i=Wi(t,e,!0)-1;if(Or(t[i],e))return i}return-1},i.startCase=Dh,i.startsWith=function(t,e,i){return t=Nr(t),i=Ae(Hr(i),0,t.length),t.lastIndexOf(Xi(e),i)==i},i.subtract=ta,i.sum=function(t){return t&&t.length?P(t,sn):0},i.sumBy=function(t,e){return t&&t.length?P(t,zs(e)):0},i.template=function(t,e,s){var r=i.templateSettings;s&&Gs(t,e,s)&&(e=N),t=Nr(t),e=gh({},e,r,Ie);var n,o,h=gh({},e.imports,r.imports,Ie),a=Zr(h),l=M(h,a),u=0,c=e.interpolate||Te,d="__p += '",p=pn((e.escape||Te).source+"|"+c.source+"|"+(c===he?ye:Te).source+"|"+(e.evaluate||Te).source+"|$","g"),f="//# sourceURL="+("sourceURL"in e?e.sourceURL:"lodash.templateSources["+ ++Ze+"]")+"\n";t.replace(p,(function(e,i,s,r,h,a){return s||(s=r),d+=t.slice(u,a).replace(ke,B),i&&(n=!0,d+="' +\n__e("+i+") +\n'"),h&&(o=!0,d+="';\n"+h+";\n__p += '"),s&&(d+="' +\n((__t = ("+s+")) == null ? '' : __t) +\n'"),u=a+e.length,e})),d+="';\n";var g=e.variable;g||(d="with (obj) {\n"+d+"\n}\n"),d=(o?d.replace(qt,""):d).replace(Qt,"$1").replace(te,"$1;"),d="function("+(g||"obj")+") {\n"+(g?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(n?", __e = _.escape":"")+(o?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+d+"return __p\n}";var v=Lh((function(){return Function(a,f+"return "+d).apply(N,l)}));if(v.source=d,kr(v))throw v;return v},i.times=function(t,e){if((t=Hr(t))<1||t>yt)return[];var i=wt,s=Gn(t,wt);e=zs(e),t-=wt;for(var r=T(s,e);++i<t;)e(i);return r},i.toFinite=Fr,i.toInteger=Hr,i.toLength=Vr,i.toLower=function(t){return Nr(t).toLowerCase()},i.toNumber=Xr,i.toSafeInteger=function(t){return Ae(Hr(t),-yt,yt)},i.toString=Nr,i.toUpper=function(t){return Nr(t).toUpperCase()},i.trim=function(t,e,i){if((t=Nr(t))&&(i||e===N))return t.replace(pe,"");if(!t||!(e=Xi(e)))return t;var s=X(t),r=X(e);return ts(s,j(s,r),I(s,r)+1).join("")},i.trimEnd=function(t,e,i){if((t=Nr(t))&&(i||e===N))return t.replace(ge,"");if(!t||!(e=Xi(e)))return t;var s=X(t);return ts(s,0,I(s,X(e))+1).join("")},i.trimStart=function(t,e,i){if((t=Nr(t))&&(i||e===N))return t.replace(fe,"");if(!t||!(e=Xi(e)))return t;var s=X(t);return ts(s,j(s,X(e))).join("")},i.truncate=function(t,e){var i=ut,s=ct;if(Ir(e)){var r="separator"in e?e.separator:r;i="length"in e?Hr(e.length):i,s="omission"in e?Xi(e.omission):s}var n=(t=Nr(t)).length;if(Ne.test(t)){var o=X(t);n=o.length}if(i>=n)return t;var h=i-V(s);if(h<1)return s;var a=o?ts(o,0,h).join(""):t.slice(0,h);if(r===N)return a+s;if(o&&(h+=a.length-h),Br(r)){if(t.slice(h).search(r)){var l,u=a;for(r.global||(r=pn(r.source,Nr(xe.exec(r))+"g")),r.lastIndex=0;l=r.exec(u);)var c=l.index;a=a.slice(0,c===N?h:c)}}else if(t.indexOf(Xi(r),h)!=h){var d=a.lastIndexOf(r);d>-1&&(a=a.slice(0,d))}return a+s},i.unescape=function(t){return(t=Nr(t))&&se.test(t)?t.replace(ee,G):t},i.uniqueId=function(t){var e=++Cn;return Nr(t)+e},i.upperCase=Rh,i.upperFirst=Bh,i.each=fr,i.eachRight=gr,i.first=or,nn(i,function(){var t={};return ni(i,(function(e,s){wn.call(i.prototype,s)||(t[s]=e)})),t}(),{chain:!1}),i.VERSION=U,l(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){i[t].placeholder=i})),l(["drop","take"],(function(t,e){n.prototype[t]=function(i){var s=this.__filtered__;if(s&&!e)return new n(this);i=i===N?1:Xn(Hr(i),0);var r=this.clone();return s?r.__takeCount__=Gn(i,r.__takeCount__):r.__views__.push({size:Gn(i,wt),type:t+(r.__dir__<0?"Right":"")}),r},n.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}})),l(["filter","map","takeWhile"],(function(t,e){var i=e+1,s=i==ft||i==vt;n.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:zs(t,3),type:i}),e.__filtered__=e.__filtered__||s,e}})),l(["head","last"],(function(t,e){var i="take"+(e?"Right":"");n.prototype[t]=function(){return this[i](1).value()[0]}})),l(["initial","tail"],(function(t,e){var i="drop"+(e?"":"Right");n.prototype[t]=function(){return this.__filtered__?new n(this):this[i](1)}})),n.prototype.compact=function(){return this.filter(sn)},n.prototype.find=function(t){return this.filter(t).head()},n.prototype.findLast=function(t){return this.reverse().find(t)},n.prototype.invokeMap=Sr((function(t,e){return"function"==typeof t?new n(this):this.map((function(i){return mi(i,t,e)}))})),n.prototype.reject=function(t){return t=zs(t,3),this.filter((function(e){return!t(e)}))},n.prototype.slice=function(t,e){t=Hr(t);var i=this;return i.__filtered__&&(t>0||e<0)?new n(i):(t<0?i=i.takeRight(-t):t&&(i=i.drop(t)),e!==N&&(i=(e=Hr(e))<0?i.dropRight(-e):i.take(e-t)),i)},n.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},n.prototype.toArray=function(){return this.take(wt)},ni(n.prototype,(function(t,e){var s=/^(?:filter|find|map|reject)|While$/.test(e),o=/^(?:head|last)$/.test(e),h=i[o?"take"+("last"==e?"Right":""):e],a=o||/^find/.test(e);h&&(i.prototype[e]=function(){var e=this.__wrapped__,l=o?[1]:arguments,u=e instanceof n,c=l[0],d=u||lh(e),p=function(t){var e=h.apply(i,v([t],l));return o&&f?e[0]:e};d&&s&&"function"==typeof c&&1!=c.length&&(u=d=!1);var f=this.__chain__,g=!!this.__actions__.length,m=a&&!f,y=u&&!g;if(!a&&d){e=y?e:new n(this);var x=t.apply(e,l);return x.__actions__.push({func:pr,args:[p],thisArg:N}),new r(x,f)}return m&&y?t.apply(this,l):(x=this.thru(p),m?o?x.value()[0]:x.value():x)})})),l(["pop","push","shift","sort","splice","unshift"],(function(t){var e=gn[t],s=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);i.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var i=this.value();return e.apply(lh(i)?i:[],t)}return this[s]((function(i){return e.apply(lh(i)?i:[],t)}))}})),ni(n.prototype,(function(t,e){var s=i[e];if(s){var r=s.name+"";(no[r]||(no[r]=[])).push({name:e,func:s})}})),no[ms(N,Q).name]=[{name:"wrapper",func:N}],n.prototype.clone=function(){var t=new n(this.__wrapped__);return t.__actions__=ns(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=ns(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=ns(this.__views__),t},n.prototype.reverse=function(){if(this.__filtered__){var t=new n(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},n.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,i=lh(t),s=e<0,r=i?t.length:0,n=function(t,e,i){for(var s=-1,r=i.length;++s<r;){var n=i[s],o=n.size;switch(n.type){case"drop":t+=o;break;case"dropRight":e-=o;break;case"take":e=Gn(e,t+o);break;case"takeRight":t=Xn(t,e-o)}}return{start:t,end:e}}(0,r,this.__views__),o=n.start,h=n.end,a=h-o,l=s?h:o-1,u=this.__iteratees__,c=u.length,d=0,p=Gn(a,this.__takeCount__);if(!i||r<J||r==a&&p==a)return Ji(t,this.__actions__);var f=[];t:for(;a--&&d<p;){for(var g=-1,v=t[l+=e];++g<c;){var m=u[g],y=m.iteratee,x=m.type,b=y(v);if(x==gt)v=b;else if(!b){if(x==ft)continue t;break t}}f[d++]=v}return f},i.prototype.at=Xo,i.prototype.chain=function(){return dr(this)},i.prototype.commit=function(){return new r(this.value(),this.__chain__)},i.prototype.next=function(){this.__values__===N&&(this.__values__=Wr(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?N:this.__values__[this.__index__++]}},i.prototype.plant=function(t){for(var e,i=this;i instanceof s;){var r=er(i);r.__index__=0,r.__values__=N,e?n.__wrapped__=r:e=r;var n=r;i=i.__wrapped__}return n.__wrapped__=t,e},i.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof n){var e=t;return this.__actions__.length&&(e=new n(this)),(e=e.reverse()).__actions__.push({func:pr,args:[lr],thisArg:N}),new r(e,this.__chain__)}return this.thru(lr)},i.prototype.toJSON=i.prototype.valueOf=i.prototype.value=function(){return Ji(this.__wrapped__,this.__actions__)},zn&&(i.prototype[zn]=function(){return this}),i}();(ai||{})._=ci,(r=function(){return ci}.call(e,i,e,t))!==N&&(t.exports=r)}).call(this)}).call(e,i(4)(t),i(3))},function(t,e){var i;i=function(){return this}();try{i=i||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(i=window)}t.exports=i},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}}])},function(t,e,i){"use strict";(function(t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i=function(e){if(!t||!t.env||!t.env.KOJI_SECRETS)return null;try{var i=JSON.parse(t.env.KOJI_SECRETS);return i[e]||console.warn('[@withkoji/vcc] Unable to resolve decrypted value for "'.concat(e,'". Secret is not present in environment.')),i[e]||null}catch(t){console.warn("[@withkoji/vcc] No KOJI_SECRETS environment variable detected. Try closing this terminal window and opening a new tab.")}return null};e.default=i}).call(this,i(10))},function(t,e){var i,s,r=t.exports={};function n(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function h(t){if(i===setTimeout)return setTimeout(t,0);if((i===n||!i)&&setTimeout)return i=setTimeout,setTimeout(t,0);try{return i(t,0)}catch(e){try{return i.call(null,t,0)}catch(e){return i.call(this,t,0)}}}!function(){try{i="function"==typeof setTimeout?setTimeout:n}catch(t){i=n}try{s="function"==typeof clearTimeout?clearTimeout:o}catch(t){s=o}}();var a,l=[],u=!1,c=-1;function d(){u&&a&&(u=!1,a.length?l=a.concat(l):c=-1,l.length&&p())}function p(){if(!u){var t=h(d);u=!0;for(var e=l.length;e;){for(a=l,l=[];++c<e;)a&&a[c].run();c=-1,e=l.length}a=null,u=!1,function(t){if(s===clearTimeout)return clearTimeout(t);if((s===o||!s)&&clearTimeout)return s=clearTimeout,clearTimeout(t);try{s(t)}catch(e){try{return s.call(null,t)}catch(e){return s.call(this,t)}}}(t)}}function f(t,e){this.fun=t,this.array=e}function g(){}r.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var i=1;i<arguments.length;i++)e[i-1]=arguments[i];l.push(new f(t,e)),1!==l.length||u||h(p)},f.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=g,r.addListener=g,r.once=g,r.off=g,r.removeListener=g,r.removeAllListeners=g,r.emit=g,r.prependListener=g,r.prependOnceListener=g,r.listeners=function(t){return[]},r.binding=function(t){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(t){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(t){t.exports=JSON.parse('{"assets":{"gamepaused":"https://images.koji-cdn.com/f852518e-69be-4b7d-9c6d-c224dfe35cd0/i0eh8-gamepaused.png","tileset":"https://images.koji-cdn.com/f852518e-69be-4b7d-9c6d-c224dfe35cd0/pbnvu-tiles.png","mapArray":["https://objects.koji-cdn.com/f852518e-69be-4b7d-9c6d-c224dfe35cd0/p1bsc-map0.json","https://objects.koji-cdn.com/f852518e-69be-4b7d-9c6d-c224dfe35cd0/3z8gv-map1.json","https://objects.koji-cdn.com/f852518e-69be-4b7d-9c6d-c224dfe35cd0/5e3by-map2.json","https://objects.koji-cdn.com/f852518e-69be-4b7d-9c6d-c224dfe35cd0/d5ysu-map3.json","https://objects.koji-cdn.com/f852518e-69be-4b7d-9c6d-c224dfe35cd0/ejayr-map4.json","https://objects.koji-cdn.com/f852518e-69be-4b7d-9c6d-c224dfe35cd0/9j5wy-map5.json","https://objects.koji-cdn.com/f852518e-69be-4b7d-9c6d-c224dfe35cd0/vszy1-map6.json","https://objects.koji-cdn.com/f852518e-69be-4b7d-9c6d-c224dfe35cd0/r5ugk-map7.json","https://objects.koji-cdn.com/f852518e-69be-4b7d-9c6d-c224dfe35cd0/ifavq-map8.json","https://objects.koji-cdn.com/f852518e-69be-4b7d-9c6d-c224dfe35cd0/bev8g-map9.json","https://objects.koji-cdn.com/f852518e-69be-4b7d-9c6d-c224dfe35cd0/q225a-map10.json","https://objects.koji-cdn.com/f852518e-69be-4b7d-9c6d-c224dfe35cd0/eyw15-map11.json","https://objects.koji-cdn.com/f852518e-69be-4b7d-9c6d-c224dfe35cd0/np2s7-map12.json","https://objects.koji-cdn.com/f852518e-69be-4b7d-9c6d-c224dfe35cd0/tvmjg-map13.json","https://objects.koji-cdn.com/f852518e-69be-4b7d-9c6d-c224dfe35cd0/kalh6-map14.json","https://objects.koji-cdn.com/f852518e-69be-4b7d-9c6d-c224dfe35cd0/f6gnm-map15.json"]},"@@editor":[{"key":"assets","name":"Assets","icon":"💾","source":"assets.json","fields":[{"key":"gamepaused","name":"Game paused image","description":"img to be shown when paused","type":"image"},{"key":"tileset","name":"Tile Set","description":"set of tiles to render to texturize the map","type":"image"},{"key":"mapArray","name":"Tilemap array","description":"Contains all the Tilemaps","type":"file[]"}]},{"key":"settings","name":"App settings","icon":"⚙️","source":"settings.json","fields":[{"key":"playerImg","name":"Player Sprite","description":"The sprite you\'ll see as the player.","type":"image"},{"key":"playerImgSize","name":"PLayer Image size","description":"If you change the sprite for the player, you also need to specify it\'s size here.","type":"range","typeOptions":{"min":8,"max":32,"step":1}},{"key":"countdown","name":"Countdown ?","description":"to Countdown or not to countdown?","type":"boolean"},{"key":"time","name":"Timer","description":"How long do you want to wait before loosing?","type":"range","typeOptions":{"min":30,"max":240,"step":30}},{"key":"backgroundColor","name":"Background Color","description":"I like pink, how bout you?","type":"color"},{"key":"textColor","name":"countdown text color","type":"text"},{"key":"menuIcon","name":"Start menu button icon","description":"The icon you see before the game starts","type":"image"},{"key":"retryIcon","name":"Game over retry button icon","description":"The icon you see when you loose","type":"image"}]}],"settings":{"playerImg":"https://images.koji-cdn.com/f852518e-69be-4b7d-9c6d-c224dfe35cd0/rhp2y-player.png","countdown":true,"time":120,"backgroundColor":"#d76b6b","playerImgSize":20,"menuIcon":"https://images.koji-cdn.com/f852518e-69be-4b7d-9c6d-c224dfe35cd0/s51bz-playIcon.png","retryIcon":"https://images.koji-cdn.com/f852518e-69be-4b7d-9c6d-c224dfe35cd0/nvuhq-retryIcon.png","textColor":"#000"},"deploy":{"frontend":{"output":"frontend/dist","type":"static","commands":["cd ./frontend/","npm install","export NODE_ENV=production && npm run build"]}},"develop":{"frontend":{"path":"./frontend","port":8080,"events":{"started":"[webpack] Frontend server started","building":"[webpack] Frontend building","built":"Compiled successfully.","build-error":"[webpack] Frontend build error"},"startCommand":"npm start"}},"serviceMap":{"remy":"https://remy-88450dd4-49ae-47a2-b1a0-24eb5dafb986.koji-staging.com","frontend":"https://8080-dbe1346a-c627-4136-a6b5-f899fe796823.koji-staging.com"},"metadata":{"projectId":"f852518e-69be-4b7d-9c6d-c224dfe35cd0"}}')},function(t,e){
/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2019 Photon Storm Ltd.
 * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
 */
var i=Phaser.Renderer.WebGL.Utils;t.exports=function(t,e,s,r,n,o){for(var h=i.getTintAppendFloatAlphaAndSwap(s.fillColor,s.fillAlpha*r),a=s.pathData,l=s.pathIndexes,u=0;u<l.length;u+=3){var c=2*l[u],d=2*l[u+1],p=2*l[u+2],f=a[c+0]-n,g=a[c+1]-o,v=a[d+0]-n,m=a[d+1]-o,y=a[p+0]-n,x=a[p+1]-o,b=e.getX(f,g),w=e.getY(f,g),C=e.getX(v,m),S=e.getY(v,m),O=e.getX(y,x),_=e.getY(y,x);t.setTexture2D(),t.batchTri(b,w,C,S,O,_,0,0,1,1,h,h,h,t.tintEffect)}}},function(t,e){
/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2019 Photon Storm Ltd.
 * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
 */
var i=Phaser.Renderer.WebGL.Utils;t.exports=function(t,e,s,r,n){var o=t.strokeTint,h=i.getTintAppendFloatAlphaAndSwap(e.strokeColor,e.strokeAlpha*s);o.TL=h,o.TR=h,o.BL=h,o.BR=h;var a=e.pathData,l=a.length-1,u=e.lineWidth,c=u/2,d=a[0]-r,p=a[1]-n;e.closePath||(l-=2);for(var f=2;f<l;f+=2){var g=a[f]-r,v=a[f+1]-n;t.setTexture2D(),t.batchLine(d,p,g,v,c,c,u,f-2,!!e.closePath&&f===l-1),d=g,p=v}}},function(t,e){t.exports=function(t,e,i,s){var r=i||e.fillColor,n=s||e.fillAlpha,o=(16711680&r)>>>16,h=(65280&r)>>>8,a=255&r;t.fillStyle="rgba("+o+","+h+","+a+","+n+")"}},function(t,e){t.exports=function(t,e,i,s){var r=i||e.strokeColor,n=s||e.strokeAlpha,o=(16711680&r)>>>16,h=(65280&r)>>>8,a=255&r;t.strokeStyle="rgba("+o+","+h+","+a+","+n+")",t.lineWidth=e.lineWidth}},function(t,e,i){"use strict";i.r(e);var s=i(1),r=i.n(s);class n{constructor(t){this.scene=t}static register(t,e){n.prototype[t]=e}}var o=n,h={setEventEmitter(t,e){return void 0===e&&(e=Phaser.Events.EventEmitter),this._privateEE=void 0===t,this._eventEmitter=this._privateEE?new e:t,this},destroyEventEmitter(){this._eventEmitter&&this._privateEE&&this._eventEmitter.shutdown()},getEventEmitter(){return this._eventEmitter},on:function(){return this._eventEmitter&&this._eventEmitter.on.apply(this._eventEmitter,arguments),this},once:function(){return this._eventEmitter&&this._eventEmitter.once.apply(this._eventEmitter,arguments),this},off:function(){return this._eventEmitter&&this._eventEmitter.off.apply(this._eventEmitter,arguments),this},emit:function(){return this._eventEmitter&&this._eventEmitter.emit.apply(this._eventEmitter,arguments),this},addListener:function(){return this._eventEmitter&&this._eventEmitter.addListener.apply(this._eventEmitter,arguments),this},removeListener:function(){return this._eventEmitter&&this._eventEmitter.removeListener.apply(this._eventEmitter,arguments),this},removeAllListeners:function(){return this._eventEmitter&&this._eventEmitter.removeAllListeners.apply(this._eventEmitter,arguments),this},listenerCount:function(){return this._eventEmitter?this._eventEmitter.listenerCount.apply(this._eventEmitter,arguments):0},listeners:function(){return this._eventEmitter?this._eventEmitter.listeners.apply(this._eventEmitter,arguments):[]}};const a=Phaser.Utils.Objects.GetValue;class l{constructor(t,e){this.parent=t,this._isRunning=!1,this.tickingState=!1,this.setEventEmitter(a(e,"eventEmitter",void 0)),this.setTickingMode(a(e,"tickingMode",1))}boot(){2!==this.tickingMode||this.tickingState||this.startTicking()}shutdown(){this.destroyEventEmitter(),this.tickingState&&this.stopTicking()}setTickingMode(t){"string"==typeof t&&(t=u[t]),this.tickingMode=t}startTicking(){this.tickingState=!0}stopTicking(){this.tickingState=!1}get isRunning(){return this._isRunning}set isRunning(t){this._isRunning!==t&&(this._isRunning=t,1===this.tickingMode&&t!=this.tickingState&&(t?this.startTicking():this.stopTicking()))}start(){return this.isRunning=!0,this}pause(){return this.isRunning=!1,this}resume(){return this.isRunning=!0,this}stop(){return this.isRunning=!1,this}complete(){this.isRunning=!1,this.emit("complete",this.parent,this)}}Object.assign(l.prototype,h);const u={no:0,lazy:1,always:2};var c=l;const d=Phaser.Scene;var p=function(t){return t instanceof d},f=function(t){return p(t)?t:t.scene&&p(t.scene)?t.scene:t.parent&&t.parent.scene&&p(t.parent.scene)?t.parent.scene:void 0};const g=Phaser.Utils.Objects.GetValue;const v=0,m=1,b="IDLE";var w=class extends c{constructor(t,e){var i=f(t);i===t&&(t=void 0),super(i,e),this.scene=i,this.gameObject=t,t&&t.setInteractive(g(e,"inputConfig",void 0)),this.resetFromJSON(e),this.boot()}resetFromJSON(t){return this.setEnable(g(t,"enable",!0)),void 0===this.gameObject?this.bounds=g(t,"bounds",void 0):this.bounds=void 0,this.tracerState=v,this.pointer=void 0,this.lastPointer=void 0,this.movedState=!1,this.isTouchingAnyObject=!1,this}boot(){super.boot(),this.gameObject?this.gameObject.on("pointerdown",this.onPointerDown,this):this.scene.input.on("pointerdown",this.onPointerDown,this),this.scene.input.on("pointerup",this.onPointerUp,this),this.scene.input.on("pointermove",this.onPointerMove,this),this.scene.events.once("shutdown",this.destroy,this)}shutdown(){this.gameObject?this.gameObject.off("pointerdown",this.onPointerDown,this):this.scene&&this.scene.input.off("pointerdown",this.onPointerDown,this),this.scene&&(this.scene.input.off("pointerup",this.onPointerUp,this),this.scene.input.off("pointermove",this.onPointerMove,this),this.scene.events.off("destroy",this.destroy,this),this.scene=void 0),this.scene=void 0,this.gameObject=void 0,this.bounds=void 0,this.pointer=void 0,this.lastPointer=void 0,this.movedState=!1,super.shutdown()}destroy(){this.shutdown()}setEnable(t){return void 0===t&&(t=!0),this.enable===t?this:(t||this.dragCancel(),this.enable=t,this)}onPointerDown(t,e){this.enable&&(void 0===this.pointer&&(!this.bounds||this.bounds.contains(t.x,t.y))&&this.pointer!==t&&(this.pointer=t,this.lastPointer=t,this.movedState=!1,this.tracerState=m,void 0===this.gameObject&&(this.isTouchingAnyObject=e.length>0),this.onDragStart()))}onPointerUp(t){this.enable&&((!this.bounds||this.bounds.contains(t.x,t.y))&&this.pointer===t&&(this.pointer=void 0,this.movedState=!1,this.tracerState=v,this.onDragEnd()))}onPointerMove(t){if(this.enable&&t.isDown){var e=!this.bounds||this.bounds.contains(t.x,t.y),i=this.pointer===t;!i&&e||(i&&!e?this.onPointerUp(t):(this.movedState||(this.movedState=t.x!==t.downX||t.y!==t.downY),this.movedState&&this.onDrag()))}}dragCancel(){return this.tracerState===m&&this.onDragEnd(),this.pointer=void 0,this.tracerState=v,this}onDragStart(){this.emit("dragstart",this)}onDragEnd(){this.emit("dragend",this)}onDrag(){this.emit("drag",this)}preUpdate(t,e){}postUpdate(t,e){}startTicking(){super.startTicking(),this.scene.events.on("preupdate",this.preUpdate,this),this.scene.events.on("postupdate",this.postUpdate,this)}stopTicking(){super.stopTicking(),this.scene&&(this.scene.events.off("preupdate",this.preUpdate,this),this.scene.events.off("postupdate",this.postUpdate,this))}setRecongizedStateObject(t){return this.recongizedState=t,this}get state(){return this.recongizedState.state}set state(t){this.recongizedState.state=t}cancel(){return this.state=b,this}},C=i(0),S=i.n(C);class O{constructor(t){var e=S()(t,"states",void 0);e&&this.addStates(e);var i=S()(t,"extend",void 0);if(i)for(var s in i)this.hasOwnProperty(s)&&void 0!==this[s]||(this[s]=i[s]);var r=S()(t,"eventEmitter",void 0),n=S()(t,"EventEmitterClass",void 0);this.setEventEmitter(r,n),this._stateLock=!1,this.resetFromJSON(t)}shutdown(){this.destroyEventEmitter()}destroy(){this.shutdown()}resetFromJSON(t){this.setEnable(S()(t,"enable",!0)),this.start(S()(t,"start",void 0));var e=S()(t,"init",void 0);return e&&e.call(this),this}toJSON(){return{curState:this.state,prevState:this.prevState,enable:this.enable,start:this._start}}setEnable(t){return void 0===t&&(t=!0),this.enable=t,this}set state(t){if(this.enable&&!this._stateLock&&this._state!==t){if(this._prevState=this._state,this._state=t,this._stateLock=!0,this.emit("statechange",this),null!=this._prevState){var e="exit_"+this._prevState,i=this[e];i&&i.call(this),this.emit(e,this)}if(this._stateLock=!1,null!=this._state){var s="enter_"+this._state,r=this[s];r&&r.call(this),this.emit(s,this)}}}get state(){return this._state}get prevState(){return this._prevState}start(t){return this._start=t,this._prevState=void 0,this._state=t,this}goto(t){return null!=t&&(this.state=t),this}next(){var t,e=this["next_"+this.state];return e&&(t="string"==typeof e?e:e.call(this)),this.goto(t),this}addState(t,e){var i=S()(e,"next",void 0);i&&(this["next_"+t]=i);var s=S()(e,"exit",void 0);s&&(this["exit_"+t]=s);var r=S()(e,"enter",void 0);return r&&(this["enter_"+t]=r),this}addStates(t){for(var e in t)this.addState(e,t[e]);return this}update(t,e,i){void 0===i&&(i="update");var s=this[i+"_"+this.state];s&&s.call(this,t,e)}preupdate(t,e){this.update(t,e,"preupdate")}postupdate(t,e){this.update(t,e,"postupdate")}}Object.assign(O.prototype,h);var _=O;const P=Phaser.Utils.Objects.GetValue,T=Phaser.Math.Distance.Between;const k="IDLE",M="BEGIN",E="RECOGNIZED";var j=class extends w{constructor(t,e){super(t,e);var i=this,s={states:{IDLE:{enter:function(){i.stop(),i.tapsCount=0,i.x=0,i.y=0,i.worldX=0,i.worldY=0},exit:function(){var t=i.lastPointer;i.x=t.x,i.y=t.y,i.worldX=t.worldX,i.worldY=t.worldY}},BEGIN:{enter:function(){i.start(),i.tapsCount=0,i.emit("tappingstart",i,i.gameObject,i.lastPointer)}},RECOGNIZED:{enter:function(){i.start(),i.emit("tap",i,i.gameObject,i.lastPointer),i.emit(`${i.tapsCount}tap`,i,i.gameObject,i.lastPointer)}}},init:function(){this.state=k},eventEmitter:!1};this.setRecongizedStateObject(new _(s))}resetFromJSON(t){super.resetFromJSON(t),this.setMaxHoldTime(P(t,"time",250)),this.setTapInterval(P(t,"tapInterval",200)),this.setDragThreshold(P(t,"threshold",9)),this.setTapOffset(P(t,"tapOffset",10));var e=P(t,"taps",void 0);return void 0!==e?this.setTaps(e):(this.setMaxTaps(P(t,"maxTaps",void 0)),this.setMinTaps(P(t,"minTaps",void 0))),this}onDragStart(){switch(this.state){case k:this.state=M;break;case M:var t=this.lastPointer;T(t.upX,t.upY,t.x,t.y)>this.tapOffset&&(this.state=E,this.state=M);break;case E:this.state=M}}onDragEnd(){this.state===M&&(this.tapsCount++,this.emit("tapping",this,this.gameObject,this.lastPointer),void 0!==this.maxTaps&&this.tapsCount===this.maxTaps&&(this.state=E))}onDrag(){this.state!==k&&this.pointer.getDistance()>this.dragThreshold&&(this.state=k)}preUpdate(t,e){if(this.state===M){var i=this.lastPointer;if(i.isDown)t-i.downTime>this.holdTime&&(this.state=k);else t-i.upTime>this.tapInterval&&(void 0===this.minTaps||this.tapsCount>=this.minTaps?this.state=E:this.state=k)}}postUpdate(t,e){this.state===E&&(this.state=k)}get isTapped(){return this.state===E}setMaxHoldTime(t){return this.holdTime=t,this}setTapInterval(t){return this.tapInterval=t,this}setDragThreshold(t){return this.dragThreshold=t,this}setTapOffset(t){return this.tapOffset=t,this}setMaxTaps(t){return this.maxTaps=t,this}setMinTaps(t){return this.minTaps=t,this}setTaps(t,e){return void 0===e&&(e=t),this.setMinTaps(t).setMaxTaps(e),this}},I=function(t){return null==t||""===t||0===t.length},z=function(t,e,i){if("object"==typeof t)if(I(e)){if(null==i)return;"object"==typeof i&&(t=i)}else{"string"==typeof e&&(e=e.split("."));var s=e.pop();(function(t,e,i){void 0===i&&(i={});var s=t;if(I(e));else{var r;"string"==typeof e&&(e=e.split("."));for(var n=0,o=e.length;n<o;n++){var h;if(null==s[r=e[n]]||"object"!=typeof s[r])h=n===o-1?i:{},s[r]=h;s=s[r]}}return s}(t,e))[s]=i}};const D=Phaser.GameObjects.GameObject;var R=function(t){return t instanceof D};o.register("tap",(function(t,e){return R(t)||(e=t,t=this.scene),new j(t,e)})),z(window,"RexPlugins.Gestures.Tap",j);const B=Phaser.Utils.Objects.GetValue;const L="IDLE",Y="BEGIN",A="RECOGNIZED";var W=class extends w{constructor(t,e){super(t,e);var i=this,s={states:{IDLE:{enter:function(){i.x=0,i.y=0,i.worldX=0,i.worldY=0},exit:function(){var t=i.lastPointer;i.x=t.x,i.y=t.y,i.worldX=t.worldX,i.worldY=t.worldY}},BEGIN:{enter:function(){i.start()},exit:function(){i.stop()}},RECOGNIZED:{enter:function(){i.emit("pressstart",i,i.gameObject,i.lastPointer)},exit:function(){i.emit("pressend",i,i.gameObject,i.lastPointer)}}},init:function(){this.state=L},eventEmitter:!1};this.setRecongizedStateObject(new _(s))}resetFromJSON(t){return super.resetFromJSON(t),this.setDragThreshold(B(t,"threshold",9)),this.setMinHoldTime(B(t,"time",251)),this}onDragStart(){this.state=0===this.holdTime?A:Y}onDragEnd(){this.state=L}onDrag(){this.state!==L&&this.pointer.getDistance()>this.dragThreshold&&(this.state=L)}preUpdate(t,e){this.state===Y&&(t-this.pointer.downTime>=this.holdTime&&(this.state=A))}get isPressed(){return this.state===A}setDragThreshold(t){return this.dragThreshold=t,this}setMinHoldTime(t){return this.holdTime=t,this}};o.register("press",(function(t,e){return R(t)||(e=t,t=this.scene),new W(t,e)})),z(window,"RexPlugins.Gestures.Press",W);const F=Phaser.Utils.Objects.GetValue;const H="IDLE",V="BEGIN",X="RECOGNIZED";var G=class extends w{constructor(t,e){super(t,e);var i=this,s={states:{IDLE:{},BEGIN:{enter:function(){var t=i.pointer;i.startX=t.x,i.startY=t.y,i.startWorldX=t.worldX,i.startWorldY=t.worldY}},RECOGNIZED:{enter:function(){i.emit("panstart",i,i.gameObject,i.lastPointer)},exit:function(){var t=i.lastPointer;i.endX=t.x,i.endY=t.y,i.endWorldX=t.worldX,i.endWorldY=t.worldY,i.emit("panend",i,i.gameObject,i.lastPointer)}}},init:function(){this.state=H},eventEmitter:!1};this.setRecongizedStateObject(new _(s))}resetFromJSON(t){return super.resetFromJSON(t),this.setDragThreshold(F(t,"threshold",10)),this}onDragStart(){this.state=0===this.dragThreshold?X:V}onDragEnd(){this.state=H}onDrag(){switch(this.state){case V:this.pointer.getDistance()>=this.dragThreshold&&(this.state=X);break;case X:var t=this.pointer.position,e=this.pointer.prevPosition;this.dx=t.x-e.x,this.dy=t.y-e.y;var i=this.pointer;self.x=i.x,self.y=i.y,self.worldX=i.worldX,self.worldY=i.worldY,this.emit("pan",this)}}get isPan(){return this.state===X}setDragThreshold(t){return this.dragThreshold=t,this}};o.register("pan",(function(t,e){return R(t)||(e=t,t=this.scene),new G(t,e)})),z(window,"RexPlugins.Gestures.Pan",G);const N=Phaser.Math.Distance.Between,U=Phaser.Math.Angle.Between;var J={getDt:function(){return this.scene.sys.game.loop.delta},getVelocity:function(){var t=this.pointer.position,e=this.pointer.prevPosition;return N(e.x,e.y,t.x,t.y)/(.001*this.getDt())},getVelocityX:function(){var t=this.pointer.position,e=this.pointer.prevPosition;return Math.abs(t.x-e.x)/(.001*this.getDt())},getVelocityY:function(){var t=this.pointer.position,e=this.pointer.prevPosition;return Math.abs(t.y-e.y)/(.001*this.getDt())},getVelocityAngle:function(){var t=this.pointer.position,e=this.pointer.prevPosition;return U(e.x,e.y,t.x,t.y)}},Z={"up&down":0,"left&right":1,"4dir":2,"8dir":3},K={},$=function(t,e,i){switch(void 0===i?i={}:!0===i&&(i=K),i.left=!1,i.right=!1,i.up=!1,i.down=!1,t=(t+360)%360,e){case 0:t<180?i.down=!0:i.up=!0;break;case 1:t>90&&t<=270?i.left=!0:i.right=!0;break;case 2:t>45&&t<=135?i.down=!0:t>135&&t<=225?i.left=!0:t>225&&t<=315?i.up=!0:i.right=!0;break;case 3:t>22.5&&t<=67.5?(i.down=!0,i.right=!0):t>67.5&&t<=112.5?i.down=!0:t>112.5&&t<=157.5?(i.down=!0,i.left=!0):t>157.5&&t<=202.5?i.left=!0:t>202.5&&t<=247.5?(i.left=!0,i.up=!0):t>247.5&&t<=292.5?i.up=!0:t>292.5&&t<=337.5?(i.up=!0,i.right=!0):i.right=!0}return i};const q=Phaser.Utils.Objects.GetValue,Q=Phaser.Math.RadToDeg;class tt extends w{constructor(t,e){super(t,e);var i=this,s={states:{IDLE:{},BEGIN:{enter:function(){i.validDrag=!1}},RECOGNIZED:{enter:function(){i.start(),i.updateDirectionStates(),i.emit("swipe",i,i.gameObject,i.lastPointer)},exit:function(){i.stop(),i.clearDirectionStates()}}},init:function(){this.state=et},eventEmitter:!1};this.setRecongizedStateObject(new _(s)),this.clearDirectionStates()}resetFromJSON(t){return super.resetFromJSON(t),this.setDragThreshold(q(t,"threshold",10)),this.setMinDragVelocity(q(t,"velocityThreshold",1e3)),this.setDirectionMode(q(t,"dir","8dir")),this}onDragStart(){this.state=it}onDragEnd(){this.state=et}onDrag(){this.state===it&&(this.vaildDrag||(this.vaildDrag=0===this.dragThreshold||this.pointer.getDistance()>=this.dragThreshold),this.vaildDrag&&this.dragVelocity>this.minDragVelocity&&(this.state=st))}postUpdate(t,e){this.state===st&&(this.state=et)}get isSwiped(){return this.state===st}get dragVelocity(){var t;switch(this.dirMode){case 0:t=this.getVelocityX();break;case 1:t=this.getVelocityY();break;default:t=this.getVelocity()}return t}setDragThreshold(t){return this.dragThreshold=t,this}setMinDragVelocity(t){return this.minDragVelocity=t,this}setDirectionMode(t){return"string"==typeof t&&(t=Z[t]),this.dirMode=t,this}updateDirectionStates(){var t=Q(this.getVelocityAngle());return $(t,this.dirMode,this),this}clearDirectionStates(){return this.left=!1,this.right=!1,this.up=!1,this.down=!1,this}}Object.assign(tt.prototype,J);const et="IDLE",it="BEGIN",st="RECOGNIZED";var rt=tt;o.register("swipe",(function(t,e){return R(t)||(e=t,t=this.scene),new rt(t,e)})),z(window,"RexPlugins.Gestures.Swipe",rt);var nt=function(t){if(Array.isArray(t))t.length=0;else for(var e in t)delete t[e]};const ot=Phaser.Utils.Objects.GetValue,ht=Phaser.Utils.Array.SpliceOne,at=Phaser.Math.Distance.Between,lt=Phaser.Math.Angle.Between;class ut{constructor(t,e){var i=t.input.manager.pointersTotal-1;i<2&&t.input.addPointer(2-i),this.scene=t,this.setEventEmitter(ot(e,"eventEmitter",void 0)),this.pointers=[],this.movedState={},this.resetFromJSON(e),this.boot()}resetFromJSON(t){return this.setEnable(ot(t,"enable",!0)),this.bounds=ot(t,"bounds",void 0),this.tracerState=dt,this.pointers.length=0,nt(this.movedState),this}boot(){this.scene.input.on("pointerdown",this.onPointerDown,this),this.scene.input.on("pointerup",this.onPointerUp,this),this.scene.input.on("pointermove",this.onPointerMove,this),this.scene.events.once("shutdown",this.destroy,this)}shutdown(){this.destroyEventEmitter(),this.pointers.length=0,nt(this.movedState),this.scene&&(this.scene.input.off("pointerdown",this.onPointerDown,this),this.scene.input.off("pointerup",this.onPointerUp,this),this.scene.input.off("pointermove",this.onPointerMove,this),this.scene.events.off("destroy",this.destroy,this),this.scene=void 0),this.scene=void 0}destroy(){this.shutdown()}setEnable(t){return void 0===t&&(t=!0),this.enable===t?this:(t||this.dragCancel(),this.enable=t,this)}onPointerDown(t){if(this.enable&&(2!==this.pointers.length&&(!this.bounds||this.bounds.contains(t.x,t.y))&&-1===this.pointers.indexOf(t)))switch(this.movedState[t.id]=!1,this.pointers.push(t),this.tracerState){case dt:this.tracerState=pt,this.onDrag1Start();break;case pt:this.tracerState=ft,this.onDrag2Start()}}onPointerUp(t){if(this.enable&&(!this.bounds||this.bounds.contains(t.x,t.y))){var e=this.pointers.indexOf(t);if(-1!==e)switch(delete this.movedState[t.id],ht(this.pointers,e),this.tracerState){case pt:this.tracerState=dt,this.onDrag1End();break;case ft:this.tracerState=pt,this.onDrag2End(),this.onDrag1Start()}}}onPointerMove(t){if(this.enable&&t.isDown){var e=!this.bounds||this.bounds.contains(t.x,t.y),i=-1!==this.pointers.indexOf(t);if(!i&&e);else if(i&&!e)this.onPointerUp(t);else if(this.movedState[t.id]||(this.movedState[t.id]=t.x!==t.downX||t.y!==t.downY),this.movedState[t.id])switch(this.tracerState){case pt:this.onDrag1();break;case ft:this.onDrag2()}}}dragCancel(){return this.tracerState===ft&&this.onDrag2End(),this.pointers.length=0,nt(this.movedState),this.tracerState=dt,this}onDrag1Start(){this.emit("drag1start",this)}onDrag1End(){this.emit("drag1end",this)}onDrag1(){this.emit("drag1",this)}onDrag2Start(){this.emit("drag2start",this)}onDrag2End(){this.emit("drag2end",this)}onDrag2(){this.emit("drag2",this)}get distanceBetween(){if(this.tracerState!==ft)return 0;var t=this.pointers[0],e=this.pointers[1];return at(t.x,t.y,e.x,e.y)}get angleBetween(){if(this.tracerState!==ft)return 0;var t=this.pointers[0],e=this.pointers[1];return lt(t.x,t.y,e.x,e.y)}get drag1Vector(){var t=this.pointers[0];if(t&&this.movedState[t.id]){var e=t.position,i=t.prevPosition;ct.x=e.x-i.x,ct.y=e.y-i.y}else ct.x=0,ct.y=0;return ct}get centerX(){if(this.tracerState!==ft)return 0;var t=this.pointers[0].position,e=this.pointers[1].position;return(t.x+e.x)/2}get centerY(){if(this.tracerState!==ft)return 0;var t=this.pointers[0].position,e=this.pointers[1].position;return(t.y+e.y)/2}get prevCenterX(){if(this.tracerState!==ft)return 0;var t=this.movedState[this.pointers[0].id]?this.pointers[0].prevPosition:this.pointers[0].position,e=this.movedState[this.pointers[1].id]?this.pointers[1].prevPosition:this.pointers[1].position;return(t.x+e.x)/2}get prevCenterY(){if(this.tracerState!==ft)return 0;var t=this.movedState[this.pointers[0].id]?this.pointers[0].prevPosition:this.pointers[0].position,e=this.movedState[this.pointers[1].id]?this.pointers[1].prevPosition:this.pointers[1].position;return(t.y+e.y)/2}get movementCenterX(){return this.centerX-this.prevCenterX}get movementCenterY(){return this.centerY-this.prevCenterY}setRecongizedStateObject(t){return this.recongizedState=t,this}get state(){return this.recongizedState.state}set state(t){this.recongizedState.state=t}cancel(){return this.state=gt,this}}Object.assign(ut.prototype,h);var ct={};const dt=0,pt=1,ft=2,gt="IDLE";var vt=ut;const mt=Phaser.Utils.Objects.GetValue;const yt="IDLE",xt="BEGIN",bt="RECOGNIZED";var wt=class extends vt{constructor(t,e){super(t,e);var i=this,s={states:{IDLE:{enter:function(){i.prevDistance=void 0,i.scaleFactor=1}},BEGIN:{},RECOGNIZED:{enter:function(){i.emit("pinchstart",i)},exit:function(){i.emit("pinchend",i)}}},init:function(){this.state=yt},eventEmitter:!1};this.setRecongizedStateObject(new _(s))}resetFromJSON(t){return super.resetFromJSON(t),this.setDragThreshold(mt(t,"threshold",0)),this}onDrag2Start(){this.scaleFactor=1,this.prevDistance=this.distanceBetween,this.state=0===this.dragThreshold?bt:xt}onDrag2End(){this.state=yt}onDrag2(){switch(this.state){case xt:if(this.pointers[0].getDistance()>=this.dragThreshold&&this.pointers[1].getDistance()>=this.dragThreshold){var t=this.distanceBetween;this.scaleFactor=t/this.prevDistance,this.prevDistance=t,this.state=bt}break;case bt:t=this.distanceBetween;this.scaleFactor=t/this.prevDistance,this.emit("pinch",this),this.prevDistance=t}}get isPinch(){return this.state===bt}setDragThreshold(t){return this.dragThreshold=t,this}};o.register("pinch",(function(t){return new wt(this.scene,t)})),z(window,"RexPlugins.Gestures.Pinch",wt);const Ct=Phaser.Math.RotateAround;var St=function(t,e,i,s){return Ct(t,e,i,s),t.rotation+=s,t},Ot={},_t=function(t,e){if(!this.isRotation)return this;void 0===e&&(e=this.pointers[0].camera);var i=this.movementCenterX,s=this.movementCenterY;e.getWorldPoint(this.centerX,this.centerY,Ot);var r=Ot.x,n=Ot.y,o=this.rotation;if(Array.isArray(t))for(var h=t,a=0,l=h.length;a<l;a++)(t=h[a]).x+=i,t.y+=s,St(t,r,n,o);else t.x+=i,t.y+=s,St(t,x,y,o);return this};const Pt=Phaser.Utils.Objects.GetValue,Tt=Phaser.Math.Angle.WrapDegrees,kt=Phaser.Math.Angle.ShortestBetween,Mt=Phaser.Math.RadToDeg,Et=Phaser.Math.DegToRad;class jt extends vt{constructor(t,e){super(t,e);var i=this,s={states:{IDLE:{enter:function(){i.prevAngle=void 0,i.angle=0}},BEGIN:{},RECOGNIZED:{enter:function(){i.emit("rotatestart",i)},exit:function(){i.emit("rotateend",i)}}},init:function(){this.state=zt},eventEmitter:!1};this.setRecongizedStateObject(new _(s))}resetFromJSON(t){return super.resetFromJSON(t),this.setDragThreshold(Pt(t,"threshold",0)),this}onDrag2Start(){this.prevAngle=Tt(Mt(this.angleBetween)),this.state=0===this.rotationThreshold?Rt:Dt}onDrag2End(){this.state=zt}onDrag2(){switch(this.state){case Dt:if(this.pointers[0].getDistance()>=this.dragThreshold&&this.pointers[1].getDistance()>=this.dragThreshold){var t=Tt(Mt(this.angleBetween));this.angle=kt(this.prevAngle,t),this.prevAngle=t,this.state=Rt}break;case Rt:t=Tt(Mt(this.angleBetween));this.angle=kt(this.prevAngle,t),this.prevAngle=t,this.emit("rotate",this)}}get isRotation(){return this.state===Rt}get rotation(){return Et(this.angle)}setDragThreshold(t){return this.dragThreshold=t,this}}var It={spinObject:_t};Object.assign(jt.prototype,It);const zt="IDLE",Dt="BEGIN",Rt="RECOGNIZED";var Bt=jt;o.register("rotate",(function(t){return new Bt(this.scene,t)})),z(window,"RexPlugins.Gestures.Rotate",Bt);class Lt extends Phaser.Plugins.ScenePlugin{constructor(t,e){super(t,e),this.add=new o(t)}}var Yt=Lt;class At{constructor(t){this.scene=t}static register(t,e){At.prototype[t]=e}}var Wt=At;const Ft=Phaser.Utils.Objects.GetValue;var Ht=function(t,e,i){return void 0===t?{x:e,y:i}:"number"==typeof t?{x:t,y:t}:t},Vt=class{constructor(t,e,i,s,r){this.cornerRadius={},this._width=0,this._height=0,this.setTo(t,e,i,s,r)}setTo(t,e,i,s,r){return this.setPosition(t,e),this.setRadius(r),this.setSize(i,s),this}setPosition(t,e){return void 0===t&&(t=0),void 0===e&&(e=t),this.x=t,this.y=e,this}setRadius(t){var e,i;void 0===t&&(t=0),"number"==typeof t?(e=t,i=t):(e=Ft(t,"x",0),i=Ft(t,"y",0));var s=this.cornerRadius;return s.tl=Ht(Ft(t,"tl",void 0),e,i),s.tr=Ht(Ft(t,"tr",void 0),e,i),s.bl=Ht(Ft(t,"bl",void 0),e,i),s.br=Ht(Ft(t,"br",void 0),e,i),this}setSize(t,e){return this.width=t,this.height=e,this}get minWidth(){var t=this.cornerRadius;return Math.max(t.tl.x+t.tr.x,t.bl.x+t.br.x)}get minHeight(){var t=this.cornerRadius;return Math.max(t.tl.y+t.bl.y,t.tr.y+t.br.y)}get width(){return this._width}set width(t){null==t&&(t=0),this._width=Math.max(t,this.minWidth)}get height(){return this._height}set height(t){null==t&&(t=0),this._height=Math.max(t,this.minHeight)}get radius(){var t=this.cornerRadius;return Math.max(t.tl.x,t.tl.y,t.tr.x,t.tr.y,t.bl.x,t.bl.y,t.br.x,t.br.y)}},Xt=function(t,e,i){var s=i.length;if(s>=2){var r=i[s-2],n=i[s-1];if(t===r&&e===n)return i}return i.push(t,e),i},Gt=i(2),Nt=i.n(Gt);const Ut=Phaser.Utils.Objects.GetValue;var Jt=function(t,e,i,s,r,n,o,h){var a,l,u,c=Ut(i,"x",i),d=Ut(i,"y",i);n&&(r+=360),s=Nt()(s);for(var p=((r=Nt()(r))-s)/o,f=0;f<=o;f++)u=s+p*f,a=t+c*Math.cos(u),l=e+d*Math.sin(u),Xt(a,l,h);return h},Zt=i(3),Kt=i.n(Zt),$t=i(4),qt=i.n($t),Qt=i(5),te=i.n(Qt),ee=function(){},ie={renderWebGL:qt.a,renderCanvas:te.a};const se=Phaser.Utils.Objects.GetValue;class re extends Phaser.GameObjects.Shape{constructor(t,e,i,s,r,n,o,h){void 0===e&&(e=0),void 0===i&&(i=0);var a=se(n,"iteration",void 0);n=se(n,"radius",n),super(t,"RoundRectangle",new Vt(0,0,s,r,n)),this.setIteration(a),this.setPosition(e,i),void 0!==o&&this.setFillStyle(o,h),this.updateDisplayOrigin(),this.updateData()}updateData(){var t=this.geom,e=this.pathData;e.length=0;var i,s=t.cornerRadius,r=this.iteration+1;if(i=s.br,ne(i)){var n=t.width-i.x,o=t.height-i.y;Jt(n,o,i,0,90,!1,r,e)}else Xt(t.width,t.height,e);if(i=s.bl,ne(i)){n=i.x,o=t.height-i.y;Jt(n,o,i,90,180,!1,r,e)}else Xt(0,t.height,e);if(i=s.tl,ne(i)){n=i.x,o=i.y;Jt(n,o,i,180,270,!1,r,e)}else Xt(0,0,e);if(i=s.tr,ne(i)){n=t.width-i.x,o=i.y;Jt(n,o,i,270,360,!1,r,e)}else Xt(t.width,0,e);return e.push(e[0],e[1]),this.pathIndexes=Kt()(e),this}get width(){return this.geom.width}set width(t){this.width!==t&&(this.geom.width=t,this.updateDisplayOrigin(),this.updateData())}get height(){return this.geom.height}set height(t){this.height!==t&&(this.geom.height=t,this.updateDisplayOrigin(),this.updateData())}resize(t,e){return void 0===e&&(e=t),this.geom.width===t&&this.geom.height===e?this:(this.geom.height=e,this.geom.width=t,this.updateDisplayOrigin(),this.updateData(),this)}get iteration(){return this._iteration}set iteration(t){void 0!==this._iteration?this._iteration!==t&&(this._iteration=t,this.updateData()):this._iteration=t}setIteration(t){return void 0===t&&(t=6),this.iteration=t,this}get radius(){return this.geom.radius}set radius(t){this.geom.setRadius(t),this.updateDisplayOrigin(),this.updateData()}setRadius(t){return void 0===t&&(t=0),this.radius=t,this}get cornerRadius(){return this.geom.cornerRadius}set cornerRadius(t){this.radius=t}setCornerRadius(t){return this.setRadius(t)}}var ne=function(t){return 0!==t.x&&0!==t.y};Object.assign(re.prototype,ie);var oe=re;Wt.register("roundRectangle",(function(t,e,i,s,r,n,o){var h=new oe(this.scene,t,e,i,s,r,n,o);return this.scene.add.existing(h),h})),z(window,"RexPlugins.UI.RoundRectangle",oe);var he=i(6),ae=i.n(he),le=i(7),ue=i.n(le),ce={renderWebGL:ae.a,renderCanvas:ue.a};
/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2018 Photon Storm Ltd.
 * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
 */
const de=Phaser.Display.Canvas.CanvasPool;var pe={},fe=function(t){var e=de.create(this),i=e.getContext("2d");t.syncFont(e,i);var s=Math.ceil(i.measureText(t.testString).width*t.baselineX),r=s,n=2*r;r=r*t.baselineY|0,e.width=s,e.height=n,i.fillStyle="#f00",i.fillRect(0,0,s,n),i.font=t._font,i.textBaseline="alphabetic",i.fillStyle="#000",i.fillText(t.testString,0,r);var o=pe;if(!i.getImageData(0,0,s,n))return o.ascent=r,o.descent=r+6,o.fontSize=o.ascent+o.descent,de.remove(e),o;var h,a,l=i.getImageData(0,0,s,n).data,u=l.length,c=4*s,d=0,p=!1;for(h=0;h<r;h++){for(a=0;a<c;a+=4)if(255!==l[d+a]){p=!0;break}if(p)break;d+=c}for(o.ascent=r-h,d=u-c,p=!1,h=n;h>r;h--){for(a=0;a<c;a+=4)if(255!==l[d+a]){p=!0;break}if(p)break;d-=c}return o.descent=h-r,o.fontSize=o.ascent+o.descent,de.remove(e),o},ge={hleft:0,hcenter:1,hright:2,vtop:0,vcenter:1,vbottom:2,NO_NEWLINE:0,RAW_NEWLINE:1,WRAPPED_NEWLINE:2,NO_WRAP:0,WORD_WRAP:1,CHAR_WRAP:2,SPLITREGEXP:/(?:\r\n|\r|\n)/};
/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2018 Photon Storm Ltd.
 * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
 */
const ve=Phaser.Utils.Objects.GetAdvancedValue,me=Phaser.Utils.Objects.GetValue;var ye={backgroundColor:["backgroundColor",null],fontFamily:["fontFamily","Courier"],fontSize:["fontSize","16px"],fontStyle:["fontStyle",""],color:["color","#fff"],stroke:["stroke","#fff"],strokeThickness:["strokeThickness",0],shadowOffsetX:["shadow.offsetX",0],shadowOffsetY:["shadow.offsetY",0],shadowColor:["shadow.color","#000"],shadowBlur:["shadow.blur",0],shadowStroke:["shadow.stroke",!1],shadowFill:["shadow.fill",!1],underlineColor:["underline.color","#000"],underlineThickness:["underline.thickness",0],underlineOffset:["underline.offset",0],halign:["halign",0],valign:["valign",0],maxLines:["maxLines",0],fixedWidth:["fixedWidth",0],fixedHeight:["fixedHeight",0],resolution:["resolution",0],lineSpacing:["lineSpacing",0],rtl:["rtl",!1],testString:["testString","|MÃ‰qgy"],baselineX:["baselineX",1.2],baselineY:["baselineY",1.4],wrapMode:["wrap.mode",1],wrapWidth:["wrap.width",0]};const xe={left:ge.hleft,center:ge.hcenter,right:ge.hright},be={top:ge.vtop,center:ge.vcenter,bottom:ge.vbottom},we={none:ge.NO_WRAP,word:ge.WORD_WRAP,char:ge.CHAR_WRAP,character:ge.CHAR_WRAP};var Ce=class{constructor(t,e){this.parent=t,this.backgroundColor,this.fontFamily,this.fontSize,this.fontStyle,this.color,this.stroke,this.strokeThickness,this.shadowOffsetX,this.shadowOffsetY,this.shadowColor,this.shadowBlur,this.shadowStroke,this.shadowFill,this.underlineColor,this.underlineThickness,this.underlineOffset,this.halign,this.valign,this.maxLines,this.fixedWidth,this.fixedHeight,this.resolution,this.lineSpacing,this.rtl,this.testString,this.baselineX,this.baselineY,this._font,this.setStyle(e,!1);var i=me(e,"metrics",!1);this.metrics=i?{ascent:me(i,"ascent",0),descent:me(i,"descent",0),fontSize:me(i,"fontSize",0)}:fe(this)}setStyle(t,e){if(void 0===e&&(e=!0),t&&t.hasOwnProperty("halign")&&"string"==typeof t.halign&&(t.halign=xe[t.halign.toLowerCase()]||0),t&&t.hasOwnProperty("valign")&&"string"==typeof t.valign&&(t.valign=be[t.valign.toLowerCase()]||0),t&&t.hasOwnProperty("wrap")){var i=t.wrap;if(i.hasOwnProperty("mode")){var s=i.mode;"string"==typeof s&&(i.mode=we[s])}else i.hasOwnProperty("width")&&(i.mode=1)}for(var r in t&&t.hasOwnProperty("fontSize")&&"number"==typeof t.fontSize&&(t.fontSize=t.fontSize.toString()+"px"),ye)this[r]="wrapCallback"===r||"wrapCallbackScope"===r?me(t,ye[r][0],ye[r][1]):ve(t,ye[r][0],ye[r][1]);var n=me(t,"font",null);this._font=null===n?this.fontStyle+" "+this.fontSize+" "+this.fontFamily:n;var o=me(t,"fill",null);return null!==o&&(this.color=o),e?this.update(!0):this.parent}syncFont(t,e){e.font=this._font}syncStyle(t,e){e.textBaseline="alphabetic",e.fillStyle=this.color,e.strokeStyle=this.stroke,e.lineWidth=this.strokeThickness,e.lineCap="round",e.lineJoin="round"}syncShadow(t,e){e?(t.shadowOffsetX=this.shadowOffsetX,t.shadowOffsetY=this.shadowOffsetY,t.shadowColor=this.shadowColor,t.shadowBlur=this.shadowBlur):(t.shadowOffsetX=0,t.shadowOffsetY=0,t.shadowColor=0,t.shadowBlur=0)}update(t){return t&&(this._font=this.fontStyle+" "+this.fontSize+" "+this.fontFamily,this.metrics=fe(this)),this.parent.updateText(t)}buildFont(){var t=this.fontStyle+" "+this.fontSize+" "+this.fontFamily;return t!==this._font&&(this._font=t),this}setFont(t){return"string"==typeof t?(this.fontFamily=t,this.fontSize="",this.fontStyle=""):(this.fontFamily=me(t,"fontFamily","Courier"),this.fontSize=me(t,"fontSize","16px"),this.fontStyle=me(t,"fontStyle","")),this.update(!0)}setFontFamily(t){return this.fontFamily=t,this.update(!0)}setFontStyle(t){return this.fontStyle=t,this.update(!0)}setFontSize(t){return"number"==typeof t&&(t=t.toString()+"px"),this.fontSize=t,this.update(!0)}setTestString(t){return this.testString=t,this.update(!0)}setFixedSize(t,e){return this.fixedWidth=t,this.fixedHeight=e,t&&(this.parent.width=t),e&&(this.parent.height=e),this.update(!1)}setResolution(t){return this.resolution=t,this.update(!1)}setLineSpacing(t){return this.lineSpacing=t,this.update(!1)}setBackgroundColor(t){return this.backgroundColor=t,this.update(!1)}setFill(t){return this.color=t,this.update(!1)}setColor(t){return this.color=t,this.update(!1)}setStroke(t,e){return void 0===t?this.strokeThickness=0:(void 0===e&&(e=this.strokeThickness),this.stroke=t,this.strokeThickness=e),this.update(!0)}setShadow(t,e,i,s,r,n){return void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i="#000"),void 0===s&&(s=0),void 0===r&&(r=!1),void 0===n&&(n=!0),this.shadowOffsetX=t,this.shadowOffsetY=e,this.shadowColor=i,this.shadowBlur=s,this.shadowStroke=r,this.shadowFill=n,this.update(!1)}setShadowOffset(t,e){return void 0===t&&(t=0),void 0===e&&(e=t),this.shadowOffsetX=t,this.shadowOffsetY=e,this.update(!1)}setShadowColor(t){return void 0===t&&(t="#000"),this.shadowColor=t,this.update(!1)}setShadowBlur(t){return void 0===t&&(t=0),this.shadowBlur=t,this.update(!1)}setShadowStroke(t){return this.shadowStroke=t,this.update(!1)}setShadowFill(t){return this.shadowFill=t,this.update(!1)}setUnderline(t,e,i){return void 0===t&&(t="#000"),void 0===e&&(e=0),void 0===i&&(i=0),this.underlineColor=t,this.underlineThickness=e,this.underlineOffset=i,this.update(!1)}setUnderlineColor(t){return void 0===t&&(t="#000"),this.underlineColor=t,this.update(!1)}setUnderlineThickness(t){return void 0===t&&(t=0),this.underlineThickness=t,this.update(!1)}setUnderlineOffset(t){return void 0===t&&(t=0),this.underlineOffset=t,this.update(!1)}setWrapMode(t){return"string"==typeof t&&(t=we[t.toLowerCase()]||0),this.wrapMode=t,this.update(!0)}setWrapWidth(t){return this.wrapWidth=t,this.update(!1)}setAlign(t,e){return void 0===t&&(t=0),void 0===e&&(e=0),"string"==typeof t&&(t=xe[t.toLowerCase()]||0),"string"==typeof e&&(e=xe[e.toLowerCase()]||0),this.halign=t,this.valign=e,this.update(!1)}setHAlign(t){return void 0===t&&(t=0),"string"==typeof t&&(t=xe[t.toLowerCase()]||0),this.halign=t,this.update(!1)}setVAlign(t){return void 0===t&&(t=0),"string"==typeof t&&(t=xe[t.toLowerCase()]||0),this.valign=t,this.update(!1)}setMaxLines(t){return void 0===t&&(t=0),this.maxLines=t,this.update(!1)}getTextMetrics(){var t=this.metrics;return{ascent:t.ascent,descent:t.descent,fontSize:t.fontSize}}get lineHeight(){return this.metrics.fontSize+this.strokeThickness+this.lineSpacing}toJSON(){var t={};for(var e in ye)t[e]=this[e];return t.metrics=this.getTextMetrics(),t}destroy(){this.parent=void 0}};const Se=ge.hcenter,Oe=ge.hright,_e=ge.vcenter,Pe=ge.vbottom;var Te={draw(t,e,i,s){var r=this.penManager;this.hitAreaManager.clear();var n=this.context;n.save(),this.drawBackground(this.defatultStyle.backgroundColor);var o=this.defatultStyle;t+=this.startXOffset,e+=this.startYOffset;var h,a,l,u,c,d,p=o.halign,f=o.valign,g=o.lineHeight,v=r.lines,m=v.length,y=o.maxLines;y>0&&m>y?(a=y,l=f===_e?Math.floor((m-a)/2):f===Pe?m-a:0):(a=m,l=0),u=l+a,d=f===_e?Math.max((s-a*g)/2,0):f===Pe?Math.max(s-a*g-2,0):0,d+=e;for(var x=l;x<u;x++)if(0!==(h=r.getLineWidth(x))){c=p===Se?(i-h)/2:p===Oe?i-h:0,c+=t;for(var b=v[x],w=0,C=b.length;w<C;w++)this.drawPen(b[w],c,d)}n.restore()},drawPen(t,e,i){e+=t.x,i+=t.y;var s=this.canvas,r=this.context;r.save();var n=this.parser.propToContextStyle(this.defatultStyle,t.prop);n.buildFont(),n.syncFont(s,r),n.syncStyle(s,r),n.underlineThickness>0&&t.width>0&&this.drawUnderline(e,i,t.width,n),t.isTextPen&&this.drawText(e,i,t.text,n),t.isImagePen&&this.drawImage(e,i,t.prop.img,n),r.restore(),t.hasAreaMarker&&t.width>0&&this.hitAreaManager.add(t.prop.area,e,i-this.startYOffset,t.width,this.defatultStyle.lineHeight)},clear(){var t=this.canvas;this.context.clearRect(0,0,t.width,t.height)},drawBackground(t){null!==t&&(this.context.fillStyle=t,this.context.fillRect(0,0,this.canvas.width,this.canvas.height))},drawUnderline(t,e,i,s){e+=s.underlineOffset-s.underlineThickness/2,this.autoRound&&(t=Math.round(t),e=Math.round(e));var r=this.context,n=r.lineCap;r.lineCap="butt",r.beginPath(),r.strokeStyle=s.underlineColor,r.lineWidth=s.underlineThickness,r.moveTo(t,e),r.lineTo(t+i,e),r.stroke(),r.lineCap=n},drawText(t,e,i,s){this.autoRound&&(t=Math.round(t),e=Math.round(e));var r=this.context;s.strokeThickness&&(s.syncShadow(r,s.shadowStroke),r.strokeText(i,t,e)),s.color&&"none"!==s.color&&(s.syncShadow(r,s.shadowFill),r.fillText(i,t,e))},drawImage(t,e,i,s){var r=this.parent.imageManager,n=r.get(i),o=r.getFrame(i);t+=n.left,e+=-this.startYOffset+n.y,this.autoRound&&(t=Math.round(t),e=Math.round(e)),this.context.drawImage(o.source.image,o.cutX,o.cutY,o.cutWidth,o.cutHeight,t,e,n.width,n.height)}};var ke=class{constructor(){this.items=[]}destroy(){this.items.length=0,this.items=void 0}pop(){return this.items.length>0?this.items.pop():null}push(t){return this.items.push(t),this}pushMultiple(t){return this.items.push.apply(this.items,t),t.length=0,this}};const Me=Phaser.Utils.Objects.GetValue,Ee=ge.NO_NEWLINE,je=ge.RAW_NEWLINE;var Ie=class{constructor(t){this.prop={},this.resetFromJSON(t)}resetFromJSON(t){this.text=Me(t,"text",""),this.x=Me(t,"x",0),this.y=Me(t,"y",0),this.width=Me(t,"width",0);var e=Me(t,"prop",null);null===e&&(e={}),this.prop=e,this.newLineMode=Me(t,"newLineMode",0),this.startIndex=Me(t,"startIndex",0)}get plainText(){var t=this.text;return this.newLineMode===je&&(t+="\n"),t}get wrapText(){var t=this.text;return this.newLineMode!==Ee&&(t+="\n"),t}get rawTextLength(){var t=this.text.length;return this.newLineMode===je&&(t+=1),t}get endIndex(){return this.startIndex+this.rawTextLength}get lastX(){return this.x+this.width}get isTextPen(){return""!==this.text}get isImagePen(){return!!this.prop.img}get hasAreaMarker(){return!!this.prop.area}},ze=function(t,e){var i=Array.isArray(t);for(var s in void 0===e?e=i?[]:{}:nt(e),i&&(e.length=t.length),t)e[s]=t[s];return e};const De=Phaser.Utils.Objects.GetFastValue,Re=ge.NO_NEWLINE,Be=ge.WRAPPED_NEWLINE;var Le=new ke,Ye=new ke;class Ae{constructor(t){this.pens=[],this.lines=[],this.maxLinesWidth=void 0,this.PensPool=De(t,"pensPool",Le),this.LinesPool=De(t,"linesPool",Ye),this.tagToText=De(t,"tagToText",ee),this.tagToTextScope=De(t,"tagToTextScope",void 0)}destroy(){this.freePens(),this.tagToText=void 0,this.tagToTextScope=void 0}freePens(){for(var t=0,e=this.lines.length;t<e;t++)this.lines[t].length=0;this.PensPool.pushMultiple(this.pens),this.LinesPool.pushMultiple(this.lines),this.maxLinesWidth=void 0}addTextPen(t,e,i,s,r,n){var o=this.PensPool.pop();return null==o&&(o=new Ie),We.text=t,We.x=e,We.y=i,We.width=s,We.prop=r,We.newLineMode=n,o.resetFromJSON(We),this.addPen(o),this}addImagePen(t,e,i,s){return this.addTextPen("",t,e,i,s,Re),this}addNewLinePen(){var t=this.lastPen,e=t?t.lastX:0,i=t?t.y:0,s=t?ze(t.prop):null;return this.addTextPen("",e,i,0,s,Be),this}addPen(t){var e=this.lastPen;t.startIndex=null==e?0:e.endIndex,this.pens.push(t);var i=this.lastLine;null==i&&(i=this.LinesPool.pop()||[],this.lines.push(i)),i.push(t),t.newLineMode!==Re&&(i=this.LinesPool.pop()||[],this.lines.push(i)),this.maxLinesWidth=void 0}clone(t){null==t&&(t=new Ae),t.freePens();for(var e=0,i=this.lines.length;e<i;e++)for(var s=this.lines[e],r=0,n=s.length;r<n;r++){var o=s[r];t.addPen(o.text,o.x,o.y,o.width,ze(o.prop),o.newLineMode)}return t}get lastPen(){return this.pens[this.pens.length-1]}get lastLine(){return this.lines[this.lines.length-1]}getLineStartIndex(t){if(t>=this.lines.length)return this.getLineEndIndex(t);var e=this.lines[t];return e&&e[0]?e[0].startIndex:0}getLineEndIndex(t){t>=this.lines.length&&(t=this.lines.length-1);var e,i,s=!1;for(e=t;e>=0&&!(s=null!=(i=this.lines[e])&&i.length>0);e--);return s?i[i.length-1].endIndex:0}getLineWidth(t){var e=this.lines[t];if(!e)return 0;var i=e[e.length-1];return null==i?0:i.lastX}getMaxLineWidth(){if(void 0!==this.maxLinesWidth)return this.maxLinesWidth;for(var t,e=0,i=0,s=this.lines.length;i<s;i++)(t=this.getLineWidth(i))>e&&(e=t);return this.maxLinesWidth=e,e}getLineWidths(){for(var t=[],e=0,i=this.lines.length;e<i;e++)t.push(this.getLineWidth(e));return t}get linesCount(){return this.lines.length}get plainText(){for(var t="",e=this.pens,i=0,s=e.length;i<s;i++)t+=e[i].plainText;return t}get rawTextLength(){for(var t=0,e=this.pens,i=0,s=this.pens.length;i<s;i++)t+=e[i].rawTextLength;return t}getSliceTagText(t,e,i){if(void 0===t&&(t=0),void 0===e){var s=this.lastPen;if(null==s)return"";e=s.endIndex}void 0===i&&(i=!1);for(var r,n,o,h,a,l,u="",c=0,d=this.pens.length;c<d&&((h=(r=this.pens[c]).endIndex)<=t||(r=this.pens[c],n=i?r.wrapText:r.plainText,a=r.prop,(o=r.startIndex)>=t&&h<=e||(n=n.substring(t-o,e-o)),this.tagToTextScope?u+=this.tagToText.call(this.tagToTextScope,n,a,l):u+=this.tagToText(n,a,l),l=a,!(h>=e)));c++);return u}}var We={},Fe=Ae;const He=Phaser.Geom.Rectangle;var Ve=new ke;var Xe=class{constructor(){this.hitAreas=[]}destroy(){this.clear()}clear(){return Ve.pushMultiple(this.hitAreas),this}add(t,e,i,s,r){var n=Ve.pop();return null===n?n=new He(e,i,s,r):n.setTo(e,i,s,r),n.key=t,this.hitAreas.push(n),this}contains(t,e){for(var i,s=this.hitAreas,r=0,n=s.length;r<n;r++)if((i=s[r]).contains(t,e))return i.key;return!1}drawBounds(t,e,i){void 0===e&&(e=16777215),i&&t.save().scaleCanvas(i.scaleX,i.scaleY).rotateCanvas(i.rotation).translateCanvas(i.x,i.y);for(var s,r=this.hitAreas,n=0,o=r.length;n<o;n++)s=r[n],t.lineStyle(1,e).strokeRect(s.x,s.y,s.width,s.height);return i&&t.restore(),this}},Ge=function(t,e,i,s){var r=this.hitAreaManager.contains(i,s);!1!==r&&(this.parent.emit(`${t}-${r}`,e,i,s),this.parent.emit(t,r,e,i,s))},Ne=function(){this.parent.on("pointerdown",(function(t,e,i,s){Ge.call(this,"areadown",t,e,i)}),this).on("pointerup",(function(t,e,i,s){Ge.call(this,"areaup",t,e,i)}),this)};const Ue=ge.NO_NEWLINE,Je=ge.RAW_NEWLINE,Ze=ge.WRAPPED_NEWLINE,Ke=ge.NO_WRAP,$e=ge.WORD_WRAP,qe=ge.SPLITREGEXP;var Qe=[],ti=new ke;ti.newline=function(t,e,i){var s=this.pop();return null===s&&(s={}),s.text=t,s.width=e,s.newLineMode=i,s};var ei=function(t,e,i,s,r){s<=0&&(i=Ke);var n=Qe;if(ti.pushMultiple(n),!t||!t.length)return n;for(var o,h,a,l=t.split(qe),u=0,c=l.length;u<c;u++)if(o=l[u],a=u===c-1?Ue:Je,i!==Ke){var d,p;if(h=0===u?s-r:s,o.length<=100)if((b=e(o))<=h){n.push(ti.newline(o,b,a));continue}for(var f,g="",v="",m=0,y=0,x=(d=i===$e?o.split(" "):o).length;y<x;y++)p=d[y],i===$e?(g+=p,y<x-1&&(g+=" ")):g+=p,(f=e(g))>h&&(0===y?n.push(ti.newline("",0,Ze)):(n.push(ti.newline(v,m,Ze)),g=p,i===$e&&y<x-1&&(g+=" "),f=e(g)),h=s),v=g,m=f;n.push(ti.newline(v,m,a))}else{var b=e(o);n.push(ti.newline(o,b,a))}return n};const ii=Phaser.Utils.Objects.GetValue,si=ge.NO_WRAP,ri=ge.NO_NEWLINE;class ni{constructor(t){this.parent=t.parent,this.context=ii(t,"context",null),this.canvas=this.context.canvas,this.parser=ii(t,"parser",null),this.defatultStyle=ii(t,"style",null),this.autoRound=!0,this.pensPool=ii(t,"pensPool",null),this.penManager=this.newPenManager(),this._tmpPenManager=null,this.hitAreaManager=new Xe;var e=this.context;this.getTextWidth=function(t){return e.measureText(t).width}}destroy(){this.context=void 0,this.canvas=void 0,this.parser=void 0,this.defatultStyle=void 0,this.penManager&&(this.penManager.destroy(),this.penManager=void 0),this._tmpPenManager&&(this._tmpPenManager.destroy(),this._tmpPenManager=void 0),this.hitAreaManager&&(this.hitAreaManager.destroy(),this.hitAreaManager=void 0)}updatePenManager(t,e,i,s,r){if(void 0===r&&(r=this.penManager),r.freePens(),""===t)return r;for(var n,o,h,a,l,u=this.canvas,c=this.context,d=0,p=0,f=this.parser.splitText(t),g=0,v=f.length;g<v;g++)if(n=(a=this.parser.tagTextToProp(f[g],o)).plainText,(o=a.prop).img){var m=this.imageManager.getOuterWidth(o.img);i>0&&e!==si&&i<d+m&&(r.addNewLinePen(),p+=s,d=0),r.addImagePen(d,p,m,ze(o)),d+=m}else if(""!==n){var y;this.context.save(),(h=this.parser.propToContextStyle(this.defatultStyle,o)).buildFont(),h.syncFont(u,c),h.syncStyle(u,c);for(var x=0,b=(l=ei(n,this.getTextWidth,e,i,d)).length;x<b;x++)y=l[x],r.addTextPen(y.text,d,p,y.width,ze(o),y.newLineMode),y.newLineMode!==ri?(d=0,p+=s):d+=y.width;this.context.restore()}return r}get startXOffset(){return this.defatultStyle.strokeThickness/2}get startYOffset(){var t=this.defatultStyle;return t.strokeThickness/2+t.metrics.ascent}get lines(){return this.penManager.lines}get desplayLinesCount(){var t=this.penManager.linesCount,e=this.defatultStyle.maxLines;return e>0&&t>e&&(t=e),t}get linesWidth(){return this.penManager.getMaxLineWidth()}get linesHeight(){var t=this.desplayLinesCount,e=this.defatultStyle.lineHeight*t;return t>0&&(e-=this.defatultStyle.lineSpacing),e}get imageManager(){return this.parent.imageManager}newPenManager(){return new Fe({pensPool:this.pensPool,tagToText:this.parser.propToTagText,tagToTextScope:this.parser})}get tmpPenManager(){return null===this._tmpPenManager&&(this._tmpPenManager=this.newPenManager()),this._tmpPenManager}getPlainText(t,e,i){var s;if(null==t)s=this.penManager.plainText;else{var r=this.parser.splitText(t,1);s="";for(var n=0,o=r.length;n<o;n++)s+=r[n]}return null==e&&null==i||(null==e&&(e=0),null==i&&(i=s.length),s=s.substring(e,i)),s}getPenManager(t,e){if(void 0===t)return this.copyPenManager(e,this.penManager);void 0===e&&(e=this.newPenManager());var i=this.defatultStyle;return this.updatePenManager(t,i.wrapMode,i.wrapWidth,i.lineHeight,e),e}getText(t,e,i,s){if(null==t)return this.penManager.getSliceTagText(e,i,s);var r=this.tmpPenManager,n=this.defatultStyle;return this.updatePenManager(t,n.wrapMode,n.wrapWidth,n.lineHeight,r),r.getSliceTagText(e,i,s)}copyPenManager(t,e){return void 0===e&&(e=this.penManager),e.copy(t)}getTextWidth(t){return void 0===t&&(t=this.penManager),t.getMaxLineWidth()}getLastPen(t){return void 0===t&&(t=this.penManager),t.lastPen}}var oi={setInteractive:Ne};Object.assign(ni.prototype,Te,oi);var hi=ni;const ai=Phaser.Utils.Objects.GetValue;var li,ui=class{constructor(t){this.textureManager=t,this.images={}}add(t,e){if("string"==typeof t)this._add(t,e);else if(Array.isArray(t))for(var i=0,s=(r=t).length;i<s;i++)this._add(r[i]);else{var r=t;for(var t in r)this._add(t,r[t])}return this}_add(t,e){void 0===e&&(e={key:t});var i=e.key,s=e.frame,r=e.width,n=e.height;if(void 0===r||void 0===n){var o=this.textureManager.getFrame(i,s),h=o?o.cutWidth:0,a=o?o.cutHeight:0;void 0===r&&void 0===n?(r=h,n=a):void 0===r?r=h*(n/a):void 0===n&&(n=a*(r/h))}this.images[t]={key:i,frame:s,width:r,height:n,y:ai(e,"y",0),left:ai(e,"left",0),right:ai(e,"right",0)}}remove(t){return this.images.hasOwnProperty(t)&&delete this.images[t],this}get(t){return this.images.hasOwnProperty(t)||this.textureManager.exists(t)&&this.add(t),this.images[t]}getOuterWidth(t){var e=this.get(t);return e?e.width+e.left+e.right:0}getFrame(t){var e=this.get(t);return e?this.textureManager.getFrame(e.key,e.frame):void 0}hasTexture(t){return!!this.getFrame(t)}},ci=function(t){return void 0===li&&(li=new ui(t)),li};const di=Phaser.DOM.AddToDOM,pi=Phaser.Display.Canvas.CanvasPool,fi=Phaser.GameObjects.GameObject,gi=Phaser.Utils.Objects.GetValue,vi=Phaser.DOM.RemoveFromDOM,mi=ge.SPLITREGEXP;var yi={};class xi extends fi{constructor(t,e,i,s,r,n,o){if(void 0===e&&(e=0),void 0===i&&(i=0),super(t,n),this.renderer=t.sys.game.renderer,this.setPosition(e,i),this.setOrigin(0,0),this.initPipeline(),this.canvas=pi.create(this),this.context=this.canvas.getContext("2d"),r&&r.hasOwnProperty("align")){var h=r.align;delete r.align,r.halign=h}this.style=new Ce(this,r),this.autoRound=!0,this._text=void 0,this.padding={left:0,right:0,top:0,bottom:0},this.width=1,this.height=1,this.dirty=!1,0===this.style.resolution&&(this.style.resolution=t.sys.game.config.resolution),this._crop=this.resetCropObject(),this.texture=t.sys.textures.addCanvas(null,this.canvas,!0),this.frame=this.texture.get(),this.frame.source.resolution=this.style.resolution,this.renderer&&this.renderer.gl&&(this.renderer.deleteTexture(this.frame.source.glTexture),this.frame.source.glTexture=null),yi.hasOwnProperty(n)||(yi[n]=new ke),this.canvasText=new hi({parent:this,context:this.context,parser:o,style:this.style,pensPool:yi[n]}),r&&r.padding&&this.setPadding(r.padding),this.setText(s),t.sys.game.events.on("contextrestored",(function(){this.dirty=!0}),this)}set text(t){this.setText(t)}get text(){return this._text}initRTL(){this.style.rtl&&(this.canvas.dir="rtl",this.context.direction="rtl",this.canvas.style.display="none",di(this.canvas,this.scene.sys.canvas),this.originX=1)}setText(t){return t||0===t||(t=""),Array.isArray(t)&&(t=t.join("\n")),t!==this._text&&(this._text=t.toString(),this.updateText()),this}setStyle(t){return this.style.setStyle(t)}setFont(t){return this.style.setFont(t)}setFontFamily(t){return this.style.setFontFamily(t)}setFontSize(t){return this.style.setFontSize(t)}setFontStyle(t){return this.style.setFontStyle(t)}setFixedSize(t,e){return this.style.setFixedSize(t,e)}setBackgroundColor(t){return this.style.setBackgroundColor(t)}setFill(t){return this.style.setFill(t)}setColor(t){return this.style.setColor(t)}setStroke(t,e){return this.style.setStroke(t,e)}setShadow(t,e,i,s,r,n){return this.style.setShadow(t,e,i,s,r,n)}setShadowOffset(t,e){return this.style.setShadowOffset(t,e)}setShadowColor(t){return this.style.setShadowColor(t)}setShadowBlur(t){return this.style.setShadowBlur(t)}setShadowStroke(t){return this.style.setShadowStroke(t)}setShadowFill(t){return this.style.setShadowFill(t)}setWrapMode(t){return this.style.setWrapMode(t)}setWrapWidth(t){return this.style.setWrapWidth(t)}setAlign(t){return this.style.setHAlign(t)}setLineSpacing(t){return this.style.setLineSpacing(t)}setPadding(t,e,i,s){if("object"==typeof t){var r=t,n=gi(r,"x",null);null!==n?(t=n,i=n):(t=gi(r,"left",0),i=gi(r,"right",t));var o=gi(r,"y",null);null!==o?(e=o,s=o):(e=gi(r,"top",0),s=gi(r,"bottom",e))}else void 0===t&&(t=0),void 0===e&&(e=t),void 0===i&&(i=t),void 0===s&&(s=e);return this.padding.left=t,this.padding.top=e,this.padding.right=i,this.padding.bottom=s,this.updateText(!1)}setResolution(t){return this.style.setResolution(t)}setMaxLines(t){return this.style.setMaxLines(t)}updateText(t){void 0===t&&(t=!0);var e=this.canvasText,i=this.style;t&&e.updatePenManager(this._text,i.wrapMode,i.wrapWidth,i.lineHeight);var s,r,n=this.padding;0===i.fixedWidth?(this.width=e.linesWidth+n.left+n.right,s=e.linesWidth):(this.width=i.fixedWidth,(s=this.width-n.left-n.right)<e.linesWidth&&(s=e.linesWidth)),0===i.fixedHeight?(this.height=e.linesHeight+n.top+n.bottom,r=e.linesHeight):(this.height=i.fixedHeight,(r=this.height-n.top-n.bottom)<e.linesHeight&&(r=e.linesHeight));var o=this.width,h=this.height;this.updateDisplayOrigin();var a=i.resolution;o*=a,h*=a,o=Math.max(Math.ceil(o),1),h=Math.max(Math.ceil(h),1);var l=this.canvas,u=this.context;l.width!==o||l.height!==h?(l.width=o,l.height=h,this.frame.setSize(o,h)):u.clearRect(0,0,o,h),u.save(),u.scale(a,a),e.draw(n.left,n.top,s,r),u.restore(),this.renderer.gl&&(this.frame.source.glTexture=this.renderer.canvasToTexture(l,this.frame.source.glTexture,!0),this.frame.glTexture=this.frame.source.glTexture),this.dirty=!0;var c=this.input;return c&&!c.customHitArea&&(c.hitArea.width=this.width,c.hitArea.height=this.height),this}getTextMetrics(){return this.style.getTextMetrics()}toJSON(){var t=bi.ToJSON(this),e={autoRound:this.autoRound,text:this._text,style:this.style.toJSON(),resolution:this.resolution,padding:{left:this.padding.left,right:this.padding.right,top:this.padding.top,bottom:this.padding.bottom}};return t.data=e,t}preDestroy(){this.style.rtl&&vi(this.canvas),pi.remove(this.canvas),this.canvasText.destroy()}setInteractive(t,e,i){return fi.prototype.setInteractive.call(this,t,e,i),this.canvasText.setInteractive(),this}getWrappedText(t,e,i){return(t=this.canvasText.getText(t,e,i,!0)).split(mi)}getPlainText(t,e,i){return this.canvasText.getPlainText(t,e,i)}getText(t,e,i){return this.canvasText.getText(t,e,i,!1)}getSubString(t,e,i){return this.getText(t,e,i)}copyPenManager(t){return this.canvasText.copyPenManager(t)}getPenManager(t,e){return this.canvasText.getPenManager(t,e)}setSize(t,e){return this.setFixedSize(t,e)}resize(t,e){return this.setFixedSize(t,e)}set lineSpacing(t){this.setLineSpacing(t)}get lineSpacing(){return this.style.lineSpacing}get imageManager(){return ci(this.scene.textures)}addImage(t,e){return this.imageManager.add(t,e),this}drawAreaBounds(t,e){return this.canvasText.hitAreaManager.drawBounds(t,e,this),this}}const bi=Phaser.GameObjects.Components;Phaser.Class.mixin(xi,[bi.Alpha,bi.BlendMode,bi.ComputedSize,bi.Crop,bi.Depth,bi.Flip,bi.GetBounds,bi.Mask,bi.Origin,bi.Pipeline,bi.ScrollFactor,bi.Tint,bi.Transform,bi.Visible,ce]);var wi=xi,Ci={plainText:null,prevProp:null},Si=new Ce,Oi={},_i={splitText:function(t,e){for(var i,s,r=[],n=0,o=t.length,h=o;i=ki.exec(t);)s=i[0],n<(h=ki.lastIndex-s.length)&&r.push(t.substring(n,h)),void 0===e&&r.push(s),n=ki.lastIndex;return n<o&&r.push(t.substring(n,o)),r},tagTextToProp:function(t,e){var i,s;null==e&&(e={}),e.img&&Pi(e,Zi,"img"),Mi.test(t)?(Pi(e,Ki,"b",!0),i=""):Ei.test(t)?(Pi(e,Zi,"b"),i=""):ji.test(t)?(Pi(e,Ki,"i",!0),i=""):Ii.test(t)?(Pi(e,Zi,"i"),i=""):zi.test(t)?(s=t.match(zi),Pi(e,Ki,"size",s[1]+"px"),i=""):Di.test(t)?(Pi(e,Zi,"size"),i=""):Ri.test(t)?(s=t.match(Ri),Pi(e,Ki,"color",s[1]),i=""):Bi.test(t)?(Pi(e,Zi,"color"),i=""):Li.test(t)?(s=t.match(Li),Pi(e,Ki,"u",!0),i=""):Yi.test(t)?(s=t.match(Yi),Pi(e,Ki,"u",s[1]),i=""):Ai.test(t)?(Pi(e,Zi,"u"),i=""):Wi.test(t)?(Pi(e,Ki,"shadow",!0),i=""):Fi.test(t)?(Pi(e,Zi,"shadow"),i=""):Hi.test(t)?(Pi(e,Ki,"stroke",!0),i=""):Vi.test(t)?(s=t.match(Vi),Pi(e,Ki,"stroke",s[1]),i=""):Xi.test(t)?(Pi(e,Zi,"stroke"),i=""):Gi.test(t)?(s=t.match(Gi),Pi(e,Ki,"img",s[1]),i=""):Ni.test(t)?(Pi(e,Zi,"img"),i=""):Ui.test(t)?(s=t.match(Ui),Pi(e,Ki,"area",s[1]),i=""):Ji.test(t)?(Pi(e,Zi,"area"),i=""):i=t;var r=Ci;return r.plainText=i,r.prop=e,r},propToContextStyle:function(t,e){var i=Si;if(e.hasOwnProperty("img"))i.image=e.img;else{if(i.image=null,e.hasOwnProperty("family")?i.fontFamily=e.family:i.fontFamily=t.fontFamily,e.hasOwnProperty("size")){var s=e.size;"number"==typeof s&&(s=s.toString()+"px"),i.fontSize=s}else i.fontSize=t.fontSize;i.fontStyle=Ti(e.b,e.i),e.hasOwnProperty("color")?i.color=e.color:i.color=t.color,e.hasOwnProperty("stroke")?!0===e.stroke?(i.stroke=t.stroke,i.strokeThickness=t.strokeThickness):(i.stroke=e.stroke,i.strokeThickness=t.strokeThickness):(i.stroke=t.stroke,i.strokeThickness=0)}return e.hasOwnProperty("shadow")?!0===e.shadow?(i.shadowColor=t.shadowColor,i.shadowOffsetX=t.shadowOffsetX,i.shadowOffsetY=t.shadowOffsetY,i.shadowBlur=t.shadowBlur,i.shadowStroke=!0,i.shadowFill=!0):(i.shadowColor=e.shadow,i.shadowOffsetX=t.shadowOffsetX,i.shadowOffsetY=t.shadowOffsetY,i.shadowBlur=t.shadowBlur,i.shadowStroke=!0,i.shadowFill=!0):(i.shadowColor="#000",i.shadowOffsetX=0,i.shadowOffsetY=0,i.shadowBlur=0,i.shadowStroke=!1,i.shadowFill=!1),e.hasOwnProperty("u")?!0===e.u?(i.underlineColor=t.underlineColor,i.underlineThickness=t.underlineThickness,i.underlineOffset=t.underlineOffset):(i.underlineColor=e.u,i.underlineThickness=t.underlineThickness,i.underlineOffset=t.underlineOffset):(i.underlineColor="#000",i.underlineThickness=0,i.underlineOffset=0),i},propToTagText:function(t,e,i){for(var s in null==i&&(i=Oi),i)e.hasOwnProperty(s)||(t="[/"+s+"]"+t);var r="";for(var s in e)i[s]!==e[s]&&("size"===s?r+="[size="+e[s].replace("px","")+"]":"color"===s||"stroke"===s||"img"===s?r+="["+s+"="+e[s]+"]":"u"===s?!0===e[s]?r+="[u]":r+="[u="+e[s]+"]":r+="["+s+"]");return t=r+t}},Pi=function(t,e,i,s){return e===Ki?t[i]=s:t.hasOwnProperty(i)&&delete t[i],t},Ti=function(t,e){return t&&e?"bold italic":t?"bold":e?"italic":""},ki=/\[b\]|\[\/b\]|\[i\]|\[\/i\]|\[size=(\d+)\]|\[\/size\]|\[color=([a-z]+|#[0-9abcdef]+)\]|\[\/color\]|\[u\]|\[u=([a-z]+|#[0-9abcdef]+)\]|\[\/u\]|\[shadow\]|\[\/shadow\]|\[stroke\]|\[stroke=([a-z]+|#[0-9abcdef]+)\]|\[\/stroke\]|\[img=([^\]]+)\]|\[\/img\]|\[area=([^\]]+)\]|\[\/area\]/gi,Mi=/\[b\]/i,Ei=/\[\/b\]/i,ji=/\[i\]/i,Ii=/\[\/i\]/i,zi=/\[size=(\d+)\]/i,Di=/\[\/size\]/i,Ri=/\[color=([a-z]+|#[0-9abcdef]+)\]/i,Bi=/\[\/color\]/i,Li=/\[u\]/i,Yi=/\[u=([a-z]+|#[0-9abcdef]+)\]/i,Ai=/\[\/u\]/i,Wi=/\[shadow\]/i,Fi=/\[\/shadow\]/i,Hi=/\[stroke\]/i,Vi=/\[stroke=([a-z]+|#[0-9abcdef]+)\]/i,Xi=/\[\/stroke\]/i,Gi=/\[img=([^\]]+)\]/i,Ni=/\[\/img\]/i,Ui=/\[area=([^\]]+)\]/i,Ji=/\[\/area\]/i;const Zi=!1,Ki=!0;var $i=_i;var qi=class extends wi{constructor(t,e,i,s,r){super(t,e,i,s,r,"rexBBCodeText",$i)}};Wt.register("BBCodeText",(function(t,e,i,s){var r=new qi(this.scene,t,e,i,s);return this.scene.add.existing(r),r})),z(window,"RexPlugins.UI.BBCodeText",qi);var Qi={plainText:null,prevProp:null},ts=new Ce;var es=function(t){for(var e,i,s,r={},n=0,o=(t=t.split(";")).length;n<o;n++)if(i=(e=t[n].split(":"))[0],s=e[1],!is(i)&&!is(s)){switch(i){case"stroke":var h=s.split(" ");s={},(l=h.length)>=1&&(s.color=h[0]),l>=2&&(s.thinkness=parseInt(h[1].replace("px","")));break;case"shadow":var a=s.split(" ");s={},(l=a.length)>=1&&(s.color=a[0]),l>=2&&(s.offsetX=parseInt(a[1].replace("px",""))),l>=3&&(s.offsetY=parseInt(a[2].replace("px",""))),l>=4&&(s.blur=parseInt(a[3].replace("px","")));break;case"u":case"underline":var l,u=s.split(" ");s={},(l=u.length)>=1&&(s.color=u[0]),l>=2&&(s.thinkness=parseInt(u[1].replace("px",""))),l>=3&&(s.offset=parseInt(u[2].replace("px","")))}r[i]=s}return r},is=function(t){return 0===(t=t.replace(as,"")).length},ss=/<\s*class=["|']([^"|']+)["|']\s*\>([\s\S]*?)<\s*\/class\s*\>|<\s*style=["|']([^"|']+)["|']\s*\>([\s\S]*?)<\s*\/style\s*\>/g,rs=/<\s*class=/i,ns=/<\s*class=["|']([^"|']+)["|']\s*\>([\s\S]*?)<\s*\/class\s*\>/,os=/<\s*style=/i,hs=/<\s*style=["|']([^"|']+)["|']\s*\>([\s\S]*?)<\s*\/style\s*\>/,as=/^\s+|\s+$/,ls=class{constructor(t){void 0===t&&(t={}),this.tags=t}addTag(t,e){this.tags[t]=e}splitText(t,e){for(var i,s,r,n=[],o=0,h=t.length,a=h;i=ss.exec(t);)s=i[0],o<(a=ss.lastIndex-s.length)&&n.push(t.substring(o,a)),void 0===e?n.push(s):1===e&&(rs.test(s)?(r=s.match(ns),n.push(r[2])):os.test(s)&&(r=s.match(hs),n.push(r[2]))),o=ss.lastIndex;return o<h&&n.push(t.substring(o,h)),n}tagTextToProp(t,e){var i,s;if(rs.test(t)){if(null!=(o=t.match(ns))){var r=o[1],n=this.tags;(s=n.hasOwnProperty(r)?n[r]:{})._class=r,i=o[2]}}else if(os.test(t)){var o;if(null!=(o=t.match(hs))){var h=o[1];(s=es(h))._style=h,i=o[2]}}null==i&&(i=t),null==s&&(s={});var a=Qi;return a.plainText=i,a.prop=s,a}propToContextStyle(t,e){var i=ts;if(e.hasOwnProperty("img"))i.image=e.img;else{if(i.image=null,e.hasOwnProperty("family")||e.hasOwnProperty("fontFamily")||e.hasOwnProperty("font-family")){var s=e.hasOwnProperty("family")?e.family:e.hasOwnProperty("fontFamily")?e.fontFamily:e["font-family"];i.fontFamily=s}else i.fontFamily=t.fontFamily;if(e.hasOwnProperty("size")||e.hasOwnProperty("fontSize")||e.hasOwnProperty("font-size")){var r=e.hasOwnProperty("size")?e.size:e.hasOwnProperty("fontSize")?e.fontSize:e["font-size"];"number"==typeof r&&(r=r.toString()+"px"),i.fontSize=r}else i.fontSize=t.fontSize;if(e.hasOwnProperty("style")||e.hasOwnProperty("fontStyle")||e.hasOwnProperty("font-style")){var n=e.hasOwnProperty("style")?e.style:e.hasOwnProperty("fontStyle")?e.fontStyle:e["font-style"];i.fontStyle=n}else i.fontStyle=t.fontStyle;if(e.hasOwnProperty("color")||e.hasOwnProperty("font-color")){e.hasOwnProperty("color")?e.color:e["font-color"];i.color=e.color}else i.color=t.color;if(e.hasOwnProperty("stroke")){var o=e.stroke;i.stroke=o.hasOwnProperty("color")?o.color:t.stroke,i.strokeThickness=o.hasOwnProperty("thinkness")?o.thinkness:t.strokeThickness}else i.stroke=t.stroke,i.strokeThickness=t.strokeThickness}if(e.hasOwnProperty("shadow")){var h=e.shadow;i.shadowColor=h.hasOwnProperty("color")?h.color:t.shadowColor,i.shadowOffsetX=h.hasOwnProperty("offsetX")?h.offsetX:t.shadowOffsetX,i.shadowOffsetY=h.hasOwnProperty("offsetY")?h.offsetY:t.shadowOffsetY,i.shadowBlur=h.hasOwnProperty("blur")?h.blur:t.shadowBlur,i.shadowStroke=!0,i.shadowFill=!0}else i.shadowColor=t.shadowColor,i.shadowOffsetX=t.shadowOffsetX,i.shadowOffsetY=t.shadowOffsetY,i.shadowBlur=t.shadowBlur,i.shadowStroke=t.shadowStroke,i.shadowFill=t.shadowFill;if(e.hasOwnProperty("u")||e.hasOwnProperty("underline")){var a=e.hasOwnProperty("u")?e.u:e.underline;i.underlineColor=a.hasOwnProperty("color")?a.color:t.underlineColor,i.underlineThickness=a.hasOwnProperty("thinkness")?a.thinkness:t.underlineThickness,i.underlineOffset=a.hasOwnProperty("offset")?a.offset:t.underlineOffset}else i.underlineColor=t.underlineColor,i.underlineThickness=t.underlineThickness,i.underlineOffset=t.underlineOffset;return i}propToTagText(t,e,i){return e.hasOwnProperty("_class")?""===t&&this.isTextTag(e._class)?"":"<class='"+e._class+"'>"+t+"</class>":e.hasOwnProperty("_style")?"<style='"+e._style+"'>"+t+"</style>":void 0}destroy(){this.tags=void 0}isTextTag(t){var e=this.tags[t];return!!e&&null==e.img}};const us=Phaser.Utils.Objects.GetValue;var cs=class extends wi{constructor(t,e,i,s,r){var n=us(r,"tags",void 0),o=new ls(n);super(t,e,i,s,r,"rexTagText",o),this.parser=o}addTag(t,e){return this.parser.addTag(t,e),this.updateText(!0)}addTags(t){for(var e in t)this.parser.addTag(e,t[e]);return this.updateText(!0)}preDestroy(){super.preDestroy(),this.parser.destroy(),this.parser=void 0}};Wt.register("tagText",(function(t,e,i,s){var r=new cs(this.scene,t,e,i,s);return this.scene.add.existing(r),r})),z(window,"RexPlugins.UI.TagText",cs);var ds={add(t){return Array.isArray(t)?this.addMultiple(t):this._add(t),this},addMultiple(t){return t.forEach(this._add,this),this},_add(t){return this.children.add(t),this.resetChildState(t).updateChildVisible(t).updateChildActive(t).updateChildScrollFactor(t).updateChildMask(t),this}},ps={remove(t,e){return this.children.remove(t,!1,e),this},clear(t){return this.children.clear(!1,t),this}},fs={getLocalState:t=>(t.hasOwnProperty("rexContainer")||(t.rexContainer={}),t.rexContainer),resetChildState(t){return this.resetChildPositionState(t).resetChildVisibleState(t).resetChildAlphaState(t).resetChildActiveState(t),this},resetChildrenState(t){for(var e=0,i=t.length;e<i;e++)this.resetChildState(t[e]);return this},syncProperties(){return this.syncPosition().syncVisible().syncAlpha().syncActive().syncScrollFactor().syncMask(),this}};const gs=Phaser.Math.RotateAround;var vs={worldToLocal(t){return t.x-=this.x,t.y-=this.y,gs(t,0,0,-this.rotation),t.x/=this.scaleX,t.y/=this.scaleY,t.x*=this.flipX?-1:1,t.y*=this.flipY?-1:1,t},localToWorld(t){return t.x*=this.flipX?-1:1,t.y*=this.flipY?-1:1,t.x*=this.scaleX,t.y*=this.scaleY,gs(t,0,0,this.rotation),t.x+=this.x,t.y+=this.y,t}},ms=function(t,e){return t===e?1:t/e},ys={updateChildPosition(t){t.isRexContainerLite&&(t.syncChildrenEnable=!1);var e=this.getLocalState(t);return t.x=e.x,t.y=e.y,this.localToWorld(t),t.scaleX=e.scaleX*this.scaleX,t.scaleY=e.scaleY*this.scaleY,void 0!==t.flipX&&(t.flipX=this.flipX?!e.flipX:e.flipX,t.flipY=this.flipY?!e.flipY:e.flipY),t.rotation=e.rotation+this.rotation,t.isRexContainerLite&&(t.syncChildrenEnable=!0,t.syncPosition()),this},syncPosition(){return this.children&&this.syncChildrenEnable&&this.children.getChildren().forEach(this.updateChildPosition,this),this},resetChildPositionState(t){var e=this.getLocalState(t);return e.x=t.x,e.y=t.y,this.worldToLocal(e),e.scaleX=ms(t.scaleX,this.scaleX),e.scaleY=ms(t.scaleY,this.scaleY),void 0!==t.flipX&&(e.flipX=t.flipX,e.flipY=t.flipY),e.rotation=t.rotation-this.rotation,this},setChildPosition(t,e,i){return t.x=e,t.y=i,this.resetChildPositionState(t),this},setChildLocalPosition(t,e,i){var s=this.getLocalState(t);return s.x=e,s.y=i,this.updateChildPosition(t),this}},xs={updateChildVisible(t){return t.visible=this.visible&&this.getLocalState(t).visible,this},syncVisible(){return this.children&&this.syncChildrenEnable&&this.children.getChildren().forEach(this.updateChildVisible,this),this},resetChildVisibleState(t){return this.getLocalState(t).visible=t.visible,this},setChildVisible(t,e){return t.visible=e,this.resetChildVisibleState(t),this},setChildLocalVisible(t,e){return void 0===e&&(e=!0),this.getLocalState(t).visible=e,this.updateChildVisible(t),this}},bs={updateChildAlpha(t){return t.alpha=this.alpha*this.getLocalState(t).alpha,this},syncAlpha(){return this.children&&this.syncChildrenEnable&&this.children.getChildren().forEach(this.updateChildAlpha,this),this},resetChildAlphaState(t){return this.getLocalState(t).alpha=ms(t.alpha,this.alpha),this},setChildAlpha(t,e){return t.alpha=e,this.resetChildAlphaState(t),this._add},setChildLocalAlpha(t,e){return this.getLocalState(t).alpha=e,this.updateChildAlpha(t),this}},ws={updateChildActive(t){return t.active=this.active&&this.getLocalState(t).active,this},syncActive(){return this.children&&this.syncChildrenEnable&&this.children.getChildren().forEach(this.updateChildActive,this),this},resetChildActiveState(t){return this.getLocalState(t).active=t.active,this},setChildActive(t,e){return t.active=e,this.resetChildActiveState(t),this},setChildLocalActive(t,e){return void 0===e&&(e=!0),this.getLocalState(t).active=e,this.updateChildActive(t),this}},Cs={updateChildScrollFactor(t){return t.setScrollFactor(this.scrollFactorX,this.scrollFactorY),this},syncScrollFactor(){return this.children&&this.syncChildrenEnable&&this.children.getChildren().forEach(this.updateChildScrollFactor,this),this}},Ss={updateChildMask(t){return null==this.mask?this:((this.mask.hasOwnProperty("geometryMask")?this.mask.geometryMask:this.mask.bitmapMask)!==t&&(t.mask=this.mask),this)},syncMask(){return this.children&&this.syncChildrenEnable&&this.children.getChildren().forEach(this.updateChildMask,this),this},setMask(t){return this.mask=t,this},clearMask(t){return void 0===t&&(t=!1),t&&this.mask&&this.mask.destroy(),this.mask=null,this}},Os={setDepth(t){if(this.depth=t,this.children)for(var e=this.getAllChildren(),i=0,s=e.length;i<s;i++)e[i].depth=t;return this},swapDepth(t){var e=this.depth,i=t.depth;return this.setDepth(i),t.setDepth(e),this},incDepth(t){if(this.depth+=t,this.children)for(var e=this.getAllChildren(),i=0,s=e.length;i<s;i++)e[i].depth+=t;return this}};const _s=Phaser.Utils.Array;var Ps={getChildren(){return this.children.getChildren()},getAllChildren(t){void 0===t&&(t=[]);for(var e,i=this.children.getChildren(),s=0,r=i.length;s<r;s++)e=i[s],t.push(e),e.hasOwnProperty("isRexContainerLite")&&t.push(...e.getAllChildren());return t},contains(t){if(this.children.contains(t))return!0;for(var e,i=this.children.getChildren(),s=0,r=i.length;s<r;s++)if((e=i[s]).isRexContainerLite&&e.contains(t))return!0;return!1},getByName(t){return _s.GetFirst(this.list,"name",t)},getRandom(t,e){return _s.GetRandom(this.list,t,e)},getFirst(t,e,i,s){return _s.GetFirstElement(this.list,t,e,i,s)},getAll(t,e,i,s){return _s.GetAll(this.list,t,e,i,s)},count(t,e,i,s){return _s.CountAllMatching(this.list,t,e,i,s)},swap(t,e){return _s.Swap(this.list,t,e),this},moveTo(t,e){return _s.MoveTo(this.list,t,e),this},setAll(t,e,i,s){return _s.SetAll(this.list,t,e,i,s),this}};const Ts=Phaser.GameObjects.Zone,ks=Phaser.GameObjects.Components;class Ms extends Ts{constructor(t,e,i,s,r,n){Array.isArray(s)&&(n=s,s=void 0),void 0===s&&(s=1),void 0===r&&(r=1),super(t,e,i,s,r),this.children=t.add.group(),this.type="rexContainerLite",this.isRexContainerLite=!0,this.syncChildrenEnable=!0,this._flipX=!1,this._flipY=!1,this._alpha=1,this._active=!0,this._mask=null,this._scrollFactorX=1,this._scrollFactorY=1,n&&this.add(n)}destroy(t){this.scene&&(this.children.destroy(!t),this.children=void 0,super.destroy(t))}resize(t,e){return this.setSize(t,e),this}get x(){return this._x}set x(t){this._x!==t&&(this._x=t,this.syncPosition())}get y(){return this._y}set y(t){this._y!==t&&(this._y=t,this.syncPosition())}get rotation(){return super.rotation}set rotation(t){this.rotation!==t&&(super.rotation=t,this.syncPosition())}get scaleX(){return super.scaleX}set scaleX(t){this.scaleX!==t&&(super.scaleX=t,this.syncPosition())}get scaleY(){return super.scaleY}set scaleY(t){this.scaleY!==t&&(super.scaleY=t,this.syncPosition())}get flipX(){return this._flipX}set flipX(t){this._flipX!==t&&(this._flipX=t,this.syncPosition())}get flipY(){return this._flipY}set flipY(t){this._flipY!==t&&(this._flipY=t,this.syncPosition())}get visible(){return super.visible}set visible(t){this.visible!==t&&(super.visible=t,this.syncVisible())}get alpha(){return this._alpha}set alpha(t){this._alpha!==t&&(this._alpha=t,this.syncAlpha())}get active(){return this._active}set active(t){this._active!==t&&(this._active=t,this.syncActive())}get mask(){return this._mask}set mask(t){this._mask!==t&&(this._mask=t,this.syncMask())}get scrollFactorX(){return this._scrollFactorX}set scrollFactorX(t){this._scrollFactorX!==t&&(this._scrollFactorX=t,this.syncScrollFactor())}get scrollFactorY(){return this._scrollFactorY}set scrollFactorY(t){this._scrollFactorY!==t&&(this._scrollFactorY=t,this.syncScrollFactor())}get list(){return this.children.getChildren()}}Object.assign(Ms.prototype,ds,ps,fs,vs,ys,xs,bs,Cs,ws,Ss,Os,Ps,ks.Alpha,ks.Flip);var Es=Ms,js=Es;Wt.register("container",(function(t,e,i,s,r){var n=new js(this.scene,t,e,i,s,r);return this.scene.add.existing(n),n})),z(window,"RexPlugins.UI.Container",js);const Is=Phaser.Renderer.WebGL.Utils;var zs={renderWebGL:function(t,e,i,s,r){if(e.dirty&&(e.updateTexture(),e.dirty=!1),0!==e.width&&0!==e.height){var n=e.frame,o=n.width,h=n.height,a=Is.getTintAppendFloatAlpha;this.pipeline.batchTexture(e,n.glTexture,o,h,e.x,e.y,o/e.resolution,h/e.resolution,e.scaleX,e.scaleY,e.rotation,e.flipX,e.flipY,e.scrollFactorX,e.scrollFactorY,e.displayOriginX,e.displayOriginY,0,0,o,h,a(e._tintTL,s.alpha*e._alphaTL),a(e._tintTR,s.alpha*e._alphaTR),a(e._tintBL,s.alpha*e._alphaBL),a(e._tintBR,s.alpha*e._alphaBR),e._isTinted&&e.tintFill,0,0,s,r)}},renderCanvas:function(t,e,i,s,r){0!==e.width&&0!==e.height&&t.batchSprite(e,e.frame,s,r)}};const Ds=Phaser.Display.Color;var Rs={clear(){return this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.dirty=!0,this},fill(t){return this.context.fillStyle=t,this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.dirty=!0,this},getPixel(t,e,i){void 0===i&&(i=new Ds);var s=this.context.getImageData(t,e,1,1);return i.setTo(s.data[0],s.data[1],s.data[2],s.data[3]),i},setPixel(t,e,i,s,r,n){if("number"!=typeof i){var o=i;i=o.red,s=o.green,r=o.blue,n=o.alpha}void 0===n&&(n=0!==i||0!==s||0!==r?255:0);var h=this.context.createImageData(1,1);return h.data[0]=i,h.data[1]=s,h.data[2]=r,h.data[3]=n,this.context.putImageData(h,t,e),this.dirty=!0,this}},Bs={updateTexture(t,e){t&&(e?t.call(e,this.canvas,this.context):t(this.canvas,this.context)),this.canvas.width===this.frame.width&&this.canvas.height===this.frame.height||this.frame.setSize(this.canvas.width,this.canvas.height),this.renderer.gl&&(this.frame.source.glTexture=this.renderer.canvasToTexture(this.canvas,this.frame.source.glTexture,!0),this.frame.glTexture=this.frame.source.glTexture),this.dirty=!1;var i=this.input;return i&&!i.customHitArea&&(i.hitArea.width=this.width,i.hitArea.height=this.height),this},generateTexture(t,e,i,s,r){var n,o=this.canvas,h=this.scene.sys,a=h.game.renderer;void 0===e&&(e=0),void 0===i&&(i=0),void 0===s?s=o.width:s*=this.resolution,void 0===r?r=o.height:r*=this.resolution;var l=(n=h.textures.exists(t)?h.textures.get(t):h.textures.createCanvas(t,s,r)).getSourceImage();l.width!==s&&(l.width=s),l.height!==r&&(l.height=r);var u=l.getContext("2d");return u.clearRect(0,0,s,r),u.drawImage(o,e,i,s,r),a.gl&&n&&a.canvasToTexture(l,n.source[0].glTexture,!0,0),this},loadTexture(t,e){var i=this.scene.textures.getFrame(t,e);return i?(this.width!==i.cutWidth||this.height!==i.cutHeight?this.resize(i.cutWidth,i.cutHeight):this.context.clearRect(0,0,i.cutWidth,i.cutHeight),this.context.drawImage(i.source.image,i.cutX,i.cutY,i.cutWidth,i.cutHeight,0,0,this.canvas.width,this.canvas.height),this.dirty=!0,this):this}};const Ls=Phaser.Display.Canvas.CanvasPool,Ys=Phaser.GameObjects.GameObject;class As extends Ys{constructor(t,e,i,s,r){void 0===e&&(e=0),void 0===i&&(i=0),void 0===s&&(s=1),void 0===r&&(r=1),super(t,"rexCanvas"),this.renderer=t.sys.game.renderer,this.resolution=t.sys.game.config.resolution,this.canvas=Ls.create(this,this.resolution*s,this.resolution*r),this.context=this.canvas.getContext("2d"),this.dirty=!1,this.setPosition(e,i),this.setSize(s,r),this.setOrigin(.5,.5),this.initPipeline(),this._crop=this.resetCropObject(),this.texture=t.sys.textures.addCanvas(null,this.canvas,!0),this.frame=this.texture.get(),this.frame.source.resolution=this.resolution,this.renderer&&this.renderer.gl&&(this.renderer.deleteTexture(this.frame.source.glTexture),this.frame.source.glTexture=null),this.dirty=!0,t.sys.game.events.on("contextrestored",(function(){this.dirty=!0}),this)}getCanvas(t){return t||(this.dirty=!0),this.canvas}needRedraw(){return this.dirty=!0,this}preDestroy(){Ls.remove(this.canvas)}resize(t,e){return this.width===t&&this.height===e?this:(this.setSize(t,e).updateDisplayOrigin(),t*=this.resolution,e*=this.resolution,t=Math.max(Math.ceil(t),1),e=Math.max(Math.ceil(e),1),this.canvas.width=t,this.canvas.height=e,this.dirty=!0,this)}}const Ws=Phaser.GameObjects.Components;Phaser.Class.mixin(As,[Ws.Alpha,Ws.BlendMode,Ws.ComputedSize,Ws.Crop,Ws.Depth,Ws.Flip,Ws.GetBounds,Ws.Mask,Ws.Origin,Ws.Pipeline,Ws.ScrollFactor,Ws.Tint,Ws.Transform,Ws.Visible,zs,Rs,Bs]);var Fs=As,Hs=function(t,e){void 0===e&&(e={}),void 0===e.options&&(e.options={});var i=e.options;i.responsive=!1,i.maintainAspectRatio=!1,i.hasOwnProperty("devicePixelRatio")||(i.devicePixelRatio=1);var s=!1;void 0===i.animation?i.animation={}:!1===i.animation&&(s=!0,i.animation={});var r=i.animation;s&&(r.duration=0);var n=r.onProgress;r.onProgress=function(e){n&&n(e),t.needRedraw()};var o=r.onComplete;return r.onComplete=function(e){o&&o(e),t.needRedraw()},e};class Vs extends Fs{constructor(t,e,i,s,r,n){super(t,e,i,s,r),this.type="rexChart",this.chart=void 0,void 0!==n&&this.setChart(n)}destroy(t){this.scene&&(this.chart&&(this.chart.destroy(),this.chart=void 0),super.destroy(t))}resize(t,e){if(t===this.width&&e===this.height)return this;if(super.resize(t,e),this.chart){var i=this.chart;i.height=this.canvas.height,i.width=this.canvas.width,i.aspectRatio=i.height?i.width/i.height:null,i.update()}return this}}var Xs={setChart:function(t){if(!window.Chart){return console.error("Can not find chartjs! Load chartjs in preload stage.\nscene.load.script('chartjs', 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.min.js');"),this}return this.chart&&this.chart.destroy(),this.chart=new Chart(this.context,Hs(this,t)),this},getChartDataset:function(t){if(void 0!==this.chart){if("string"!=typeof t)return this.chart.data.datasets[t];for(var e,i=this.chart.data.datasets,s=0,r=i.length;s<r;s++)if((e=i[s]).label===t)return e}},getChartData:function(t,e){var i=this.getChartDataset(t);if(void 0!==i){if("string"==typeof e)if(-1===(e=this.chart.data.labels.indexOf(e)))return;return i.data[e]}},setChartData:function(t,e,i){if(void 0===this.chart)return this;var s=this.getChartDataset(t);if("string"==typeof e&&-1===(e=this.chart.data.labels.indexOf(e)))return this;return s.data[e]=i,this},updateChart:function(){if(void 0===this.chart)return this;this.chart.update()}};Object.assign(Vs.prototype,Xs);var Gs=Vs;Wt.register("chart",(function(t,e,i,s,r){var n=new Gs(this.scene,t,e,i,s,r);return this.scene.add.existing(n),n})),z(window,"RexPlugins.UI.Chart",Gs);var Ns=function(t,e){t.width===t.height&&(e=0);var i=Math.floor(t.width/2),s=Math.floor(t.height/2),r=t.getContext("2d");r.save(),r.globalCompositeOperation="destination-in",r.beginPath(),0===e?r.arc(i,s,Math.min(i,s),0,2*Math.PI):r.ellipse(i,s,i,s,0,0,2*Math.PI),r.fill(),r.restore()};const Us=Phaser.Utils.Objects.GetValue;const Js={circle:0,ellipse:1};var Zs=class extends Fs{constructor(t,e,i,s,r,n){super(t,e,i),this.type="rexCircleMaskImage";var o=Us(n,"maskType",0);this.setTexture(s,r,o)}setTexture(t,e,i){return void 0===i?i=0:"string"==typeof i&&(i=Js[i]),this._textureKey=t,this._frameName=e,this.loadTexture(t,e),null!==i&&Ns(this.canvas,i),this.dirty=!0,this}};Wt.register("circleMaskImage",(function(t,e,i,s,r){var n=new Zs(this.scene,t,e,i,s,r);return this.scene.add.existing(n),n})),z(window,"RexPlugins.UI.CircleMaskImage",Zs);var Ks=function(t,e,i){this.textureKey=t,this.columns.data=e,this.columns.count=e?e.length:0,this.columns.stretch=0,this.columns.minWidth=0,this.rows.data=i,this.rows.count=i?i.length:0,this.rows.stretch=0,this.rows.minHeight=0;var s,r,n,o,h=this.scene.textures.get(t);if(!h)return this.clear(),this;if(!e||!i)return this.clear(),this;for(var a=0,l=0,u=0,c=i.length;u<c;u++){"number"==typeof i[u]&&(i[u]={height:i[u],stretch:u%2}),n=(s=i[u]).height,this.rows.stretch+=0|s.stretch,this.rows.minHeight+=s.stretch>0?0:n,a=0;for(var d=0,p=e.length;d<p;d++)"number"==typeof e[d]&&(e[d]={width:e[d],stretch:d%2}),o=(r=e[d]).width,0===u&&(this.columns.stretch+=0|r.stretch,this.columns.minWidth+=r.stretch>0?0:o),o>=1&&n>=1&&this.getFrameNameCallback(d,u)&&h.add(this.getFrameNameCallback(d,u),0,a,l,o,n),a+=o;l+=n}return this.updateTexture(),this},$s=function(){if(this.clear(),void 0===this.textureKey||!this.scene.textures.get(this.textureKey))return this;for(var t,e,i,s,r,n=this.width-this.columns.minWidth,o=this.height-this.rows.minHeight,h=this.columns.stretch>0?n/this.columns.stretch:0,a=this.rows.stretch>0?o/this.rows.stretch:0,l=0,u=0,c=0,d=this.rows.count;c<d;c++){r=0===(i=this.rows.data[c]).stretch?i.height:a*i.stretch,l=0;for(var p=0,f=this.columns.count;p<f;p++){var g;if(s=0===(e=this.columns.data[p]).stretch?e.width:h*e.stretch,t=this.getFrameNameCallback(p,c))if(0===i.stretch&&0===e.stretch)this.drawFrame(this.textureKey,t,l,u);else if(s>0&&r>0)0===this.getStretchMode(p,c)?(void 0===this._image&&(this._image=this.scene.make.image({add:!1,origin:{x:0,y:0}})),(g=this._image).setTexture(this.textureKey,t).setDisplaySize(s,r)):(void 0===this._tileSprite&&(this._tileSprite=this.scene.make.tileSprite({add:!1,origin:{x:0,y:0}})),(g=this._tileSprite).setTexture(this.textureKey,t).setSize(s,r)),this.draw(g,l,u);l+=s}u+=r}};const qs=Phaser.Utils.Objects.IsPlainObject,Qs=Phaser.Utils.Objects.GetValue;var tr=function(t){return"string"==typeof t&&(t=er[t]),t};const er={scale:0,repeat:1};var ir=function(t,e){return 0===t||t===this.columns.count-1||0===e||e===this.rows.count-1},sr={setTexture:Ks,updateTexture:$s,setStretchMode:function(t){return qs(t)?(this.stretchMode.edge=tr(Qs(t,"edge",0)),this.stretchMode.internal=tr(Qs(t,"internal",0))):(t=tr(t),this.stretchMode.edge=t,this.stretchMode.internal=t),this},getStretchMode:function(t,e){return ir.call(this,t,e)?this.stretchMode.edge:this.stretchMode.internal}},rr=function(t,e){return`${t},${e}`};const nr=Phaser.GameObjects.RenderTexture,or=Phaser.Utils.Objects.IsPlainObject,hr=Phaser.Utils.Objects.GetValue;class ar extends nr{constructor(t,e,i,s,r,n,o,h,a){or(e)?(e=hr(a=e,"x",0),i=hr(a,"y",0),s=hr(a,"width",1),r=hr(a,"height",1),n=hr(a,"key",void 0),o=hr(a,"columns",void 0),h=hr(a,"rows",void 0)):or(s)?(s=hr(a=s,"width",1),r=hr(a,"height",1),n=hr(a,"key",void 0),o=hr(a,"columns",void 0),h=hr(a,"rows",void 0)):or(n)&&(n=hr(a=n,"key",void 0),o=hr(a,"columns",void 0),h=hr(a,"rows",void 0)),super(t,e,i,s,r),this.columns={},this.rows={},this.stretchMode={},this._image=void 0,this._tileSprite=void 0,this.setOrigin(.5,.5),this.setGetFrameNameCallback(hr(a,"getFrameNameCallback",void 0)),this.setTexture(n,o,h),this.setStretchMode(hr(a,"stretchMode",0))}preDestroy(){this._image&&(this._image.destroy(),this._image=void 0),this._tileSprite&&(this._tileSprite.destroy(),this._tileSprite=void 0),super.preDestroy()}setGetFrameNameCallback(t){return void 0===t&&(t=rr),this.getFrameNameCallback=t,this}get minWidth(){return this.columns.minWidth}get minHeight(){return this.rows.minHeight}resize(t,e){return this.width===t&&this.height===e?this:(super.resize(t,e),this.updateTexture(),this)}}Object.assign(ar.prototype,sr);var lr=ar;Wt.register("ninePatch",(function(t,e,i,s,r,n,o,h){var a=new lr(this.scene,t,e,i,s,r,n,o,h);return this.scene.add.existing(a),a})),z(window,"RexPlugins.UI.NinePatch",lr);const ur=Phaser.Utils.Objects.GetValue;const cr={id:["id",void 0],width:["width",void 0],height:["height",void 0],autoPlay:["autoplay",!0],controls:["controls",!1],loop:["loop",!1],poster:["poster",void 0],preload:["preload",void 0],muted:["muted",!1],playsInline:["playsInline",!0],crossOrigin:["crossOrigin","anonymous"]},dr={canplay:"canplay",canplaythrough:"canplaythrough",ended:"ended",error:"error",loadstart:"loadstart",playing:"playing",pause:"pause",stalled:"stalled"};var pr=function(t){var e,i,s=document.createElement("video");for(var r in cr)e=cr[r],void 0!==(i=ur(t,r,e[1]))&&(s[e[0]]=i);var n=ur(t,"eventEmitter",void 0);if(n)for(let t in dr)s.addEventListener(dr[t],function(){n.emit(t,this)}.bind(this));return s};const fr=Phaser.Utils.Objects.IsPlainObject;const gr=["webm","ogg","mp4","h264","vp9","hls"];var vr=function(t,e,i){if(fr(e))for(var s,r=0,n=gr.length;r<n;r++)if(i[s=gr[r]]&&e.hasOwnProperty(s)){e=e[s];break}t.src=e,t.load()};const mr=Phaser.Utils.Objects.GetValue,yr=Phaser.Math.Clamp;var xr=function(t){return class extends t{createVideoElement(t){return this.video||(void 0===t&&(t={}),t.eventEmitter=this,this.video=pr(t),this.playbackTimeChangeEventEnable=mr(t,"playbackTimeChangeEventEnable",!0)),this.video}preDestroy(){this.scene&&(this.video&&(this.video.pause(),this.video.removeAttribute("src"),this.video.load(),this.video=void 0),super.preDestroy&&super.preDestroy())}preUpdate(t,e){if(this.playbackTimeChangeEventEnable){var i=this.playbackTime;i!==this.prevT&&this.emit("playbacktimechange",this),this.prevT=i}super.preUpdate&&super.preUpdate(t,e)}get availableVideoTypes(){return this.scene.sys.game.device.video}load(t){return this.video&&vr(this.video,t,this.availableVideoTypes),this}play(){return this.video&&this.video.play(),this}get isPlaying(){if(this.video){var t=this.video;return!t.paused&&!t.ended&&t.currentTime>0}return!1}pause(){return this.video&&this.video.pause(),this}get isPaused(){return!!this.video&&this.video.paused}get playbackTime(){return this.video&&this.video.currentTime||0}set playbackTime(t){if(this.video)try{this.video.currentTime=t}catch(t){}}setPlaybackTime(t){return this.playbackTime=t,this}get duration(){return this.video&&this.video.duration||0}get t(){if(this.video){var t=this.duration;return 0===t?0:this.playbackTime/t}return 0}set t(t){this.video&&(this.playbackTime=this.duration*yr(t,0,1))}setT(t){return this.t=t,this}get hasEnded(){return!!this.video&&this.video.ended}get volume(){return this.video&&this.video.volume||0}set volume(t){this.video&&(this.video.volume=t)}setVolume(t){return this.volume=t,this}get muted(){return this.video&&this.video.muted||!1}set muted(t){this.video&&(this.video.muted=t)}setMute(t){return void 0===t&&(t=!0),this.muted=t,this}get loop(){return!!this.video&&this.video.loop}set loop(t){this.video&&(this.video.loop=t)}setLoop(t){return void 0===t&&(t=!0),this.loop=t,this}get readyState(){return this.video?this.video.readyState:void 0}}};const br=Phaser.GameObjects.DOMElement,wr=Phaser.Utils.Objects.IsPlainObject,Cr=Phaser.Utils.Objects.GetValue;class Sr extends(xr(br)){constructor(t,e,i,s,r,n){wr(e)?(e=Cr(n=e,"x",0),i=Cr(n,"y",0),s=Cr(n,"width",void 0),r=Cr(n,"height",void 0)):wr(s)&&(s=Cr(n=s,"width",void 0),r=Cr(n,"height",void 0)),void 0===n&&(n={});var o=t.scale.autoRound;void 0!==s&&(o&&(s=Math.floor(s)),n.width=s),void 0!==r&&(o&&(r=Math.floor(r)),n.height=r),super(t,e,i),this.type="rexVideo",this.setElement(this.createVideoElement(n)).load(Cr(n,"src",""))}resize(t,e){return this.width===t&&this.height===e?this:(this.node.width=t,this.node.height=e,this.updateSize(),this)}}var Or=Sr;Wt.register("video",(function(t,e,i,s,r){var n=new Or(this.scene,t,e,i,s,r);return this.scene.add.existing(n),n})),z(window,"RexPlugins.UI.Video",Or);var _r=function(t,e){for(var i=document.getElementsByTagName("script"),s=!1,r=0,n=i.length;r<n;r++)if(-1!=i[r].src.indexOf(t)){s=!0;break}if(!s){var o=document.createElement("script");o.type="text/javascript",o.src=t,e&&(o.onload=e),document.getElementsByTagName("head")[0].appendChild(o)}},Pr=!1,Tr=[],kr=function(t){Pr?t():(window.onYouTubeIframeAPIReady||(window.onYouTubeIframeAPIReady=function(){Pr=!0;for(var t=0,e=Tr.length;t<e;t++)Tr[t]();Tr=void 0},_r("https://www.youtube.com/iframe_api")),Tr.push(t))};const Mr=Phaser.GameObjects.DOMElement,Er=Phaser.Utils.Objects.IsPlainObject,jr=Phaser.Utils.Objects.GetValue,Ir=Phaser.Math.Clamp;var zr=class extends Mr{constructor(t,e,i,s,r,n){Er(e)?(e=jr(n=e,"x",0),i=jr(n,"y",0),s=jr(n,"width",void 0),r=jr(n,"height",void 0)):Er(s)&&(s=jr(n=s,"width",void 0),r=jr(n,"height",void 0)),void 0===n&&(n={});var o=t.scale.autoRound;void 0!==s&&(o&&(s=Math.floor(s)),n.width=s+"px"),void 0!==r&&(o&&(r=Math.floor(r)),n.height=r+"px"),super(t,e,i),this.type="rexYoutubePlayer",this.youtubePlayer=void 0,this.videoState=void 0,this.videoId=jr(n,"videoId",""),this.loop=jr(n,"loop",!1),this.paddingCallbacks=[];var h="YT"+Date.now(),a=document.createElement("div");a.id=h,a.style.width=n.width,a.style.height=n.height,this.setElement(a);var l={autoplay:jr(n,"autoPlay",!0)?1:0,controls:jr(n,"controls",!0)?1:0,disablekb:jr(n,"keyboardControl",!0)?0:1,modestbranding:jr(n,"modestBranding",!1)?1:0},u=function(){var t=new YT.Player(h,{videoId:this.videoId,playerVars:l,events:{onStateChange:function(t){this.videoState=t.data,this.emit("statechange",this),this.emit(this.videoStateString,this),this.videoState===YT.PlayerState.ENDED&&this.loop&&this.youtubePlayer.playVideo()}.bind(this),onReady:function(e){this.youtubePlayer=t;for(var i=0,s=this.paddingCallbacks.length;i<s;i++)this.paddingCallbacks[i]();this.paddingCallbacks=void 0,this.emit("ready",this)}.bind(this),onError:function(t){this.lastError=t.data,this.emit("error",this,this.lastError)}.bind(this)}});this.setElement(document.getElementById(h))}.bind(this);kr(u)}_runCallback(t){void 0===this.youtubePlayer?this.paddingCallbacks.push(t):t()}get videoStateString(){if(void 0===this.videoState||!YT)return"";switch(this.videoState){case-1:return"unstarted";case YT.PlayerState.ENDED:return"ended";case YT.PlayerState.PLAYING:return"playing";case YT.PlayerState.PAUSED:return"pause";case YT.PlayerState.BUFFERING:return"buffering";case YT.PlayerState.CUED:return"cued"}}load(t,e){void 0===e&&(e=!0);var i=function(){this.youtubePlayer.loadVideoById(t),e?this.youtubePlayer.playVideo():this.youtubePlayer.pauseVideo()}.bind(this);return this._runCallback(i),this}play(){var t=function(){this.youtubePlayer.playVideo()}.bind(this);return this._runCallback(t),this}get isPlaying(){return 1===this.videoState}pause(){var t=function(){this.youtubePlayer.pauseVideo()}.bind(this);return this._runCallback(t),this}get isPaused(){return 2===this.videoState}get playbackTime(){return this.youtubePlayer?this.youtubePlayer.getCurrentTime():0}set playbackTime(t){var e=function(){this.youtubePlayer.seekTo(t)}.bind(this);this._runCallback(e)}setPlaybackTime(t){return this.playbackTime=t,this}get duration(){return this.youtubePlayer?this.youtubePlayer.getDuration():0}get t(){var t=this.duration;return 0===t?0:this.playbackTime/t}set t(t){var e=function(){t=Ir(t,0,1),this.playbackTime=this.duration*Ir(t,0,1)}.bind(this);this._runCallback(e)}setT(t){return this.t=t,this}get hasEnded(){return 0===this.videoState}get volume(){return this.youtubePlayer?this.youtubePlayer.getVolume()/100:0}set volume(t){var e=function(){this.youtubePlayer.setVolume(Ir(100*t,0,100))}.bind(this);this._runCallback(e)}setVolume(t){return this.volume=t,this}get muted(){return!!this.youtubePlayer&&this.youtubePlayer.isMuted()}set muted(t){var e=function(){t?this.youtubePlayer.mute():this.youtubePlayer.unMute()}.bind(this);this._runCallback(e)}setMute(t){return void 0===t&&(t=!0),this.muted=t,this}setLoop(t){return void 0===t&&(t=!0),this.loop=t,this}resize(t,e){if(this.width===t&&this.height===e)return this;var i=this.node.style;return i.width=t+"px",i.height=e+"px",this.updateSize(),this}};Wt.register("youtubePlayer",(function(t,e,i,s,r){var n=new zr(this.scene,t,e,i,s,r);return this.scene.add.existing(n),n})),z(window,"RexPlugins.UI.YoutubePlayer",zr);var Dr,Rr=function(t){return t.hasOwnProperty("rexSizer")||(t.rexSizer={}),t.rexSizer},Br=function(t,e){void 0===e&&(void 0===Dr&&(Dr=new Phaser.Geom.Rectangle),e=Dr);var i=t.game.config;return e.setTo(0,0,i.width,i.height),e},Lr=function(t){return void 0===t&&(t=Br(this.scene)),this.left=Math.max(this.left,t.left),this.right=Math.min(this.right,t.right),this.top=Math.max(this.top,t.top),this.bottom=Math.min(this.bottom,t.bottom),this},Yr=new Phaser.Geom.Rectangle,Ar=function(t,e){void 0===e&&(e=16777215);for(var i,s=this.getAllChildren([this]),r=0,n=s.length;r<n;r++)(i=s[r]).getBounds&&t.lineStyle(1,e).strokeRectShape(i.getBounds(Yr));return this},Wr=function(t,e){return void 0===this.childrenMap&&(this.childrenMap={}),this.childrenMap[t]=e,this},Fr=function(t,e){var i;for(var s in void 0===e&&(e=[]),t)void 0!==(i=t[s]).name?e.push(i):Fr(i,e);return e};const Hr=/(\S+)\[(\d+)\]/i;var Vr=[],Xr=function(t){if(void 0!==this.childrenMap&&("string"==typeof t&&(t=t.split(".")),0!==t.length)){var e,i=t.shift();if("#"===i.charAt(0)){i=i.substring(1);for(var s=0,r=(n=Fr(this.childrenMap,Vr)).length;s<r;s++)if(n[s].name===i){e=n[s];break}Vr.length=0}else if(-1===i.indexOf("["))e=this.childrenMap[i];else{var n,o=i.match(Hr);if(null!=o)(n=this.childrenMap[o[1]])&&(e=n[o[2]])}return 0===t.length?e:e&&e.childrenMap?e.getElement(t):null}},Gr=function(){return 0},Nr=function(){return 0},Ur=function(t){void 0===t&&(t=[]);for(var e=t.length,i=this.getChildrenSizers(t),s=t.length,r=e;r<s;r++)i[r].getAllChildrenSizers(t);return t},Jr=function(t){return void 0===t&&(t=[]),t},Zr=function(t,e,i){},Kr=function(t){if(!t)for(var e,i=this.getAllChildrenSizers([this]),s=0,r=i.length;s<r;s++)(e=i[s]).rexSizer&&e._layoutInit()},$r=function(){};const qr=Phaser.Utils.Objects.GetValue,Qr=Phaser.Utils.Objects.GetAdvancedValue;class tn{constructor(t,e){this.gameObject=t,this.scene=f(t),this.scaleStart={},this.scaleEnd={},this.tween=void 0,this.resetFromJSON(e),this.boot()}resetFromJSON(t){return this.setMode(qr(t,"mode",0)),this.setScaleRange(Qr(t,"start",void 0),Qr(t,"end",0)),this.setDelay(Qr(t,"delay",0)),this.setDuration(Qr(t,"duration",1e3)),this.setEase(qr(t,"ease",void 0)),this}toJSON(){return{mode:this.mode,start:this.scaleStart,end:this.scaleEnd,delay:this.delay,duration:this.duration}}boot(){this.gameObject.once&&this.gameObject.once("destroy",this.destroy,this)}shutdown(){return this.stop(),this.gameObject=void 0,this.scene=void 0,this}destroy(){return this.shutdown(),this}setMode(t){return"string"==typeof t&&(t=en[t]),this.mode=t,this}setScaleRange(t,e){return"number"==typeof t?(this.scaleStart.x=t,this.scaleStart.y=t):(this.scaleStart.x=qr(t,"x",this.gameObject.scaleX),this.scaleStart.y=qr(t,"y",this.gameObject.scaleY)),"number"==typeof e?(this.scaleEnd.x=e,this.scaleEnd.y=e):(this.scaleEnd.x=qr(e,"x",this.scaleStart.x),this.scaleEnd.y=qr(e,"y",this.scaleStart.y)),this}setDelay(t){return this.delay=t,this}setDuration(t){return this.duration=t,this}setEase(t){return void 0===t&&(t="Linear"),this.ease=t,this}start(){return this.tween?this:0===this.duration?(this.sound.setScale(this.scaleEnd.x,this.scaleEnd.y),this.complete(),this):(this.gameObject.setScale(this.scaleStart.x,this.scaleStart.y),this.tween=this.scene.tweens.add({targets:this.gameObject,scaleX:this.scaleEnd.x,scaleY:this.scaleEnd.y,duration:this.duration,ease:this.ease,yoyo:2==this.mode,repeat:2==this.mode?-1:0,onComplete:this.complete,onCompleteScope:this}),this.setEventEmitter(this.tween),this)}restart(){return this.stop().start(),this}stop(){return this.tween?(this.setEventEmitter(!1),this.tween.remove(),this.tween=void 0,this):this}complete(){return this.stop(),1===this.mode&&this.gameObject.destroy(),this}}Object.assign(tn.prototype,h);const en={stop:0,destroy:1,yoyo:2};var sn=tn,rn={},nn=function(t,e,i,s,r){switch(rn.mode=0,i){case"x":rn.start={x:0};break;case"y":rn.start={y:0};break;default:rn.start=0}return rn.end=1,rn.duration=e,rn.ease=void 0===s?"Cubic":s,void 0===r?r=new sn(t,rn):r.resetFromJSON(rn),r.restart(),r};const on=Phaser.Utils.Objects.IsPlainObject,hn=Phaser.Utils.Objects.GetValue;var an={},ln=function(t,e,i,s,r,n){switch(r instanceof sn&&(n=r,r=void 0),void 0===r&&(r=!0),an.mode=r?1:0,i){case"x":an.end={x:0};break;case"y":an.end={y:0};break;default:an.end=0}return an.duration=e,an.ease=void 0===s?"Linear":s,void 0===n?n=new sn(t,an):n.resetFromJSON(an),n.restart(),n};const un=Phaser.Utils.Objects.IsPlainObject,cn=Phaser.Utils.Objects.GetValue;const dn=Phaser.Utils.Objects.GetValue,pn=Phaser.Utils.Objects.GetAdvancedValue;class fn{constructor(t,e){this.gameObject=t,this.scene=f(t),this.alphaStart=void 0,this.alphaEnd=void 0,this.tween=void 0,this.resetFromJSON(e),this.boot()}resetFromJSON(t){return this.setMode(dn(t,"mode",0)),this.setAlphaRange(pn(t,"start",this.gameObject.alpha),pn(t,"end",0)),this.setDelay(pn(t,"delay",0)),this.setDuration(pn(t,"duration",1e3)),this}toJSON(){return{mode:this.mode,start:this.alphaStart,end:this.alphaEnd,delay:this.delay,duration:this.duration}}boot(){this.gameObject.once&&this.gameObject.once("destroy",this.destroy,this)}shutdown(){return this.stop(),this.gameObject=void 0,this.scene=void 0,this}destroy(){return this.shutdown(),this}setMode(t){return"string"==typeof t&&(t=gn[t]),this.mode=t,this}setAlphaRange(t,e){return this.alphaStart=t,this.alphaEnd=e,this}setDelay(t){return this.delay=t,this}setDuration(t){return this.duration=t,this}start(){return this.tween?this:0===this.duration?(this.gameObject.setAlpha(this.alphaEnd),this.complete(),this):(this.gameObject.setAlpha(this.alphaStart),this.tween=this.scene.tweens.add({targets:this.gameObject,alpha:this.alphaEnd,delay:this.delay,duration:this.duration,ease:"Linear",yoyo:2==this.mode,repeat:2==this.mode?-1:0,onComplete:this.complete,onCompleteScope:this}),this.setEventEmitter(this.tween),this)}restart(){return this.stop().start(),this}stop(){return this.tween?(this.setEventEmitter(!1),this.tween.remove(),this.tween=void 0,this):this}complete(){return this.stop(),1===this.mode&&this.gameObject.destroy(),this}}Object.assign(fn.prototype,h);const gn={stop:0,destroy:1,yoyo:2};var vn=fn,mn={},yn=function(t,e,i,s){return void 0===i&&(i=t.alpha),mn.mode=0,mn.start=0,mn.end=i,mn.duration=e,void 0===s?s=new vn(t,mn):s.resetFromJSON(mn),s.restart(),s};const xn=Phaser.Utils.Objects.IsPlainObject,bn=Phaser.Utils.Objects.GetValue;var wn={},Cn=function(t,e,i,s){return i instanceof vn&&(s=i,i=void 0),void 0===i&&(i=!0),wn.mode=i?1:0,wn.end=0,wn.duration=e,void 0===s?s=new vn(t,wn):s.resetFromJSON(wn),s.restart(),s};const Sn=Phaser.Utils.Objects.IsPlainObject,On=Phaser.Utils.Objects.GetValue;var _n=void 0,Pn=function(t){if(void 0===_n&&(_n=new Phaser.Geom.Rectangle),this.getBounds(_n),void 0!==t)return _n.contains(t.x,t.y);for(var e=this.scene.input.manager,i=e.pointersTotal,s=e.pointers,r=0;r<i;r++)if(t=s[r],_n.contains(t.x,t.y))return!0;return!1},Tn=function(t){void 0===t&&(t=this);for(var e=Rr(t).parent;e;)e=Rr(t=e).parent;return t},kn=function(t,e,i){!t||void 0===e&&void 0===i||(t.resize?(void 0===e&&(e=t.width),void 0===i&&(i=t.height),t.resize(e,i)):(void 0!==e&&(t.displayWidth=e),void 0!==i&&(t.displayHeight=i)))},Mn=new Phaser.GameObjects.Zone({sys:{queueDepthSort:ee,events:{once:ee}}},0,0,1,1);Mn.setOrigin(0);var En=Mn;const jn=Phaser.Display.Align.In.QuickSet,In=Phaser.Display.Align.CENTER;var zn=function(t,e,i){var s=this.getTopmostSizer();s.x+=e-this.x,s.y+=i-this.y},Dn={getSizerConfig:Rr,pushIntoBounds:Lr,drawBounds:Ar,getChildrenWidth:Gr,getChildrenHeight:Nr,addChildrenMap:Wr,addElement:Wr,getElement:Xr,getAllChildrenSizers:Ur,getChildrenSizers:Jr,layout:Zr,layoutBackgrounds:function(){if(void 0!==this.backgroundChildren)for(var t,e=this.backgroundChildren,i=this.left,s=this.top,r=this.width,n=this.height,o=0,h=e.length;o<h;o++)(t=e[o]).rexSizer.hidden||(kn(t,r,n),En.setPosition(i,s).setSize(r,n),jn(t,En,In),this.resetChildPositionState(t))},layoutInit:Kr,_layoutInit:$r,popUp:function(t,e,i){if(on(t)){var s=t;t=hn(s,"duration",void 0),e=hn(s,"orientation",void 0),i=hn(s,"ease",void 0)}return this._scale=nn(this,t,e,i,this._scale),this},scaleDownDestroy:function(t,e,i,s){if(un(t)){var r=t;t=cn(r,"duration",void 0),e=cn(r,"orientation",void 0),i=cn(r,"ease",void 0),s=cn(r,"destroy",void 0)}return this._scale=ln(this,t,e,i,s,this._scale),this},fadeIn:function(t){xn(t)&&(t=bn(t,"duration",void 0));return this._fade=yn(this,t,this._fade),this},fadeOutDestroy:function(t,e){if(Sn(t)){var i=t;t=On(i,"duration",void 0),e=On(i,"destroy",void 0)}return this._fade=Cn(this,t,e,this._fade),this},isInTouching:Pn,getTopmostSizer:Tn,setDraggable:function(t){return void 0===t&&(t=!0),this.input&&this.input.hasOwnProperty("draggable")?this.input.draggable=t:t&&(this.setInteractive(),this.scene.input.setDraggable(this),this.on("drag",zn,this)),this}};const Rn=Phaser.Geom.Rectangle;var Bn=function(t,e){void 0===e&&(e=new Rn);var i=t.canvasBounds,s=t.displayScale,r=t.autoCenter;return e.x=i.x>=0?0:-i.x*s.x,e.y=i.y>=0?0:-i.y*s.y,e.width=i.width*s.x-e.x,e.height=i.height*s.y-e.y,1!==r&&2!==r||(e.width-=e.x),1!==r&&3!==r||(e.height-=e.y),e};const Ln=Phaser.Utils.Objects.GetValue,Yn=Phaser.Geom.Rectangle;var An=class{constructor(t,e){this.gameObject=t,this.viewport=new Yn,this.resetFromJSON(e),this.boot()}resetFromJSON(t){var e,i;if("string"==typeof t){var s=t.split(",");e=s[0],i=s[1]}else e=Ln(t,"x","0%+0"),i=Ln(t,"y","0%+0");e=e.replace("left","0%").replace("right","100%").replace("center","50%").split("%");var r=parseFloat(e[0])/100,n=""===e[1]?0:parseFloat(e[1]);i=i.replace("top","0%").replace("bottom","100%").replace("center","50%").split("%");var o=parseFloat(i[0])/100,h=""===i[1]?0:parseFloat(i[1]);return this.setPercentage(r,o),this.setOffset(n,h),this}boot(){this.scaleManamger.on("resize",this.onResize,this),this.gameObject.once("destroy",this.destroy,this),this.onResize()}shutdown(){this.scaleManamger.off("resize",this.onResize,this),this.gameObject=void 0}destroy(){this.shutdown()}setOffset(t,e){return void 0===t&&(t=0),void 0===e&&(e=t),this.offsetX=t,this.offsetY=e,this}setPercentage(t,e){return void 0===t&&(t=0),void 0===e&&(e=t),this.percentageX=t,this.percentageY=e,this}onResize(){Bn(this.scaleManamger,this.viewport),this.updatePosition()}updatePosition(){return this.gameObject.setPosition(this.x,this.y),this}get scaleManamger(){return this.gameObject.scene.scale}get x(){return this.viewport.x+this.viewport.width*this.percentageX+this.offsetX}get y(){return this.viewport.y+this.viewport.height*this.percentageY+this.offsetY}};const Wn=Phaser.Utils.Objects.GetValue;class Fn extends js{constructor(t,e,i,s,r,n){var o,h;"string"==typeof e&&(o=e,h=i,e=0,i=0),super(t,e,i,2,2),this.isRexSizer=!0,this.setMinSize(s,r),this.setName(Wn(n,"name","")),this.rexSizer={},this.backgroundChildren=void 0,void 0!==o&&(this._anchor=new An(this,{x:o,y:h})),this.setDraggable(Wn(n,"draggable",!1))}destroy(t){this.scene&&(void 0!==this.backgroundChildren&&(this.backgroundChildren.length=0),super.destroy(t))}setMinSize(t,e){return this.setMinWidth(t).setMinHeight(e),this}setMinWidth(t){return null==t&&(t=0),this.minWidth=t,this}setMinHeight(t){return null==t&&(t=0),this.minHeight=t,this}get childrenWidth(){return void 0===this._childrenWidth&&(this._childrenWidth=this.getChildrenWidth()),this._childrenWidth}get childrenHeight(){return void 0===this._childrenHeight&&(this._childrenHeight=this.getChildrenHeight()),this._childrenHeight}get left(){return this.x-this.displayWidth*this.originX}set left(t){this.x+=t-this.left}alignLeft(t){return this.left=t,this}get right(){return this.x-this.displayWidth*this.originX+this.displayWidth}set right(t){this.x+=t-this.right}alignRight(t){return this.right=t,this}get centerX(){return(this.left+this.right)/2}set centerX(t){this.x+=t-this.centerX}alignCenterX(t){return this.centerX=t,this}get top(){return this.y-this.displayHeight*this.originY}set top(t){this.y+=t-this.top}alignTop(t){return this.top=t,this}get bottom(){return this.y-this.displayHeight*this.originY+this.displayHeight}set bottom(t){this.y+=t-this.bottom}alignBottom(t){return this.bottom=t,this}get centerY(){return(this.top+this.bottom)/2}set centerY(t){this.y+=t-this.centerY}alignCenterY(t){return this.centerY=t,this}pin(t){return super.add(t),this}addBackground(t){return void 0===this.backgroundChildren&&(this.backgroundChildren=[]),super.add(t),this.getSizerConfig(t).parent=this,this.backgroundChildren.push(t),this}}Object.assign(Fn.prototype,Dn);var Hn=Fn,Vn=function(t){if(this.rexSizer.hidden)return 0;void 0===t&&(t=!0);var e,i,s,r=0,n=this.sizerChildren;if(0===this.orientation)for(var o=0,h=n.length;o<h;o++)(e=n[o]).rexSizer.hidden||(s=0===e.rexSizer.proportion||t&&e.rexSizer.proportion>0?e.isRexSizer?Math.max(e.minWidth,e.childrenWidth):e.width:0,r+=s+=(i=e.rexSizer.padding).left+i.right);else for(o=0,h=n.length;o<h;o++)(e=n[o]).hasOwnProperty("rexSizer")&&(e.rexSizer.hidden||(s=e.isRexSizer?Math.max(e.minWidth,e.childrenWidth):e.width,s+=(i=e.rexSizer.padding).left+i.right,r=Math.max(s,r)));return r},Xn=function(t){if(this.rexSizer.hidden)return 0;void 0===t&&(t=!0);var e,i,s,r=0,n=this.sizerChildren;if(0===this.orientation)for(var o=0,h=n.length;o<h;o++)(e=n[o]).rexSizer.hidden||(s=e.isRexSizer?Math.max(e.minHeight,e.childrenHeight):e.height,s+=(i=e.rexSizer.padding).top+i.bottom,r=Math.max(s,r));else for(o=0,h=n.length;o<h;o++)(e=n[o]).hasOwnProperty("rexSizer")&&(e.rexSizer.hidden||(s=0===e.rexSizer.proportion||t&&e.rexSizer.proportion>0?e.isRexSizer?Math.max(e.minHeight,e.childrenHeight):e.height:0,r+=s+=(i=e.rexSizer.padding).top+i.bottom));return r},Gn=function(){for(var t,e,i=0,s=this.sizerChildren,r=0,n=s.length;r<n;r++)(t=s[r]).rexSizer.hidden||(e=t.rexSizer.proportion)>0&&(i+=e);return i},Nn=function(t){void 0===t&&(t=[]);for(var e,i=this.sizerChildren,s=0,r=i.length;s<r;s++)(e=i[s]).isRexSizer&&t.push(e);return t},Un=function(t,e){var i,s=e.rexSizer,r=s.padding;return 0===t.orientation?s.proportion>0&&t.proportionLength>0&&(i=s.proportion*t.proportionLength):s.expand&&(i=t.width-r.left-r.right),i},Jn=function(t,e){var i,s=e.rexSizer,r=s.padding;return 0===t.orientation?s.expand&&(i=t.height-r.top-r.bottom):s.proportion>0&&t.proportionLength>0&&(i=s.proportion*t.proportionLength),i};const Zn=Phaser.Display.Align.In.QuickSet;var Kn={getChildrenWidth:Vn,getChildrenHeight:Xn,getChildrenProportion:Gn,getChildrenSizers:Nn,layout:function(t,e,i){if(this.rexSizer.hidden)return this;var s;if(this.layoutInit(t),void 0===e&&(e=Math.max(this.childrenWidth,this.minWidth)),void 0===i&&(i=Math.max(this.childrenHeight,this.minHeight)),this.resize(e,i),this.childrenProportion>0){var r=0===this.orientation?this.width-this.childrenWidth:this.height-this.childrenHeight;s=r>0?(r=0===this.orientation?this.width-this.getChildrenWidth(!1):this.height-this.getChildrenHeight(!1))/this.childrenProportion:0}else s=0;this.proportionLength=s;for(var n,o,h,a,l,u,c,d,p,f=this.sizerChildren,g=this.left,v=this.top,m=0,y=f.length;m<y;m++)(n=f[m]).rexSizer.hidden||(h=(o=n.rexSizer).padding,d=Un(this,n),p=Jn(this,n),n.isRexSizer?n.layout(this,d,p):kn(n,d,p),void 0===d&&(d=n.width),void 0===p&&(p=n.height),0===this.orientation?(a=g+h.left,u=0===o.proportion||0===s?d:o.proportion*s,l=v+h.top,c=this.height-h.top-h.bottom):(a=g+h.left,u=this.width-h.left-h.right,l=v+h.top,c=0===o.proportion||0===s?p:o.proportion*s),En.setPosition(a,l).setSize(u,c),Zn(n,En,o.align),this.resetChildPositionState(n),0===this.orientation?g+=u+h.left+h.right:v+=c+h.top+h.bottom);return this.layoutBackgrounds(),this},_layoutInit:function(){this._childrenWidth=void 0,this._childrenHeight=void 0,this._childrenProportion=void 0}};const $n=Phaser.Utils.Objects.GetValue;var qn=function(t,e){return void 0===e&&(e={}),"number"==typeof t?(e.left=t,e.right=t,e.top=t,e.bottom=t):(e.left=$n(t,"left",0),e.right=$n(t,"right",0),e.top=$n(t,"top",0),e.bottom=$n(t,"bottom",0)),e},Qn={x:0,h:0,horizontal:0,"left-to-right":0,y:1,v:1,vertical:1,"top-to-bottom":1};const to=Phaser.Display.Align;var eo={center:to.CENTER,left:to.LEFT_CENTER,right:to.RIGHT_CENTER,top:to.TOP_CENTER,bottom:to.BOTTOM_CENTER,"left-top":to.TOP_LEFT,"left-center":to.LEFT_CENTER,"left-bottom":to.LEFT_BOTTOM,"center-top":to.TOP_CENTER,"center-center":to.CENTER,"center-bottom":to.BOTTOM_CENTER,"right-top":to.TOP_RIGHT,"right-center":to.RIGHT_CENTER,"right-bottom":to.RIGHT_BOTTOM};const io=Phaser.Utils.Objects.IsPlainObject,so=Phaser.Utils.Objects.GetValue,ro=Phaser.Utils.Array.Remove,no=Phaser.Display.Align.CENTER;class oo extends Hn{constructor(t,e,i,s,r,n){var o;io(e)?(e=so(o=e,"x",0),i=so(o,"y",0),s=so(o,"width",void 0),r=so(o,"height",void 0)):io(s)?(s=so(o=s,"width",void 0),r=so(o,"height",void 0)):io(n)&&(o=n),void 0!==o&&(n=so(o,"orientation",0)),void 0===n&&(n=0),super(t,e,i,s,r,o),this.type="rexSizer",this.sizerChildren=[],this.setOrientation(n)}destroy(t){this.scene&&(this.sizerChildren.length=0,super.destroy(t))}setOrientation(t){return"string"==typeof t&&(t=Qn[t]),this.orientation=t,this}add(t,e,i,s,r){super.add(t);var n=typeof e;if(null===e)return this;if("number"===n);else if("string"===n)e=ho[e];else if(io(e)){var o;e=so(o=e,"proportion",0),i=so(o,"align",no),s=so(o,"padding",0),r=so(o,"expand",!1)}return"string"==typeof i&&(i=eo[i]),void 0===e&&(e=0),void 0===i&&(i=no),void 0===s&&(s=0),void 0===r&&(r=!1),(o=this.getSizerConfig(t)).parent=this,o.proportion=e,o.align=i,o.padding=qn(s),o.expand=r,this.sizerChildren.push(t),this}insert(t,e,i,s,r,n){return this.add(e,i,s,r,n),this.moveTo(e,t),this}remove(t){var e=this.getSizerConfig(t);return e.parent!==this?this:(e.parent=void 0,ro(this.sizerChildren,t),super.remove(t),this)}clear(t){for(var e=0,i=this.sizerChildren.length;e<i;e++)this.getSizerConfig(this.sizerChildren[e]).parent=void 0;return this.sizerChildren.length=0,super.clear(t),this}get childrenProportion(){return void 0===this._childrenProportion&&(this._childrenProportion=this.getChildrenProportion()),this._childrenProportion}}Object.assign(oo.prototype,Kn);const ho={min:0,full:-1};var ao=oo;Wt.register("sizer",(function(t,e,i,s,r){var n=new ao(this.scene,t,e,i,s,r);return this.scene.add.existing(n),n})),z(window,"RexPlugins.UI.Sizer",ao);var lo=function(){if(this.rexSizer.hidden)return 0;for(var t,e,i,s,r,n=0,o=this.gridChildren,h=0;h<this.columnCount;h++){if(t=0,void 0===(r=this.columnProportions[h])||0===r){for(var a=0;a<this.rowCount;a++)(e=o[a*this.columnCount+h])&&(e.rexSizer.hidden||(s=e.isRexSizer?Math.max(e.minWidth,e.childrenWidth):e.width,s+=(i=e.rexSizer.padding).left+i.right,t=Math.max(t,s)));n+=t}this.columnWidth[h]=t}return n},uo=function(){if(this.rexSizer.hidden)return 0;for(var t,e,i,s,r,n=0,o=this.gridChildren,h=0;h<this.rowCount;h++){if(t=0,void 0===(r=this.rowProportions[h])||0===r){for(var a=0;a<this.columnCount;a++)(e=o[h*this.columnCount+a])&&(e.rexSizer.hidden||(s=e.isRexSizer?Math.max(e.minHeight,e.childrenHeight):e.height,s+=(i=e.rexSizer.padding).top+i.bottom,t=Math.max(t,s)));n+=t}this.rowHeight[h]=t}return n},co=function(t){void 0===t&&(t=[]);for(var e,i=this.gridChildren,s=0,r=i.length;s<r;s++)(e=i[s])&&e.isRexSizer&&t.push(e);return t},po=function(t,e){var i,s=t.rexSizer;if(s.expand){var r=s.padding;i=e-r.left-r.right}return i},fo=function(t,e){var i,s=t.rexSizer;if(s.expand){var r=s.padding;i=e-r.top-r.bottom}return i};const go=Phaser.Display.Align.In.QuickSet;var vo={getChildrenWidth:lo,getChildrenHeight:uo,getChildrenSizers:co,layout:function(t,e,i){if(this.rexSizer.hidden)return this;this.layoutInit(t);var s,r,n,o,h=this.totalColumnProportions,a=this.totalRowProportions;if(void 0===e)if(t&&h>0){var l=this.rexSizer.padding;e=t.width-l.left-l.right}else e=Math.max(this.childrenWidth,this.minWidth);if(void 0===i)if(t&&a>0){var l=this.rexSizer.padding;i=t.height-l.top-l.bottom}else i=Math.max(this.childrenHeight,this.minHeight);this.resize(e,i),s=h>0?(this.width-this.childrenWidth)/h:0,r=a>0?(this.height-this.childrenHeight)/a:0;for(var u,c,d,p,f,g,v,m,y,x,b=this.left,w=b,C=this.top,S=0;S<this.rowCount;S++){x=0===(m=this.rowProportions[S]||0)?this.rowHeight[S]:m*r,w=b;for(var O=0;O<this.columnCount;O++)y=0===(v=this.columnProportions[O]||0)?this.columnWidth[O]:v*s,(n=this.gridChildren[S*this.columnCount+O])&&!n.rexSizer.hidden?(f=po(n,y),g=fo(n,x),n.isRexSizer?n.layout(this,f,g):kn(n,f,g),u=w+(l=(o=n.rexSizer).padding).left,d=y-l.left-l.right,c=C+l.top,p=x-l.top-l.bottom,En.setPosition(u,c).setSize(d,p),go(n,En,o.align),this.resetChildPositionState(n),w+=y):w+=y;C+=x}return this.layoutBackgrounds(),this},_layoutInit:function(){this._childrenWidth=void 0,this._childrenHeight=void 0}};const mo=Phaser.Utils.Objects.IsPlainObject,yo=Phaser.Utils.Objects.GetValue,xo=Phaser.Utils.Array.Remove,bo=Phaser.Display.Align.CENTER;class wo extends Hn{constructor(t,e,i,s,r,n,o,h,a){var l;mo(e)?(e=yo(l=e,"x",0),i=yo(l,"y",0),s=yo(l,"width",void 0),r=yo(l,"height",void 0),n=yo(l,"column",0),o=yo(l,"row",0),h=yo(l,"columnProportions",void 0),a=yo(l,"rowProportions",void 0)):mo(s)?(s=yo(l=s,"width",void 0),r=yo(l,"height",void 0),n=yo(l,"column",0),o=yo(l,"row",0),h=yo(l,"columnProportions",void 0),a=yo(l,"rowProportions",void 0)):mo(n)?(n=yo(l=n,"column",0),o=yo(l,"row",0),h=yo(l,"columnProportions",void 0),a=yo(l,"rowProportions",void 0)):mo(h)&&(h=yo(l=h,"columnProportions",void 0),a=yo(l,"rowProportions",void 0)),super(t,e,i,s,r,l),this.type="rexGridSizer",this.initialGrid(n,o,h,a)}destroy(t){this.scene&&(this.gridChildren.length=0,super.destroy(t))}setColumnProportion(t,e){return t>=this.columnProportions.length?this:(this.columnProportions[t]=e,this)}setRowProportion(t,e){return t>=this.rowProportions.length?this:(this.rowProportions[t]=e,this)}add(t,e,i,s,r,n){var o;(super.add(t),mo(e))&&(e=yo(o=e,"column",0),i=yo(o,"row",0),s=yo(o,"align",bo),r=yo(o,"padding",0),n=yo(o,"expand",!1));return"string"==typeof s&&(s=eo[s]),void 0===s&&(s=bo),void 0===r&&(r=0),void 0===n&&(n=!0),(o=this.getSizerConfig(t)).parent=this,o.align=s,o.padding=qn(r),o.expand=n,this.gridChildren[i*this.columnCount+e]=t,this}remove(t){var e=this.getSizerConfig(t);return e.parent!==this?this:(e.parent=void 0,xo(this.gridChildren,t),void 0!==this.backgroundChildren&&xo(this.backgroundChildren,t),super.remove(t),this)}get totalColumnProportions(){for(var t,e=0,i=0;i<this.columnCount;i++)(t=this.columnProportions[i])>0&&(e+=t);return e}get totalRowProportions(){for(var t,e=0,i=0;i<this.rowCount;i++)(t=this.rowProportions[i])>0&&(e+=t);return e}initialGrid(t,e,i,s){if(this.columnCount=t,this.rowCount=e,this.gridChildren=[],this.gridChildren.length=t*e,this.columnProportions=[],this.columnProportions.length=t,this.columnWidth=[],this.columnWidth.length=t,this.rowProportions=[],this.rowProportions.length=e,this.rowHeight=[],this.rowHeight.length=e,i)for(var r="number"==typeof i,n=0;n<t;n++)if(r)this.setColumnProportion(n,i);else{var o=i[n];o>0&&this.setColumnProportion(n,o)}if(s){var h="number"==typeof s;for(n=0;n<e;n++)if(h)this.setRowProportion(n,s);else{var a=s[n];a>0&&this.setRowProportion(n,a)}}return this}}Object.assign(wo.prototype,vo);var Co=wo;Wt.register("gridSizer",(function(t,e,i,s,r,n,o,h){var a=new Co(this.scene,t,e,i,s,r,n,o,h);return this.scene.add.existing(a),a})),z(window,"RexPlugins.UI.GridSizer",Co);var So=function(){return this.rexSizer.hidden?0:(t=0===this.orientation?this.maxChildWidth:0,t=Math.max(t,this.minWidth));var t},Oo=function(){return this.rexSizer.hidden?0:(t=0===this.orientation?0:this.maxChildHeight,t=Math.max(t,this.minHeight));var t},_o=function(t){void 0===t&&(t=[]);for(var e,i=this.sizerChildren,s=0,r=i.length;s<r;s++)"\n"!==(e=i[s])&&e.isRexSizer&&t.push(e);return t},Po=function(t){var e=t.rexSizer.padding;return t.width+e.left+e.right},To=function(t){var e=t.rexSizer.padding;return t.height+e.top+e.bottom},ko=function(t,e){return 0===e?Po(t):To(t)},Mo=function(t,e){return 0===e?To(t):Po(t)},Eo=function(t){for(var e,i,s,r,n={lines:[],width:0,height:0},o=this.sizerChildren,h=0,a=n.lines,l=0,u=o.length;l<u;l++){if("\n"===(e=o[l]))e=void 0,i=0,r=!0;else{if(e.rexSizer.hidden)continue;e.isRexSizer&&e.layout(),r=h<(i=ko(e,this.orientation))}if(r){if(s){var c=t-(h+this.itemSpacing);n.width=Math.max(n.width,c),n.height+=s.height+this.lineSpacing}s={children:[],remainder:0,height:0},a.push(s),h=t}h-=i+this.itemSpacing,s.remainder=h,e&&(s.children.push(e),s.height=Math.max(s.height,Mo(e,this.orientation)))}return s&&(n.height+=s.height),n};const jo=Phaser.Display.Align.In.QuickSet;var Io={getChildrenWidth:So,getChildrenHeight:Oo,getChildrenSizers:_o,layout:function(t,e,i){if(this.rexSizer.hidden)return this;if(this.layoutInit(t),void 0===e){var s=this.padding;e=Math.max(this.maxChildWidth+s.left+s.right,this.minWidth)}if(void 0===i){s=this.padding;i=Math.max(this.maxChildHeight+s.top+s.bottom,this.minHeight)}var r;s=this.padding;r=0===this.orientation?e-s.left-s.right:i-s.top-s.bottom;var n,o,h=Eo.call(this,r);0===this.orientation?i=Math.max(i,h.height+s.top+s.bottom):e=Math.max(e,h.height+left+s.right),this.resize(e,i);var a,l,u,c,d,p,f,g,v=this.left,m=this.top,y=h.lines;0===this.orientation?(a=v,l=m+this.padding.top):(a=v+this.padding.left,l=m);for(var x=0,b=y.length;x<b;x++){for(var w=0,C=(g=(f=y[x]).children).length;w<C;w++)s=(o=(n=g[w]).rexSizer).padding,0===this.orientation?(u=a+s.left,u+=0===w?this.padding.left:this.itemSpacing,c=l+s.top,d=n.width,p=n.height,a=u+n.width+s.right):(u=a+s.left,c=l+s.top,c+=0===w?this.padding.top:this.itemSpacing,d=n.width,p=n.height,l=c+n.height+s.bottom),En.setPosition(u,c).setSize(d,p),jo(n,En,o.align),this.resetChildPositionState(n);0===this.orientation?(a=v,l+=f.height+this.lineSpacing):(a+=f.height+this.lineSpacing,l=m)}return this.layoutBackgrounds(),this}},zo=function(t){void 0===t&&(t=this.sizerChildren);for(var e,i=0,s=0,r=t.length;s<r;s++)"\n"!==(e=t[s])&&(i=Math.max(i,Po(e)));return i},Do=function(t){void 0===t&&(t=this.sizerChildren);for(var e,i=0,s=0,r=t.length;s<r;s++)"\n"!==(e=t[s])&&(i=Math.max(i,To(e)));return i};const Ro=Phaser.Utils.Objects.IsPlainObject,Bo=Phaser.Utils.Objects.GetValue,Lo=Phaser.Utils.Array.Remove,Yo=Phaser.Display.Align.CENTER;class Ao extends Hn{constructor(t,e,i,s,r,n,o){var h;Ro(e)?(e=Bo(h=e,"x",0),i=Bo(h,"y",0),s=Bo(h,"width",void 0),r=Bo(h,"height",void 0)):Ro(s)?(s=Bo(h=s,"width",void 0),r=Bo(h,"height",void 0)):Ro(n)?h=n:Ro(o)&&(h=o),void 0!==h&&(n=Bo(h,"orientation",0),o=Bo(h,"space",h)),void 0===n&&(n=0),void 0===o&&(o=0),super(t,e,i,s,r,h),this.type="rexFixWidthSizer",this.sizerChildren=[],this.setOrientation(n),this.setPadding(o),this.setItemSpacing(Bo(o,"item",0)),this.setLineSpacing(Bo(o,"line",0))}destroy(t){this.scene&&(this.sizerChildren.length=0,super.destroy(t))}setOrientation(t){return"string"==typeof t&&(t=Qn[t]),this.orientation=t,this}setPadding(t){return this.padding=qn(t,this.padding),this}setItemSpacing(t){return this.itemSpacing=t,this}setLineSpacing(t){return this.lineSpacing=t,this}add(t,e){if("\n"===t)return this.addNewLine(),this;super.add(t),void 0===e&&(e=0);var i=this.getSizerConfig(t);return i.parent=this,i.align=Yo,i.padding=qn(e),this.sizerChildren.push(t),this}addNewLine(){return this.sizerChildren.push("\n"),this}insert(t,e,i,s){return this.add(e,i,s),this.moveTo(e,t),this}remove(t){var e=this.getSizerConfig(t);return e.parent!==this?this:(e.parent=void 0,Lo(this.sizerChildren,t),super.remove(t),this)}clear(t){for(var e,i=this.sizerChildren,s=0,r=i.length;s<r;s++)"\n"!==(e=i[s])&&(this.getSizerConfig(e).parent=void 0);return i.length=0,super.clear(t),this}get maxChildWidth(){return void 0===this._maxChildWidth&&(this._maxChildWidth=zo.call(this)),this._maxChildWidth}get maxChildHeight(){return void 0===this._maxChildHeight&&(this._maxChildHeight=Do.call(this)),this._maxChildHeight}}Object.assign(Ao.prototype,Io);var Wo=Ao;Wt.register("fixWidthSizer",(function(t,e,i,s,r,n){var o=new Wo(this.scene,t,e,i,s,r,n);return this.scene.add.existing(o),o})),z(window,"RexPlugins.UI.FixWidthSizer",Wo);const Fo=Phaser.GameObjects.Graphics;const Ho={rectangle:0,circle:1};var Vo=class extends Fo{constructor(t,e,i){void 0===e&&(e=0),"string"==typeof e&&(shaep=Ho[e]),void 0===i&&(i=0),super(t.scene),this.parent=t,this.shape=e,this.padding=i,this.setPosition().resize()}destroy(){return this.parent=void 0,super.destroy(),this}setPosition(t,e){var i=this.parent;return void 0===t&&(t=i.x),void 0===e&&(e=i.y),super.setPosition(t,e),this}resize(t,e,i){var s=this.parent;if(void 0===t&&(t=s.width),void 0===e&&(e=s.height),void 0===i&&(i=this.padding),this.widthSave===t&&this.heightSave===e&&this.paddingSave===i)return this;switch(this.clear().fillStyle(16777215),this.shape){case 1:var r=Math.min(t,e)/2;this.fillCircle(0,0,r+i);break;default:this.fillRect(-t*s.originX-i,-e*s.originY-i,t+2*i,e+2*i)}return this.widthSave=t,this.heightSave=e,this.paddingSave=i,this}};const Xo=Phaser.Utils.Objects.GetValue;var Go=class extends ao{constructor(t,e){super(t,e),this.type="rexLabel";var i=Xo(e,"background",void 0),s=Xo(e,"icon",void 0),r=Xo(e,"iconMask",void 0),n=Xo(e,"text",void 0),o=Xo(e,"action",void 0),h=Xo(e,"actionMask",void 0),a=Xo(e,"space.left",0),l=Xo(e,"space.right",0),u=Xo(e,"space.top",0),c=Xo(e,"space.bottom",0),d=Xo(e,"space.icon",0),p=Xo(e,"space.text",0);(i&&this.addBackground(i),s)&&(g=0===this.orientation?{left:a,right:n||o?d:l,top:u,bottom:c}:{left:a,right:l,top:u,bottom:n||o?d:c},this.add(s,0,"center",g),r&&(r=new Vo(s,1),s.setMask(r.createGeometryMask()),this.add(r,null)));if(n){var f,g,v,m=Xo(e,"expandTextWidth",!1),y=Xo(e,"expandTextHeight",!1);0===this.orientation?(f=m?1:0,g={left:s?0:a,right:o?p:l,top:u,bottom:c},v=y):(f=y?1:0,g={left:a,right:l,top:s?0:u,bottom:o?p:c},v=m),this.add(n,f,"center",g,v)}o&&(g=0===this.orientation?{left:s||n?0:a,right:l,top:u,bottom:c}:{left:a,right:l,top:s||n?0:u,bottom:c},this.add(o,0,"center",g),h&&(h=new Vo(o,1),s.setMask(h.createGeometryMask()),this.add(h,null)));this.addChildrenMap("background",i),this.addChildrenMap("icon",s),this.addChildrenMap("iconMask",r),this.addChildrenMap("text",n),this.addChildrenMap("action",o),this.addChildrenMap("actionMask",h)}get text(){var t=this.childrenMap.text;return void 0===t?"":t.text?t.text:t.getData("text")}set text(t){var e=this.childrenMap.text;void 0!==e&&(e.setText?e.setText(t):e.setData("text",t))}setText(t){return this.text=t,this}appendText(t){this.text+=t}layout(t,e,i){super.layout(t,e,i);var s=this.childrenMap.iconMask;s&&(s.setPosition(),this.resetChildPositionState(s));var r=this.childrenMap.actionMask;return r&&(r.setPosition(),this.resetChildPositionState(r)),this}resize(t,e){super.resize(t,e);var i=this.childrenMap.iconMask;i&&i.resize();var s=this.childrenMap.actionMask;return s&&s.resize(),this}};Wt.register("label",(function(t){var e=new Go(this.scene,t);return this.scene.add.existing(e),e})),z(window,"RexPlugins.UI.Label",Go);var No=function(t,e,i){return void 0===e&&(e=0),void 0===i&&(i=0),t.add.zone(0,0,e,i)};const Uo=Phaser.Utils.Objects.GetValue;class Jo{constructor(t,e){this.gameObject=t,this.scene=f(t),this.setEventEmitter(Uo(e,"eventEmitter",void 0)),t.setInteractive(Uo(e,"inputConfig",void 0)),this.resetFromJSON(e),this.boot()}resetFromJSON(t){return this.pointer=void 0,this.lastClickTime=void 0,this.setEnable(Uo(t,"enable",!0)),this.setMode(Uo(t,"mode",1)),this.setClickInterval(Uo(t,"clickInterval",100)),this.setDragThreshold(Uo(t,"threshold",void 0)),this}boot(){this.gameObject.on("pointerdown",this.onPress,this),this.gameObject.on("pointerup",this.onRelease,this),this.gameObject.on("pointerout",this.onPointOut,this),this.gameObject.on("pointermove",this.onMove,this),this.gameObject.once("destroy",this.destroy,this)}shutdown(){this.destroyEventEmitter(),this.pointer=void 0,this.gameObject=void 0,this.scene=void 0}destroy(){this.shutdown()}setEnable(t){return void 0===t&&(t=!0),this.enable===t?this:(t||this.cancel(),this.enable=t,this.gameObject.input.enabled=t,this)}setMode(t){return"string"==typeof t&&(t=Zo[t]),this.mode=t,this}setClickInterval(t){return this.clickInterval=t,this}setDragThreshold(t){return this.dragThreshold=t,this}onPress(t,e,i,s){void 0===this.pointer&&(this.pointer=t,0===this.mode&&this.click(t.downTime,t,s))}onRelease(t,e,i,s){this.pointer===t&&(1===this.mode&&this.click(t.upTime,t,s),this.pointer=void 0)}onPointOut(t,e){this.pointer===t&&this.cancel()}onMove(t,e,i,s){this.pointer===t&&void 0!==this.dragThreshold&&t.getDistance()>=this.dragThreshold&&this.cancel()}click(t,e,i){if(void 0===t)return this.emit("click",this,this.gameObject,e,i),this;this.pointer=void 0;var s=this.lastClickTime;return void 0!==s&&t-s<=this.clickInterval?this:(this.lastClickTime=t,this.emit("click",this,this.gameObject,e,i),this)}cancel(){return this.pointer=void 0,this}}Object.assign(Jo.prototype,h);const Zo={press:0,pointerdown:0,release:1,pointerup:1};var Ko=Jo,$o=function(t,e){t._buttonBehavior=new Ko(t,e),t._buttonBehavior.on("click",(function(e,i,s,r){qo.call(this,"button.click",t,s,r)}),this),t.on("pointerover",(function(e,i,s,r){qo.call(this,"button.over",t,e,r)}),this).on("pointerout",(function(e,i){qo.call(this,"button.out",t,e,i)}),this)},qo=function(t,e,i,s){var r;if("number"==typeof e){if(r=e,!(e=this.childrenMap.buttons[r]))return}else if(-1===(r=this.childrenMap.buttons.indexOf(e)))return;void 0!==this.groupName?this.eventEmitter.emit(t,e,this.groupName,r,i,s):this.eventEmitter.emit(t,e,r,i,s)},Qo=function(t){ih(t,!1)},th=function(t){ih(t,!0)},eh=function(t){return!!t&&!Rr(t).hidden},ih=function(t,e){t&&(Rr(t).hidden=e,t.setVisible(!e))},sh={getButton(t){var e;return"number"==typeof t?e=this.childrenMap.buttons[t]:(e=t,-1===this.childrenMap.buttons.indexOf(e)&&(e=void 0)),e},emitButtonClick(t){return qo.call(this,"button.click",t),this},showButton(t){return Qo(this.getButton(t)),this},hideButton(t){return th(this.getButton(t)),this},isButtonShown(t){return eh(this.getButton(t)),this},forEachButtton(t,e){for(var i=this.childrenMap.buttons,s=0,r=i.length;s<r;s++)e?t.call(e,i[s],s,i):t(i[s],s,i);return this}};const rh=Phaser.Utils.Objects.GetValue;class nh extends ao{constructor(t,e){void 0===e&&(e={}),super(t,e),this.type="rexButtons",this.eventEmitter=rh(e,"eventEmitter",this),this.groupName=rh(e,"groupName",void 0);var i=rh(e,"background",void 0),s=rh(e,"buttons",void 0);s&&0===s.length&&(s=void 0);var r=rh(e,"space",0);if(i&&this.addBackground(i),s){var n,o,h=rh(e,"align",void 0),a=rh(e,"click",void 0);"right"!==h&&"bottom"!==h&&"center"!==h||this.add(No(t),1,"center",0,!1);for(var l=0,u=s.length;l<u;l++)n=s[l],o=0===this.orientation?{left:l>=1?r:0,right:0,top:0,bottom:0}:{left:0,right:0,top:l>=1?r:0,bottom:0},this.add(n,0,"center",o,!0),$o.call(this,n,a);"center"===h&&this.add(No(t),1,"center",0,!1)}this.addChildrenMap("background",i),this.addChildrenMap("buttons",s||[])}}Object.assign(nh.prototype,sh);var oh=nh;Wt.register("buttons",(function(t){var e=new oh(this.scene,t);return this.scene.add.existing(e),e})),z(window,"RexPlugins.UI.Buttons",oh);var hh={getChoice(t){return this.childrenMap.choicesSizer.getButton(t)},getAction(t){return this.childrenMap.actionsSizer.getButton(t)},emitChoiceClick(t){return this.childrenMap.choicesSizer.emitButtonClick(t),this},emitActionClick(t){return this.childrenMap.actionsSizer.emitButtonClick(t),this},showChoice(t){return this.childrenMap.choicesSizer.showButton(t),this},showAction(t){return this.childrenMap.actionsSizer.showButton(t),this},hideChoice(t){return this.childrenMap.choicesSizer.hideButton(t),this},hideAction(t){return this.childrenMap.actionsSizer.hideButton(t),this},forEachChoice(t,e){return this.childrenMap.choicesSizer.forEachButtton(t,e),this},forEachChoice(t,e){return this.childrenMap.choicesSizer.forEachButtton(t,e),this},forEachAction(t,e){return this.childrenMap.actionsSizer.forEachButtton(t,e),this}};const ah=Phaser.Utils.Objects.GetValue;class lh extends ao{constructor(t,e){void 0===e&&(e={}),e.orientation=1,super(t,e),this.type="rexDialog",this.eventEmitter=ah(e,"eventEmitter",this);var i=ah(e,"background",void 0),s=ah(e,"title",void 0),r=ah(e,"toolbar",void 0);r&&0===r.length&&(r=void 0);var n,o,h=ah(e,"content",void 0),a=ah(e,"description",void 0),l=ah(e,"choices",void 0);l&&0===l.length&&(l=void 0);var u=ah(e,"actions",void 0);u&&0===u.length&&(u=void 0);var c,d=ah(e,"click",void 0),p=ah(e,"space.left",0),f=ah(e,"space.right",0),g=ah(e,"space.top",0),v=ah(e,"space.bottom",0);if(i&&this.addBackground(i),s&&!r){var m=ah(e,"align.title","center"),y=ah(e,"space.title",0),x={left:p,right:f,top:g,bottom:h||a||l||u?y:v},b=ah(e,"expand.title",!0);this.add(s,0,m,x,b)}if(r&&(c=new oh(t,{groupName:"toolbar",buttons:r,orientation:0,space:ah(e,"space.toolbarItem",0),click:d,eventEmitter:this.eventEmitter})),r&&!s){y=ah(e,"space.title",0),x={left:p,right:f,top:g,bottom:h||a||l||u?y:v},b=ah(e,"expand.toolbar",!0);this.add(c,0,"center",x,b)}if(s&&r){var w=new ao(t,{orientation:0});m=ah(e,"align.title","left");(b=ah(e,"expand.title",!0))||"right"!==m&&"center"!==m||w.add(No(t),1,"center",0,!1);x={left:ah(e,"space.titleLeft",0),right:ah(e,"space.titleRight",0),top:0,bottom:0};w.add(s,b?1:0,"center",x,b),b||"left"!==m&&"center"!==m||w.add(No(t),1,"center",0,!1),w.add(c,0,"right",0,!1);y=ah(e,"space.title",0),x={left:p,right:f,top:g,bottom:h||a||l||u?y:v};this.add(w,0,"center",x,!0)}if(h){m=ah(e,"align.content","center");var C=ah(e,"space.content",0);x={left:p+ah(e,"space.contentLeft",0),right:f+ah(e,"space.contentRight",0),top:s||r?0:g,bottom:a||l||u?C:v},b=ah(e,"expand.content",!0);this.add(h,0,m,x,b)}if(a){m=ah(e,"align.description","center");var S=ah(e,"space.description",0);x={left:p+ah(e,"space.descriptionLeft",0),right:f+ah(e,"space.descriptionRight",0),top:s||r||h?0:g,bottom:l||u?S:v},b=ah(e,"expand.description",!0);this.add(a,0,m,x,b)}if(l){m=ah(e,"align.choices","center");n=new oh(t,{groupName:"choices",buttons:l,orientation:1,space:ah(e,"space.choice",0),click:d,eventEmitter:this.eventEmitter});var O=ah(e,"space.choices",0);x={left:p+ah(e,"space.choicesLeft",0),right:f+ah(e,"space.choicesRight",0),top:s||r||h||a?0:g,bottom:u?O:v},b=ah(e,"expand.choices",!0);this.add(n,0,m,x,b)}if(u){o=new oh(t,{groupName:"actions",buttons:u,orientation:0,space:ah(e,"space.action",0),align:ah(e,"align.actions","center"),click:d,eventEmitter:this.eventEmitter});x={left:p+ah(e,"space.actionsLeft",0),right:f+ah(e,"space.actionsRight",0),top:s||r||h||a||l?0:g,bottom:v},b=ah(e,"expand.actions",!0);this.add(o,0,"center",x,b)}this.addChildrenMap("background",i),this.addChildrenMap("title",s),this.addChildrenMap("toolbar",r),this.addChildrenMap("content",h),this.addChildrenMap("choices",l),this.addChildrenMap("actions",u),this.addChildrenMap("choicesSizer",n),this.addChildrenMap("actionsSizer",o)}}Object.assign(lh.prototype,hh);var uh=lh;Wt.register("dialog",(function(t){var e=new uh(this.scene,t);return this.scene.add.existing(e),e})),z(window,"RexPlugins.UI.Dialog",uh);var ch={getButtonsSizer(t){return this.childrenMap[t+"ButtonsSizer"]},getButton(t,e){var i=this.getButtonsSizer(t);return i?i.getButton(e):void 0},emitButtonClick(t,e){var i=this.getButtonsSizer(t);return i?(i.emitButtonClick(e),this):this},emitLeftButtonClick(t){return this.childrenMap.leftButtonsSizer.emitButtonClick(t),this},emitRightButtonClick(t){return this.childrenMap.rightButtonsSizer.emitButtonClick(t),this},emitTopButtonClick(t){return this.childrenMap.topButtonsSizer.emitButtonClick(t),this},emitBottomButtonClick(t){return this.childrenMap.bottomButtonsSizer.emitButtonClick(t),this},getLeftButton(t){return this.childrenMap.leftButtonsSizer.getButton(t)},getRightButton(t){return this.childrenMap.rightButtonsSizer.getButton(t)},getTopButton(t){return this.childrenMap.topButtonsSizer.getButton(t)},getBottomButton(t){return this.childrenMap.bottomButtonsSizer.getButton(t)},showButton(t,e){return Qo(this.getButton(t,e)),this},showLeftButton(t){return Qo(this.getLeftButton(t)),this},showRightButton(t){return Qo(this.getRightButton(t)),this},showTopButton(t){return Qo(this.getTopButton(t)),this},showBottomButton(t){return Qo(this.getBottomButton(t)),this},hideButton(t,e){return th(this.getButton(t,e)),this},hideLeftButton(t){return th(this.getLeftButton(t)),this},hideRightButton(t){return th(this.getRightButton(t)),this},hideTopButton(t){return th(this.getTopButton(t)),this},hideBottomButton(t){return th(this.getBottomButton(t)),this},forEachLeftButton(t,e){return this.childrenMap.leftButtonsSizer.forEachButtton(t,e),this},forEachRightButton(t,e){return this.childrenMap.rightButtonsSizer.forEachButtton(t,e),this},forEachTopButton(t,e){return this.childrenMap.topButtonsSizer.forEachButtton(t,e),this},forEachBottomButton(t,e){return this.childrenMap.bottomButtonsSizer.forEachButtton(t,e),this}};const dh=Phaser.Utils.Objects.GetValue;class ph extends Co{constructor(t,e){void 0===e&&(e={}),e.column=3,e.row=3,super(t,e),this.type="rexTabs",this.eventEmitter=dh(e,"eventEmitter",this);var i,s=dh(e,"background",void 0),r=dh(e,"panel",void 0),n=dh(e,"leftButtons",void 0);n&&0===n.length&&(n=void 0);var o,h=dh(e,"rightButtons",void 0);h&&0===h.length&&(h=void 0);var a,l=dh(e,"topButtons",void 0);l&&0===l.length&&(l=void 0);var u,c=dh(e,"bottomButtons",void 0);c&&0===c.length&&(c=void 0);var d=dh(e,"click",void 0),p=dh(e,"space.left",0),f=dh(e,"space.right",0),g=dh(e,"space.top",0),v=dh(e,"space.bottom",0),m=dh(e,"space.leftButtonsOffset",0),y=dh(e,"space.rightButtonsOffset",0),x=dh(e,"space.topButtonsOffset",0),b=dh(e,"space.bottomButtonsOffset",0),w=dh(e,"space.leftButton",0),C=dh(e,"space.rightButton",0),S=dh(e,"space.topButton",0),O=dh(e,"space.bottomButton",0);if(s&&this.addBackground(s),r){var _={left:n?0:p,right:h?0:f,top:l?0:g,bottom:c?0:v};this.add(r,1,1,"center",_,!0)}if(n){i=new oh(t,{groupName:"left",buttons:n,orientation:1,space:w,align:dh(e,"align.leftButtons",void 0),click:d,eventEmitter:this.eventEmitter});_={left:p,top:m};this.add(i,0,1,"top",_,!1)}if(h){o=new oh(t,{groupName:"right",buttons:h,orientation:1,space:C,align:dh(e,"align.rightButtons",void 0),click:d,eventEmitter:this.eventEmitter});_={right:f,top:y};this.add(o,2,1,"top",_,!1)}if(l){a=new oh(t,{groupName:"top",buttons:l,orientation:0,space:S,align:dh(e,"align.topButtons",void 0),click:d,eventEmitter:this.eventEmitter});_={top:g,left:x};this.add(a,1,0,"left",_,!1)}if(c){u=new oh(t,{groupName:"bottom",buttons:c,orientation:0,space:O,align:dh(e,"align.bottomButtons",void 0),click:d,eventEmitter:this.eventEmitter});_={bottom:v,left:b};this.add(u,1,2,"left",_,!1)}this.addChildrenMap("background",s),this.addChildrenMap("panel",r),this.addChildrenMap("leftButtons",n),this.addChildrenMap("rightButtons",h),this.addChildrenMap("topButtons",l),this.addChildrenMap("bottomButtons",c),this.addChildrenMap("leftButtonsSizer",i),this.addChildrenMap("rightButtonsSizer",o),this.addChildrenMap("topButtonsSizer",a),this.addChildrenMap("bottomButtonsSizer",u)}}Object.assign(ph.prototype,ch);var fh=ph;Wt.register("tabs",(function(t){var e=new fh(this.scene,t);return this.scene.add.existing(e),e})),z(window,"RexPlugins.UI.Tabs",fh);const gh=Phaser.Math.Percent;var vh=function(t,e,i){var s,r,n;return t.y===e.y?(s=Math.min(t.x,e.x),r=Math.max(t.x,e.x),n=gh(i.x,s,r)):t.x===e.x&&(s=Math.min(t.y,e.y),r=Math.max(t.y,e.y),n=gh(i.y,s,r)),n},mh={},yh=function(t,e,i){this.enable&&(mh.x=e,mh.y=i,this.value=vh(this.getStartPoint(),this.getEndPoint(),mh))},xh={},bh=function(t,e,i){this.enable&&t.isDown&&(xh.x=t.worldX,xh.y=t.worldY,this.value=vh(this.getStartPoint(),this.getEndPoint(),xh))};const wh=Phaser.Display.Align.In.QuickSet;var Ch={},Sh=function(t,e){void 0===e&&(e=Ch);var i=this.childrenMap.thumb,s=i.x,r=i.y;return wh(i,this,t),e.x=i.x,e.y=i.y,i.x=s,i.y=r,e};const Oh=Phaser.Display.Align.LEFT_CENTER,_h=Phaser.Display.Align.TOP_CENTER;var Ph={},Th=function(t){if(void 0===t&&(t=Ph),this.childrenMap.thumb){var e=0===this.orientation?_h:Oh;Sh.call(this,e,t)}else 0===this.orientation?(t.x=this.centerX,t.y=this.top+1):(t.x=this.left+1,t.y=this.centerY);return t};const kh=Phaser.Display.Align.RIGHT_CENTER,Mh=Phaser.Display.Align.BOTTOM_CENTER;var Eh={},jh=function(t){if(void 0===t&&(t=Eh),this.childrenMap.thumb){var e=1===this.orientation?kh:Mh;Sh.call(this,e,t)}else 0===this.orientation?(t.x=this.centerX,t.y=this.bottom-1):(t.x=this.right-1,t.y=this.centerY);return t};const Ih=Phaser.Math.Linear;var zh={},Dh=function(t,e,i,s){return void 0===s&&(s=zh),s.x=Ih(e.x,i.x,t),s.y=Ih(e.y,i.y,t),s},Rh=function(t){var e=this.childrenMap.thumb;return void 0===e?this:(void 0===t&&(t=this.value),Dh(t,this.getStartPoint(),this.getEndPoint(),e),this.resetChildPositionState(e),this)};const Bh=Phaser.Display.Align.In.QuickSet,Lh=Phaser.Display.Align.LEFT_CENTER,Yh=Phaser.Display.Align.TOP_CENTER;var Ah=function(t){var e,i,s=this.childrenMap.indicator;if(void 0===s)return this;void 0===t&&(t=this.value);var r=this.childrenMap.thumb;r?0===this.orientation?i=r.y-r.displayHeight*r.originY+r.displayHeight-this.top:e=r.x-r.displayWidth*r.originX+r.displayWidth-this.left:0===this.orientation?i=this.height*t:e=this.width*t;kn(s,e,i);var n=1===this.orientation?Lh:Yh;Bh(s,this,n),this.resetChildPositionState(s)};const Wh=Phaser.Utils.Objects.GetValue,Fh=Phaser.Math.Clamp,Hh=Phaser.Math.Linear,Vh=Phaser.Math.Percent,Xh=Phaser.Math.Snap.To;class Gh extends ao{constructor(t,e){super(t,e),this.type="rexSlider",this.eventEmitter=Wh(e,"eventEmitter",this);var i=Wh(e,"background",void 0),s=Wh(e,"track",void 0),r=Wh(e,"indicator",void 0),n=Wh(e,"thumb",void 0),o=Wh(e,"space.left",0),h=Wh(e,"space.right",0),a=Wh(e,"space.top",0),l=Wh(e,"space.bottom",0);if(i&&this.addBackground(i),s){var u={left:o,right:h,top:a,bottom:l};this.add(s,0,void 0,u,!0)}r&&this.add(r,null),n&&this.add(n,null);var c=Wh(e,"input",0);switch("string"==typeof c&&(c=Nh[c]),c){case 0:n&&(n.setInteractive(),this.scene.input.setDraggable(n),n.on("drag",yh,this));break;case 1:this.setInteractive().on("pointerdown",bh,this).on("pointermove",bh,this)}this.addChildrenMap("background",i),this.addChildrenMap("track",s),this.addChildrenMap("indicator",r),this.addChildrenMap("thumb",n);var d=Wh(e,"valuechangeCallback",null);if(null!==d){var p=Wh(e,"valuechangeCallbackScope",void 0);this.eventEmitter.on("valuechange",d,p)}this.setEnable(Wh(e,"enable",void 0)),this.setGap(Wh(e,"gap",void 0)),this.setValue(Wh(e,"value",0))}setEnable(t){return void 0===t&&(t=!0),this.enable=t,this}setGap(t){return this.gap=t,this}get value(){return this._value}set value(t){void 0!==this.gap&&(t=Xh(t,this.gap));var e=this._value;this._value=Fh(t,0,1),e!==this._value&&(this.updateThumb(this._value),this.updateIndicator(this._value),this.eventEmitter.emit("valuechange",this._value,e,this.eventEmitter))}setValue(t,e,i){return null==t?this:(void 0!==e&&(t=Vh(t,e,i)),this.value=t,this)}addValue(t,e,i){return void 0!==e&&(t=Vh(t,e,i)),this.value+=t,this}getValue(t,e){var i=this.value;return void 0!==t&&(i=Hh(t,e,i)),i}layout(t,e,i){return super.layout(t,e,i),this.updateThumb(),this.updateIndicator(),this}}const Nh={drag:0,click:1,none:-1};var Uh={getStartPoint:Th,getEndPoint:jh,updateThumb:Rh,updateIndicator:Ah};Object.assign(Gh.prototype,Uh);var Jh=Gh;Wt.register("slider",(function(t){var e=new Jh(this.scene,t);return this.scene.add.existing(e),e})),z(window,"RexPlugins.UI.Slider",Jh);var Zh={v:0,vertical:0,h:1,horizontal:1};const Kh=Phaser.Utils.Objects.GetValue;var $h=function(t,e){void 0===e&&(e="scrollMode");var i=Kh(t,"scrollMode",0);return"string"==typeof i&&(i=Zh[i]),i};var qh=class extends _{constructor(t,e){super(e),this.parent=t,this.init()}init(){this.start("IDLE")}next_IDLE(){var t,e=this.parent;return e.dragState.isDown&&(t=0===e.dragThreshold?"DRAG":"DRAGBEGIN"),t}update_IDLE(t,e){this.next()}next_DRAGBEGIN(){var t=this.parent,e=t.dragState;return e.isDown?e.pointer.getDistance()>=t.dragThreshold?"DRAG":"DRAGBEGIN":"IDLE"}update_DRAGBEGIN(t,e){this.next()}next_DRAG(){var t,e=this.parent;return e.dragState.isUp&&(t=e.outOfBounds?"BACK":e.slidingEnable?"SLIDE":"IDLE"),t}update_DRAG(t,e){var i=this.parent;i.dragState.justMoved&&i.dragging(),this.next()}next_SLIDE(){var t,e=this.parent;return e.dragState.isDown?t="DRAG":e.isSliding||(t="IDLE"),t}enter_SLIDE(){this.parent.onSliding()}exit_SLIDE(){this.parent.stop()}update_SLIDE(t,e){this.parent.sliding(t,e),this.next()}next_BACK(){var t,e=this.parent;return e.dragState.isDown?t="DRAG":e.isPullBack||(t="IDLE"),t}enter_BACK(){this.parent.onPullBack()}exit_BACK(){this.parent.stop()}update_BACK(t,e){this.parent.pullBack(t,e),this.next()}};const Qh=Phaser.Utils.Objects.GetValue,ta=Phaser.Math.Distance.Between;class ea{constructor(t,e){this.gameObject=t,this.scene=f(t),this.setEventEmitter(Qh(e,"eventEmitter",void 0)),t.setInteractive(Qh(e,"inputConfig",void 0)),this.resetFromJSON(e),this.boot()}resetFromJSON(t){return this.pointer=void 0,this.isInTouched=!1,this.holdStartTime=void 0,this.x=void 0,this.y=void 0,this.preX=void 0,this.preY=void 0,this.localX=void 0,this.localY=void 0,this.justMoved=!1,this.setEnable(Qh(t,"enable",!0)),this.holdThreshold=Qh(t,"holdThreshold",50),this}boot(){this.gameObject.on("pointerdown",this.onPointIn,this),this.gameObject.on("pointerover",this.onPointIn,this),this.gameObject.on("pointerup",this.onPointOut,this),this.gameObject.on("pointerout",this.onPointOut,this),this.gameObject.on("pointermove",this.onPointerMove,this),this.gameObject.once("destroy",this.destroy,this),this.scene.events.on("preupdate",this.preupdate,this)}shutdown(){this.scene&&this.scene.events.off("preupdate",this.preupdate,this),this.pointer=void 0,this.gameObject=void 0,this.scene=void 0,this.destroyEventEmitter()}destroy(){this.shutdown()}setEnable(t){return void 0===t&&(t=!0),this.enable===t?this:(t||(this.isInTouched=!1,this.pointer=void 0),this.enable=t,this.gameObject.input.enabled=t,this)}get isDown(){return this.pointer&&this.pointer.isDown}get isUp(){return!this.isDown}get dx(){return this.x-this.preX}get dy(){return this.y-this.preY}get dt(){return this.scene.sys.game.loop.delta}get speed(){return this.x===this.preX&&this.y===this.preY?0:ta(this.preX,this.preY,this.x,this.y)/(.001*this.dt)}get speedX(){return this.dx/(.001*this.dt)}get speedY(){return this.dy/(.001*this.dt)}onPointIn(t,e,i){t.isDown&&void 0===this.pointer&&(this.pointer=t,this.localX=e,this.localY=i)}onPointOut(t){this.pointer===t&&(this.pointer=void 0)}onPointerMove(t,e,i){t.isDown&&this.pointer===t&&(this.localX=e,this.localY=i)}preupdate(t,e){var i=this.pointer;this.justMoved=!1,i&&!this.isInTouched?(this.x=i.x,this.y=i.y,this.preX=i.x,this.preY=i.y,this.isInTouched=!0,this.holdStartTime=void 0,this.emit("touchstart",i,this.localX,this.localY)):i&&this.isInTouched?this.x===i.x&&this.y===i.y?void 0===this.holdStartTime?this.holdStartTime=t:t-this.holdStartTime>this.holdThreshold&&(this.preX=this.x,this.preY=this.y):(this.preX=this.x,this.preY=this.y,this.x=i.x,this.y=i.y,this.holdStartTime=void 0,this.justMoved=!0,this.emit("touchmove",i,this.localX,this.localY)):!i&&this.isInTouched&&(this.isInTouched=!1,this.holdStartTime=void 0,this.emit("touchend",i))}}Object.assign(ea.prototype,h);var ia=ea;const sa=Phaser.Utils.Objects.GetValue;var ra=class{constructor(t){this.resetFromJSON(t)}resetFromJSON(t){return this.setValue(sa(t,"value",0)),this.setSpeed(sa(t,"speed",0)),this.setAcceleration(sa(t,"acceleration",0)),this}reset(){this.setValue(0),this.setSpeed(0),this.setAcceleration(0)}setValue(t){return this.value=t,this}setSpeed(t){return this.speed=t,this}setAcceleration(t){return this.acceleration=t,this}updateSpeed(t){return 0!==this.acceleration&&(this.speed+=this.acceleration*t,this.speed<0&&(this.speed=0)),this}getDeltaValue(t){return this.updateSpeed(t),this.speed<=0?0:this.speed*t}update(t){return this.updateSpeed(t),this.speed>0&&(this.value+=this.getDeltaValue(t)),this}get isMoving(){return this.speed>0}};var na=class{constructor(){this.value,this.dir,this.movement=new ra}init(t,e,i,s,r){return this.value=t,this.end=r,this.dir=void 0!==r?t<r:e,this.movement.setSpeed(i).setAcceleration(-s),this}stop(){this.movement.reset()}update(t){var e=this.movement.getDeltaValue(t);return this.dir||(e=-e),void 0===this.end?this.value+=e:0===e?this.value=this.end:(this.value+=e,this.dir?this.value>this.end&&(this.value=this.end):this.value<this.end&&(this.value=this.end)),this}get isMoving(){return this.movement.isMoving}};const oa=Phaser.Utils.Objects.GetValue;class ha{constructor(t,e){this.gameObject=t,this.scene=f(t),this.setEventEmitter(oa(e,"eventEmitter",void 0));var i=oa(e,"enable",!0),s={enable:i,eventEmitter:!1};this._state=new qh(this,s);var r={inputConfig:oa(e,"inputConfig",void 0),enable:i,eventEmitter:!1};this.dragState=new ia(t,r),this._value=void 0,this._slowDown=new na;var n=oa(e,"valuechangeCallback",null);if(null!==n){var o=oa(e,"valuechangeCallbackScope",void 0);this.on("valuechange",n,o)}if(null!==(n=oa(e,"overmaxCallback",null))){o=oa(e,"overmaxCallbackScope",void 0);this.on("overmax",n,o)}if(null!==(n=oa(e,"overminCallback",null))){o=oa(e,"overminCallbackScope",void 0);this.on("overmin",n,o)}this.resetFromJSON(e),this.boot()}resetFromJSON(t){this.setOrientationMode(oa(t,"orientation",0)),this.setDragThreshold(oa(t,"threshold",10)),this.setSlidingDeceleration(oa(t,"slidingDeceleration",5e3)),this.setBackDeceleration(oa(t,"backDeceleration",2e3));var e=oa(t,"bounds",void 0);return e?this.setBounds(e):this.setBounds(oa(t,"max",0),oa(t,"min",0)),this.setValue(oa(t,"value",this.maxValue||0)),this.setEnable(oa(t,"enable",!0)),this}boot(){this.scene.events.on("update",this._state.update,this._state),this.gameObject.once("destroy",this.destroy,this)}shutdown(){this.destroyEventEmitter(),this.scene&&this.scene.events.off("update",this._state.update,this._state),this.gameObject=void 0,this.scene=void 0,this._state.destroy(),this.dragState.destroy()}destroy(){this.shutdown()}setOrientationMode(t){return"string"==typeof t&&(t=aa[t]),this.orientationMode=t,this}setDragThreshold(t){return this.dragThreshold=t,this}setSlidingDeceleration(t){return this.slidingDeceleration=t,this}setBackDeceleration(t){return this.backDeceleration=t,this}setBounds(t,e){if(Array.isArray(t)){var i=t;t=i[0],e=i[1]}return t<e?(this.minValue=t,this.maxValue=e):(this.minValue=e,this.maxValue=t),this}get value(){return this._value}set value(t){if(t!==this._value){var e=this._value,i=this.overMax(t),s=this.overMin(t);i&&this.emit("overmax",t,e),s&&this.emit("overmin",t,e),this.backEnable||(i&&(t=this.maxValue),s&&(t=this.minValue)),this._value=t,this.emit("valuechange",t,e)}}setValue(t){this.value=t}setEnable(t){return this._state.setEnable(t),this.dragState.setEnable(t),this}get state(){return this._state.state}get isDragging(){return this.dragState.isInTouched}get outOfMaxBound(){return this.overMax(this.value)}get outOfMinBound(){return this.overMin(this.value)}get outOfBounds(){return this.outOfMinBound||this.outOfMaxBound}overMax(t){return null!=this.maxValue&&t>this.maxValue}overMin(t){return null!=this.minValue&&t<this.minValue}get backEnable(){return"number"==typeof this.backDeceleration}get isPullBack(){return this._slowDown.isMoving}get slidingEnable(){return"number"==typeof this.slidingDeceleration}get isSliding(){return this._slowDown.isMoving}get dragDelta(){return 0===this.orientationMode?this.dragState.dy:1===this.orientationMode?this.dragState.dx:0}get dragSpeed(){return 0===this.orientationMode?this.dragState.speedY:1===this.orientationMode?this.dragState.speedX:0}dragging(){this.value+=this.dragDelta}onSliding(){var t=this.value,e=this.dragSpeed;if(0===e)return this._slowDown.stop(),void this._state.next();var i=this.slidingDeceleration;this._slowDown.init(t,e>0,Math.abs(e),i)}sliding(t,e){e*=.001;var i=this._slowDown.update(e).value;this.overMax(i)?(this.value=this.maxValue,this._slowDown.stop()):this.overMin(i)?(this.value=this.minValue,this._slowDown.stop()):this.value=i}onPullBack(){var t=this.value,e=this.outOfMinBound?this.minValue:this.maxValue,i=Math.abs(e-t),s=this.backDeceleration,r=Math.sqrt(2*s*i);this._slowDown.init(t,void 0,r,s,e)}pullBack(t,e){e*=.001,this.value=this._slowDown.update(e).value,this._slowDown.isMoving||this._state.next()}stop(){this._slowDown.stop()}}Object.assign(ha.prototype,h);const aa={y:0,v:0,vertical:0,x:1,h:1,horizontal:1};var la=ha;const ua=Phaser.Utils.Objects.GetValue;var ca=function(t){var e,i,s=this.scene,r=$h(t),n=new ao(s,{orientation:r}),o=ua(t,"child.gameObject",void 0),h=ua(t,"slider",void 0),a=ua(t,"scroller",!0);if(o){var l=ua(t,"space.child",0);if(this.childPadding={},"number"!=typeof l){var u=l;0===r?(l=ua(u,"right",0),this.childPadding.top=ua(u,"top",0),this.childPadding.bottom=ua(u,"bottom",0)):(l=ua(u,"bottom",0),this.childPadding.top=ua(u,"left",0),this.childPadding.bottom=ua(u,"right",0))}else this.childPadding.top=0,this.childPadding.bottom=0;var c,d=ua(t,"child.proportion",1),p=ua(t,"child.expand",!0);c=0===r?{right:h?l:0}:{bottom:h?l:0},n.add(o,d,"center",c,p),h&&(!0===h&&(h={}),h.orientation=n.orientation,e=new Jh(s,h),n.add(e,0,"center",0,!0)),a&&(!0===a&&(a={}),a.orientation=r,i=new la(o,a))}return e&&e.on("valuechange",(function(t){this.t=t}),this),i&&i.on("valuechange",(function(t){this.childOY=t}),this),this.addChildrenMap("child",o),this.addChildrenMap("slider",e),this.addChildrenMap("scroller",i),n};const da=Phaser.Utils.Objects.GetValue;var pa=class extends ao{constructor(t,e){void 0===e&&(e={});var i=$h(e);e.orientation=0===i?1:0,super(t,e),this.type=da(e,"type","rexScrollable");var s=da(e,"background",void 0),r=ca.call(this,e),n=da(e,"header",void 0),o=da(e,"footer",void 0),h=da(e,"space.left",0),a=da(e,"space.right",0),l=da(e,"space.top",0),u=da(e,"space.bottom",0);if(s&&this.addBackground(s),n){var c=da(e,"align.header","center"),d=da(e,"space.header",0);f=0===i?{left:h,right:a,top:l,bottom:d}:{left:h,right:d,top:l,bottom:u};var p=da(e,"expand.header",!0);this.add(n,0,c,f,p)}r&&(f=0===i?{left:h,right:a,top:n?0:l,bottom:o?0:u}:{left:n?0:h,right:o?0:a,top:l,bottom:u},this.add(r,1,"center",f,!0));if(o){c=da(e,"align.footer","center");var f,g=da(e,"space.footer",0);f=0===i?{left:h,right:a,top:g,bottom:u}:{left:g,right:a,top:l,bottom:u};p=da(e,"expand.footer",!0);this.add(o,0,c,f,p)}this.addChildrenMap("background",s),this.addChildrenMap("header",n),this.addChildrenMap("footer",o)}layout(t,e,i){return super.layout(t,e,i),this.resizeController(),this}resizeController(){var t=this.topChildOY,e=this.bottomChildOY,i=this.childrenMap.scroller,s=this.childrenMap.slider;return i&&i.setBounds(e,t),s&&s.setEnable(e!==t),this.updateController(),this}updateController(){var t=this.childrenMap.scroller,e=this.childrenMap.slider;t&&t.setValue(this.childOY),e&&e.setValue(this.t)}set t(t){var e=this.childPadding;if(0!==e.top||0!==e.bottom){var i=this.childrenMap.child,s=i.topChildOY-i.bottomChildOY;t=((s+e.top+e.bottom)*t-e.top)/s}this.childrenMap.child.t=t,this.updateController()}get t(){var t=this.childrenMap.child.t,e=this.childPadding;if(0!==e.top||0!==e.bottom){var i=this.childrenMap.child,s=i.topChildOY-i.bottomChildOY,r=s+e.top+e.bottom;t=(s*t+e.top)/r}return t}set childOY(t){this.childrenMap.child.childOY=t,this.updateController()}get childOY(){return this.childrenMap.child.childOY}get topChildOY(){return this.childrenMap.child.topChildOY+this.childPadding.top}get bottomChildOY(){return this.childrenMap.child.bottomChildOY-this.childPadding.bottom}setChildOY(t){return this.childOY=t,this}setT(t){return this.t=t,this}scrollToTop(){return this.t=0,this}scrollToBottom(){return this.t=1,this}get sliderEnable(){var t=this.childrenMap.slider;if(t)return t.enable}set sliderEnable(t){var e=this.childrenMap.slider;e&&e.setEnable(t)}setSliderEnable(t){return void 0===t&&(t=!0),this.sliderEnable=t,this}get scrollerEnable(){var t=this.childrenMap.scroller;if(t)return t.enable}set scrollerEnable(t){var e=this.childrenMap.scroller;e&&e.setEnable(t)}setScrollerEnable(t){return void 0===t&&(t=!0),this.scrollerEnable=t,this}},fa={enableData(){return void 0===this.data&&(this.data={}),this},getData(t,e){return this.enableData(),void 0===t?this.data:S()(this.data,t,e)},setData(t,e){return this.enableData(),this.data[t]=e,this},incData(t,e,i){return void 0===i&&(i=0),this.enableData(),this.setData(t,this.getData(t,i)+e),this},mulData(t,e,i){return void 0===i&&(i=0),this.enableData(),this.setData(t,this.getData(t,i)*e),this},clearData(){return this.data&&nt(this.data),this}};class ga{constructor(t,e){this.container=null,this.setParent(t),this._deltaHeight=0}setParent(t){this.parent=t,this.parentContainer=t.getParentContainer()}destroy(t){if(void 0===t&&(t=!1),!t){var e=this.parent;0!==this.deltaHeight&&e.nonZeroDeltaHeightCount--,this.destroyContainer()}this.data=void 0,this.container=null,this.parent=void 0,this.parentContainer=void 0}get table(){return this.parent}get scrollMode(){return this.parentContainer.scrollMode}get colIndx(){return this.parent.cellIndxeToColIndex(this.index)}get rowIndx(){return this.parent.cellIndxeToRowIndex(this.index)}getContainer(){return this.container}setContainer(t){return this.container&&this.container.destroy(),this.container=t,this.parentContainer.add(t),this}destroyContainer(){return this.container&&(this.container.destroy(),this.container=null),this}popContainer(){if(this.container){var t=this.container;return this.container=null,this.parentContainer.remove(t),t}return null}setXY(t,e){return this.container&&this.parentContainer.setChildLocalPosition(this.container,t,e),this}get deltaHeight(){return this._deltaHeight}set deltaHeight(t){null==t&&(t=0);var e=this.parent;0===this._deltaHeight&&0!==t?e.nonZeroDeltaHeightCount++:0!==this._deltaHeight&&0===t&&e.nonZeroDeltaHeightCount--,this._deltaHeight=t}setDeltaHeight(t){return this.deltaHeight=t,this}get height(){return 0===this.scrollMode?this.deltaHeight+this.parent.defaultCellHeight:this.parent.defaultCellWidth}set height(t){1!==this.scrollMode&&this.setDeltaHeight(t-this.parent.defaultCellHeight)}setHeight(t){return this.height=t,this}get width(){return 0===this.scrollMode?this.parent.defaultCellWidth:this.deltaHeight+this.parent.defaultCellHeight}set width(t){0!==this.scrollMode&&this.setDeltaHeight(t-this.parent.defaultCellHeight)}setWidth(t){return this.width=t,this}get scene(){return this.parentContainer.scene}}Object.assign(ga.prototype,fa);var va=ga;const ma=Phaser.Utils.Objects.GetValue,ya=Phaser.Utils.Array.SpliceOne;var xa=new ke;var ba=class{constructor(t,e){this.parent=t,this.cells=[],this.resetFromJSON(e)}resetFromJSON(t){return this.colCount=void 0,this._nonZeroDeltaHeightCount=0,this.resetTotalRowsHeight(),this.setDefaultCellHeight(ma(t,"cellHeight",30)),this.setDefaultCellWidth(ma(t,"cellWidth",30)),this.initCells(ma(t,"cellsCount",0)),this.setColumnCount(ma(t,"columns",1)),this}destroy(t){for(var e=0,i=this.cells.length;e<i;e++)this.freeCell(this.cells[e],t);this.cells=void 0,this.parent=void 0}get nonZeroDeltaHeightCount(){return this._nonZeroDeltaHeightCount}set nonZeroDeltaHeightCount(t){this._nonZeroDeltaHeightCount!==t&&(this._nonZeroDeltaHeightCount=t,this.resetTotalRowsHeight())}get defaultCellHeightMode(){return 0===this.nonZeroDeltaHeightCount}setDefaultCellHeight(t){return this.defaultCellHeight=t,this}setDefaultCellWidth(t){return this.defaultCellWidth=t,this}initCells(t){var e=this.cells;e.length=t;for(var i=0;i<t;i++)e[i]=null;return this}insertNewCell(t,e){var i=this.cells;if(t===i.length){var s=t+e;i.legth=s;for(var r=t;r<s;r++)i[r]=null}else{var n=[];n.length=e;for(r=0;r<e;r++)n[r]=null;this.cells.splice(t,0,...n)}return this.resetTotalRowsHeight(),this}removeCell(t,e){for(var i=t+e,s=t;s<i;s++)this.freeCell(s);return i===this.cells.length?this.cells.length=t:(1===e?ya(this.cells,t):this.cells.splice(t,e),this.buildCellIndex(t)),this.resetTotalRowsHeight(),this}setColumnCount(t){return this.colCount=t,this.resetTotalRowsHeight(),this}get rowCount(){return Math.ceil(this.cells.length/this.colCount)}get cellsCount(){return this.cells.length}isValidCellIdx(t){return t>=0&&t<this.cells.length}heightToRowIndex(t,e){if(this.defaultCellHeightMode){var i=t/this.defaultCellHeight;return i=e?Math.ceil(i):Math.floor(i)}var s,r=this.rowCount,n=t;for(i=0;;){if(s=i>=0&&i<r,!((n-=this.getRowHeight(i))>0&&s)){if(0===n)return i;if(e){var o=i;(s=(i+=1)>=0&&i<r)||(i=o)}return i}i+=1}}widthToColIndex(t,e){var i=t/this.defaultCellWidth;return i=e?Math.ceil(i):Math.floor(i)}colRowToCellIndex(t,e){return t>=this.colCount?null:e*this.colCount+t}rowIndexToHeight(t,e){if(this.defaultCellHeightMode)return(e-t+1)*this.defaultCellHeight;for(var i=0,s=t;s<=e;s++)i+=this.getRowHeight(s);return i}colIndexToWidth(t,e){return(e-t+1)*this.defaultCellWidth}getRowHeight(t){var e=this.colCount;if(e<=1)return this.getCellHeight(this.colRowToCellIndex(0,t));for(var i,s=0,r=0;r<e;r++)s<(i=this.getCellHeight(this.colRowToCellIndex(r,t)))&&(s=i);return s}getColWidth(t){return this.defaultCellWidth}getCellHeight(t){if(!this.isValidCellIdx(t))return 0;var e;if(this.defaultCellHeightMode)e=this.defaultCellHeight;else{var i=this.getCell(t,!1),s=i?i.deltaHeight:0;e=this.defaultCellHeight+s}return e}resetTotalRowsHeight(){this._totalRowsHeight=null}get totalRowsHeight(){return null===this._totalRowsHeight&&(this._totalRowsHeight=this.rowIndexToHeight(0,this.rowCount-1)),this._totalRowsHeight}get totalColumnWidth(){return this.colCount*this.defaultCellWidth}cellIndxeToColIndex(t){return t%this.colCount}cellIndxeToRowIndex(t){return Math.floor(t/this.colCount)}getCell(t,e){if(!this.isValidCellIdx(t))return null;if(void 0===e&&(e=!0),null===this.cells[t]&&e){var i=this.newCell(t);this.cells[t]=i}return this.cells[t]}newCell(t){var e=xa.pop();return null===e?e=new va(this):e.setParent(this),e.index=t,e}buildCellIndex(t){void 0===t&&(t=0);for(var e,i=this.cells,s=t,r=i.length;s<r;s++)(e=i[s])&&(e.index=s);return this}getParentContainer(){return this.parent}freeCell(t,e){return"number"==typeof t&&(t=this.cells[t]),t?(t.destroy(e),xa.push(t),this):this}},wa=function(t){return t.hasOwnProperty("geometryMask")?t.geometryMask:t.bitmapMask};const Ca=Phaser.Geom.Intersects.RectangleToRectangle,Sa=Phaser.Geom.Rectangle.Overlaps;var Oa=function(t,e){var i=0,s=e.top,r=e.bottom,n=e.left,o=e.right;return i+=t.contains(n,s)?1:0,i+=t.contains(n,r)?1:0,i+=t.contains(o,s)?1:0,i+=t.contains(o,r)?1:0},_a=function(t,e){t.setVisible(!0).clearMask()},Pa=function(t,e){t.setVisible(!0).setMask(e)},Ta=function(t,e){t.setVisible(!1).clearMask()},ka=function(t,e,i){if(e){void 0===i&&(i=t.getAllChildren());for(var s,r,n=t.getBounds(),o=wa(e),h=0,a=i.length;h<a;h++)if(!(s=i[h]).hasOwnProperty("isRexContainerLite")&&s!==o){if(s.getBounds)switch(r=s.getBounds(r),Oa(n,r)){case 4:_a(s,e);break;case 0:Ca(n,r)||Sa(n,r)?Pa(s,e):Ta(s,e);break;default:Pa(s,e)}else Pa(s,e);t.resetChildVisibleState(s).updateChildVisible(s)}}};const Ma=Es,Ea=Phaser.GameObjects.Components,ja=Phaser.Structs.Set,Ia=Phaser.Utils.Objects.GetValue,za=Phaser.Math.Clamp;class Da extends Ma{constructor(t,e,i,s,r,n){void 0===n&&(n={}),super(t,e,i,s,r),this.type="rexGridTable",this._tableOX=0,this._tableOY=0,this.visibleCells=new ja,this.preVisibleCells=new ja,this.visibleStartX=null,this.visibleEndX=null,this.visibleStartY=null,this.visibleEndY=null,this.lastVisibleCellIdx=null,this.execeedTopState=!1,this.execeedBottomState=!1,this.execeedLeftState=!1,this.execeedRightState=!1;var o=Ia(n,"reuseCellContainer",!1);this.cellContainersPool=o?t.add.group():void 0;var h=Ia(n,"cellVisibleCallback",null);if(null!==h){var a=Ia(n,"cellVisibleCallbackScope",void 0);this.on("cellvisible",h,a)}if(null!==(h=Ia(n,"cellInvisibleCallback",null))){a=Ia(n,"cellInvisibleCallbackScope",void 0);this.on("cellinvisible",h,a)}if(this.cellsMask=void 0,this.setCellsMask(Ia(n,"mask",!0)),this.setScrollMode(Ia(n,"scrollMode",0)),this.setClampMode(Ia(n,"clamplTableOXY",!0)),0===this.scrollMode){var l=Ia(n,"cellWidth",void 0);if(this.expandCellSize=void 0===l,void 0===l){var u=Ia(n,"columns",1);n.cellWidth=this.width/u}}else{l=Ia(n,"cellHeight",void 0);var c=Ia(n,"cellWidth",void 0);this.expandCellSize=void 0===l,n.cellWidth=l,n.cellHeight=c}this.table=new ba(this,n),this.updateTable()}destroy(t){this.scene&&(t||this.setCellsCount(0),this.table.destroy(t),this.table=void 0,this.cellContainersPool&&(this.cellContainersPool.destroy(!0),this.cellContainersPool=void 0),super.destroy(t))}setScrollMode(t){return"string"==typeof t&&(t=Ra[t.toLowerCase()]),this.scrollMode=t,this}setClampMode(t){return this.clampTableOXYMode=t,this}setCellsCount(t){var e=this.cellsCount;return e===t?this:(e>t?this.removeCell(t,e-t):this.insertNewCell(e,t-e),this)}setColumnCount(t){return this.table.colCount===t?this:(this.table.setColumnCount(t),this)}setGridSize(t,e){return this.setCellsCount(t*e),this.table.setColumnCount(t),this}insertNewCell(t,e){return"object"==typeof t&&(t=t.index),void 0===e&&(e=1),e<=0?this:(t=za(t,0,this.cellsCount),this.table.insertNewCell(t,e),this)}removeCell(t,e){if("object"==typeof t&&(t=t.index),void 0===e&&(e=1),t<0&&(e+=t,t=0),e<=0)return this;if(t>this.cellsCount)return this;if(t<=this.lastVisibleCellIdx)for(var i,s=this.preVisibleCells,r=this.visibleCells,n=t,o=t+e;n<o;n++)(i=this.getCell(n,!1))&&(r.contains(i)&&(this.hideCell(i),r.delete(i)),s.delete(i));return this.table.removeCell(t,e),this}get tableOY(){return this._tableOY}get tableOX(){return this._tableOX}set tableOY(t){this.setTableOY(t).updateTable()}set tableOX(t){this.setTableOX(t).updateTable()}setTableOY(t){var e=this.table,i=this.topTableOY,s=this.bottomTableOY,r=this.tableOYExceedTop(t),n=this.tableOYExeceedBottom(t);this.clampTableOXYMode&&(e.rowCount<e.heightToRowIndex(this.instHeight,!0)?t=0:r?t=i:n&&(t=s));return this._tableOY!==t&&(this._tableOY=t),r&&(this.execeedTopState||this.emit("execeedtop",this,t,i)),this.execeedTopState=r,n&&(this.execeedBottomState||this.emit("execeedbottom",this,t,s)),this.execeedBottomState=n,this}setTableOX(t){var e=this.table,i=this.leftTableOX,s=this.rightTableOX,r=this.tableOXExeceedLeft(t),n=this.tableOXExeceedRight(t);this.clampTableOXYMode&&(e.colCount<e.widthToColIndex(this.instWidth,!0)?t=0:r?t=i:n&&(t=s));return this._tableOX!==t&&(this._tableOX=t),r&&(this.execeedLeftState||this.emit("execeedleft",this,t,i)),this.execeedLeftState=r,n&&(this.execeedRightState||this.emit("execeedright",this,t,s)),this.execeedRightState=n,this}setTableOXY(t,e){return this.setTableOY(e).setTableOX(t),this}addTableOY(t){return this.setTableOY(this.tableOY+t),this}addTableOX(t){return this.setTableOX(this.tableOX+t),this}addTableOXY(t,e){return this.addTableOY(e).addTableOX(t),this}setTableOYByPercentage(t){return this.setTableOY(-this.tableVisibleHeight*t),this}getTableOYPercentage(){var t=this.tableVisibleHeight;return 0===t?0:this.tableOY/-t}set t(t){this.setTableOYByPercentage(t).updateTable()}get t(){return this.getTableOYPercentage()}updateTable(t){return void 0===t&&(t=!1),t&&(this.clearVisibleCellIndexes(),this.hideCells()),this.clearVisibleCellIndexes(),this.showCells(),this.hideCells(),this.maskCells(),this}getCell(t){return this.table.getCell(t,!0)}getCellContainer(t){var e,i=this.table.getCell(t,!1);return i&&(e=i.getContainer()),e}get cellsCount(){return this.table.cellsCount}get columnCount(){return this.table.colCount}setCellHeight(t,e){return("number"==typeof t?this.table.getCell(t,!0):t).height=e,this}setCellWidth(t,e){return("number"==typeof t?this.table.getCell(t,!0):t).width=e,this}pointerToCellIndex(t,e){e-=this.y+this.topLeftY,t-=this.x+this.topLeftX;var i=this.tableOY-(0===this.scrollMode?e:t),s=this.tableOX-(0===this.scrollMode?t:e),r=this.table,n=r.heightToRowIndex(-i),o=r.widthToColIndex(-s),h=r.colRowToCellIndex(o,n);return null===h?null:this.cellIsVisible(h)?h:null}pointerToCellContainer(t,e){var i=this.pointerToCellIndex(t,e);if(null!==i)return this.getCellContainer(i)}cellIsVisible(t){var e=this.table.getCell(t,!1);return e&&this.visibleCells.contains(e)}eachVisibleCell(t,e){return this.visibleCells.each(t,e),this}iterateVisibleCell(t,e){return this.visibleCells.iterate(t,e),this}setCellsMask(t){var e,i;if(!0===t?(e=!0,i=0):!1===t?e=!1:(e=Ia(t,"mask",!0),i=Ia(t,"padding",0)),e){var s=new Vo(this,0,i);this.cellsMask=s.createGeometryMask(),this.add(s)}return this}maskCells(){for(var t,e=[],i=this.visibleCells.entries,s=0,r=i.length;s<r;s++)(t=i[s].getContainer())&&(t.isRexContainerLite?t.getAllChildren(e):e.push(t));ka(this,this.cellsMask,e)}resize(t,e){return this.width===t&&this.height===e?this:(super.resize(t,e),this.cellsMask&&kn(wa(this.cellsMask),t,e),this.expandCellSize&&this.table.setDefaultCellWidth(this.instWidth/this.table.colCount),this.updateTable(!0),this)}clearVisibleCellIndexes(){var t=this.preVisibleCells;this.preVisibleCells=this.visibleCells,this.visibleCells=t,this.visibleCells.clear()}showCells(){if(0!==this.cellsCount){var t=this.table,e=t.heightToRowIndex(-this.tableOY);e<0&&(e=0);var i=t.widthToColIndex(-this.tableOX);i<0&&(i=0);var s=t.colRowToCellIndex(i,e),r=this.bottomBound,n=this.rightBound,o=t.cellsCount-1,h=t.colCount-1,a=this.getTLX(i),l=a,u=this.getTLY(e);for(this.visibleStartY=null,this.visibleEndY=null,this.visibleStartX=null,this.visibleEndX=null,this.lastVisibleCellIdx=null;u<r&&s<=o;){if(this.table.isValidCellIdx(s)){null===this.visibleStartY&&(this.visibleStartY=e,this.visibleEndY=e),null===this.visibleStartX&&(this.visibleStartX=i,this.visibleEndX=i),null===this.lastVisibleCellIdx&&(this.lastVisibleCellIdx=s),this.visibleEndY<e&&(this.visibleEndY=e),this.visibleEndX<i&&(this.visibleEndX=i),this.lastVisibleCellIdx<s&&(this.lastVisibleCellIdx=s);var c=t.getCell(s,!0);this.visibleCells.set(c),this.preVisibleCells.contains(c)||this.showCell(c),0===this.scrollMode?c.setXY(l,u):c.setXY(u,l)}l<n&&i<h?(l+=t.getColWidth(i),i+=1):(l=a,u+=t.getRowHeight(e),i=this.visibleStartX,e+=1),s=t.colRowToCellIndex(i,e)}}}showCell(t){var e=null;if(this.cellContainersPool&&null!==(e=this.cellContainersPool.getFirstDead())&&e.setActive(!0).setVisible(!0),this.emit("cellvisible",t,e),this.cellContainersPool){var i=t.getContainer();i?null===e?this.cellContainersPool.add(i):e!==i&&(this.cellContainersPool.add(i),this.cellContainersPool.killAndHide(e)):null!==e&&this.cellContainersPool.killAndHide(e)}}hideCells(){var t=this.preVisibleCells,e=this.visibleCells;t.iterate((function(t){e.contains(t)||this.hideCell(t)}),this)}hideCell(t){if(this.emit("cellinvisible",t),this.cellContainersPool){var e=t.popContainer();e&&this.cellContainersPool.killAndHide(e)}t.destroyContainer()}get instHeight(){return 0===this.scrollMode?this.height:this.width}get instWidth(){return 0===this.scrollMode?this.width:this.height}get tableHeight(){return this.table.totalRowsHeight}get tableWidth(){return this.table.totalColumnWidth}get topTableOY(){return 0}get bottomTableOY(){return-this.tableVisibleHeight}get leftTableOX(){return 0}get rightTableOX(){return-this.tableVisibleWidth}tableOYExceedTop(t){return void 0===t&&(t=this.tableOY),t>this.topTableOY}tableOYExeceedBottom(t){return void 0===t&&(t=this.tableOY),t<this.bottomTableOY}tableOXExeceedLeft(t){return void 0===t&&(t=this.tableOX),t>this.leftTableOX}tableOXExeceedRight(t){return void 0===t&&(t=this.tableOX),t<this.rightTableOX}get tableVisibleHeight(){var t=this.tableHeight,e=this.instHeight;return t>e?t-e:0}get tableVisibleWidth(){var t=this.tableWidth,e=this.instWidth;return t>e?t-e:0}get bottomLeftY(){return-this.displayHeight*this.originY+this.displayHeight}get topRightX(){return-this.displayWidth*this.originX+this.displayWidth}get topLeftX(){return-this.displayWidth*this.originX}get topLeftY(){return-this.displayHeight*this.originY}get bottomBound(){return 0===this.scrollMode?this.bottomLeftY:this.topRightX}get rightBound(){return 0===this.scrollMode?this.topRightX:this.bottomLeftY}getTLX(t){var e=0===this.scrollMode?this.topLeftX:this.topLeftY;return this.tableOX+this.table.colIndexToWidth(0,t-1)+e}getTLY(t){var e=0===this.scrollMode?this.topLeftY:this.topLeftX;return this.tableOY+this.table.rowIndexToHeight(0,t-1)+e}}Object.assign(Da.prototype,Ea.GetBounds);const Ra={v:0,vertical:0,h:1,horizontal:1};var Ba=Da,La=function(t){Object.defineProperty(t,"childOY",{configurable:!0,get:function(){return t.tableOY},set:function(e){t.tableOY=e}}),Object.defineProperty(t,"topChildOY",{get:function(){return t.topTableOY}}),Object.defineProperty(t,"bottomChildOY",{get:function(){return t.bottomTableOY}})},Ya=function(t){t.on("cellvisible",(function(t,e){var i,s=this.createCellContainerCallback,r=this.createCellContainerCallbackScope;t.item=this.items[t.index],(i=r?s.call(r,t,e):s(t,e)).setOrigin&&i.setOrigin(0),i.isRexSizer&&i.layout(),t.item=void 0,t.setContainer(i)}),this)},Aa=function(t,e,i,s,r){var n;if(null!=(n=void 0===r?s:i.pointerToCellIndex(s,r))){var o=i.getCellContainer(n);t.emit(e,o,n)}},Wa=function(t){t._click=new Ko(t,{threshold:10}),t._click.on("click",(function(t,e,i){Aa(this.eventEmitter,"cell.click",e,i.x,i.y)}),this)},Fa=function(t){if(!t.isDown){var e=this.childrenMap.child,i=e.pointerToCellIndex(t.x,t.y);if(i!==this._lastOverCellIndex){var s=this._lastOverCellIndex;this._lastOverCellIndex=i,Aa(this.eventEmitter,"cell.out",e,s),Aa(this.eventEmitter,"cell.over",e,i)}}},Ha=function(){var t=this.childrenMap.child,e=this._lastOverCellIndex;this._lastOverCellIndex=void 0,Aa(this.eventEmitter,"cell.out",t,e)},Va=function(t){t.on("pointermove",Fa,this).on("pointerover",Fa,this).on("pointerup",Ha,this).on("pointerout",Ha,this)},Xa=j,Ga=function(t){t._tap=new Xa(t),t._tap.on("tap",(function(t){var e=`cell.${t.tapsCount}tap`;Aa(this.eventEmitter,e,t.gameObject,t.x,t.y)}),this)},Na=W,Ua=function(t){t._press=new Na(t),t._press.on("pressstart",(function(t){var e=t.gameObject,i=e.pointerToCellIndex(t.x,t.y);t._cellIndex=i,Aa(this.eventEmitter,"cell.pressstart",e,i)}),this).on("pressend",(function(t){var e=t.gameObject,i=t._cellIndex;t._cellIndex=void 0,Aa(this.eventEmitter,"cell.pressend",e,i)}),this)},Ja=function(t){t.setInteractive(),Wa.call(this,t),Va.call(this,t),Ga.call(this,t),Ua.call(this,t)},Za=function(t){void 0===t?this.items.length=0:this.items=t;var e=this.childrenMap.child;return e.setCellsCount(this.items.length),e.updateTable(!0),this.resizeController(),this};const Ka=Phaser.Utils.Objects.GetValue;class $a extends pa{constructor(t,e){void 0===e&&(e={});var i=$h(e),s=Ka(e,"table",void 0);void 0===s&&(s={}),s.scrollMode=i,s.clamplTableOXY=Ka(e,"clamplChildOY",!1);var r,n,o=Ka(s,"width",void 0),h=Ka(s,"height",void 0),a=new Ba(t,0,0,o,h,s);0===i?(r=void 0===o?1:0,n=void 0===h):(r=void 0===h?1:0,n=void 0===o),La(a),e.type="rexGridTable",e.child={gameObject:a,proportion:r,expand:n};var l=Ka(e,"space",void 0);l&&(l.child=l.table),super(t,e),this.addChildrenMap("table",a),this.eventEmitter=Ka(e,"eventEmitter",this);var u=Ka(e,"createCellContainerCallback",ee),c=Ka(e,"createCellContainerCallbackScope",void 0);this.setCreateCellContainerCallback(u,c),Ya.call(this,a),Ka(s,"interactive",!0)&&Ja.call(this,a),this.setItems(Ka(e,"items",[]))}setCreateCellContainerCallback(t,e){return this.createCellContainerCallback=t,this.createCellContainerCallbackScope=e,this}refresh(){return this.childrenMap.child.updateTable(!0),this}}var qa={setItems:Za};Object.assign($a.prototype,qa);var Qa=$a;Wt.register("gridTable",(function(t){var e=new Qa(this.scene,t);return this.scene.add.existing(e),e})),z(window,"RexPlugins.UI.GridTable",Qa);var tl={expandSubMenu:function(t,e){this.collapseSubMenu();var i=new this.constructor(this.scene,{items:e,orientation:this.orientation,createButtonCallback:this.root.createButtonCallback,createButtonCallbackScope:this.root.createButtonCallbackScope,easeIn:this.root.easeIn,easeOut:this.root.easeOut,root:this.root,parent:t});return this.add(i,null),this.childrenMap.subMenu=i,this},collapse:function(){return this.root.easeOut?this.scaleDownDestroy(this.root.easeOut):this.destroy(),this.collapseSubMenu(),this},collapseSubMenu:function(){if(void 0===this.childrenMap.subMenu)return this;var t=this.childrenMap.subMenu;return this.childrenMap.subMenu=void 0,this.remove(t),t.collapse(),this}},el=function(t,e,i,s){var r,n,o=[];if(e&&i)for(var h=0,a=e.length;h<a;h++)(r=e[h]).scene=t,n=s?i.call(s,r,h):i(r,h),r.scene=void 0,o.push(n);return o},il=function(t){t.on(t.root.expandEventName,(function(t,e){if(!this.isPassedEvent){var i=this.items[e].children;i&&this.expandSubMenu(t,i)}}),t).on("button.click",(function(t,e,i,s){this!==this.root&&(this.root.isPassedEvent=!0,this.root.emit("button.click",t,e,i,s),this.root.isPassedEvent=!1)}),t).on("button.over",(function(t,e,i,s){this!==this.root&&(this.root.isPassedEvent=!0,this.root.emit("button.over",t,e,i,s),this.root.isPassedEvent=!1)}),t).on("button.out",(function(t,e,i,s){this!==this.root&&(this.root.isPassedEvent=!0,this.root.emit("button.out",t,e,i,s),this.root.isPassedEvent=!1)}),t)};const sl=Phaser.Utils.Objects.GetValue;class rl extends oh{constructor(t,e){void 0===e&&(e={}),e.hasOwnProperty("orientation")||(e.orientation=1);var i=sl(e,"items",void 0),s=sl(e,"createButtonCallback",void 0),r=sl(e,"createButtonCallbackScope",void 0);if(e.buttons=el(t,i,s,r),super(t,e),this.type="rexMenu",this.items=i,this.root=sl(e,"root",this),this.root===this){if(this.expandEventName=sl(e,"expandEvent","button.click"),this.easeIn=sl(e,"easeIn",void 0),this.easeOut=sl(e,"easeOut",void 0),this.bounds=sl(e,"bounds",void 0),this.expandOrientation=sl(e,"expandOrientation",void 0),void 0===this.expandOrientation){var n=this.bounds;void 0===n&&(n=Br(t)),0===this.orientation?this.expandOrientation=this.y<n.centerY?1:3:this.expandOrientation=this.x<n.centerX?0:2}this.createButtonCallback=s,this.createButtonCallbackScope=r,this.isPassedEvent=!1}this.setOrigin(0).layout();var o=sl(e,"parent",void 0);if(o)switch(this.root.expandOrientation){case 0:this.alignTop(o.top).alignLeft(o.right);break;case 1:this.alignLeft(o.left).alignTop(o.bottom);break;case 2:this.alignTop(o.top).alignRight(o.left);break;case 3:this.alignLeft(o.left).alignBottom(o.top)}this.pushIntoBounds(this.root.bounds),il(this),this.root.easeIn&&this.popUp(this.root.easeIn)}isInTouching(t){return!!super.isInTouching(t)||!!this.childrenMap.subMenu&&this.childrenMap.subMenu.isInTouching(t)}}Object.assign(rl.prototype,tl);var nl=rl;Wt.register("menu",(function(t){var e=new nl(this.scene,t);return this.scene.add.existing(e),e})),z(window,"RexPlugins.UI.Menu",nl);const ol=Phaser.GameObjects.Text;var hl=function(t){return t instanceof ol};const al=Phaser.Utils.Objects.GetValue,ll=Phaser.Math.Clamp;var ul=function(t){return Array.isArray(t)?t=t.join("\n"):"number"==typeof t&&(t=t.toString()),t},cl=class{constructor(t,e){this.gameObject=t,this.scene=f(t),this.setTextObjectType(),this.lines=void 0,this.resetFromJSON(e),this.boot()}resetFromJSON(t){return this.setText(al(t,"text","")),this.setStartIdx(al(t,"start",0)),this.setPageIdx(al(t,"page",-1)),this}toJSON(){return{text:this.text,start:this.startLineIdx,page:this.pageIndex,pageCount:this.pageCount}}boot(){this.gameObject.once("destroy",this.destroy,this)}shutdown(){return void 0===this.lines||(0===this.textObjectType?this.lines.length=0:this.lines.destroy()),this.gameObject=void 0,this.scene=void 0,this}destroy(){this.shutdown()}setTextObjectType(){return this.textObjectType=hl(this.gameObject)?0:1,this}get isFirstPage(){return this.pageIndex<=0}get isLastPage(){return this.pageIndex>=this.pageCount-1}setText(t,e){return void 0===e&&(e=!0),this.text=ul(t),0===this.textObjectType?this.lines=this.gameObject.getWrappedText(this.text):this.lines=this.gameObject.getPenManager(this.text,this.lines),this.pageCount=Math.ceil(this.totalLinesCount/this.pageLinesCount),e&&this.resetPageIdx(),this}appendText(t){return this.setText(this.text.concat(ul(t))),this}getPage(t){return void 0===t&&(t=this.pageIndex),this.setPageIdx(t).getLines()}getNextPage(){return this.getPage(this.pageIndex+1)}getPreviousPage(){return this.getPage(this.pageIndex-1)}showPage(t){return this.displayText(this.getPage()),this}showNextPage(){return this.displayText(this.getNextPage()),this}showPreviousPage(){return this.displayText(this.getPreviousPage()),this}show(){return this.displayText(this.getLines()),this}showNextLine(){return this.displayText(this.setStartIdx(this.startLineIdx+1).getLines()),this}showPreviousLine(){return this.displayText(this.setStartIdx(this.startLineIdx-1).getLines()),this}setStartIdx(t){return t=ll(t,0,this.totalLinesCount-1),this.startLineIdx=t,this}resetPageIdx(){this.pageIndex=-1}setPageIdx(t){return t=ll(t,0,this.pageCount-1),this.pageIndex=t,this.setStartIdx(this.pageIndex*this.pageLinesCount),this}get totalLinesCount(){return 0===this.textObjectType?this.lines.length:this.lines.linesCount}get pageLinesCount(){var t=this.gameObject.style.maxLines;return t>0?t:this.totalLinesCount}getLines(t){void 0===t&&(t=this.startLineIdx);var e,i=t+this.pageLinesCount;if(0===this.textObjectType)e=this.lines.slice(t,i).join("\n");else{var s=this.lines.getLineStartIndex(t),r=this.lines.getLineEndIndex(i-1);e=this.lines.getSliceTagText(s,r,!0)}return e}displayText(t){this.gameObject.setText(t)}};const dl=Phaser.Utils.Objects.GetFastValue,pl=Phaser.Utils.Objects.GetValue;class fl{constructor(t,e){this.gameObject=t,this.scene=f(t),this.setEventEmitter(pl(e,"eventEmitter",void 0)),this.timer=null,this.resetFromJSON(e),this.boot()}resetFromJSON(t){this.setTypeMode(pl(t,"typeMode",0)),this.setTypeSpeed(pl(t,"speed",333)),this.setTextCallback=dl(t,"setTextCallback",null),this.setTextCallbackScope=dl(t,"setTextCallbackScope",null),this.typingIdx=dl(t,"typingIdx",0),this.text=gl(dl(t,"text","")),this.textLen=dl(t,"textLen",0),this.insertIdx=dl(t,"insertIdx",null);var e=dl(t,"elapsed",null);return null!==e&&this.start(void 0,void 0,this.typingIdx,e),this}toJSON(){var t,e=this.getTimer();return t=e?e.elapsed:null,{typeMode:this.typeMode,speed:this.speed,setTextCallback:this.setTextCallback,setTextCallbackScope:this.setTextCallbackScope,typingIdx:this.typingIdx,text:this.text,textLen:this.textLen,insertIdx:this.insertIdx,elapsed:t}}boot(){return this.gameObject.once&&this.gameObject.once("destroy",this.destroy,this),this}shutdown(){return this.destroyEventEmitter(),this.freeTimer(),this.gameObject=void 0,this.scene=void 0,this}destroy(){return this.shutdown(),this}setTypeMode(t){return"string"==typeof t&&(t=vl[t]),this.typeMode=t,this}setTypeSpeed(t){return this.speed=t,this}get isTyping(){return null!==this.getTimer()}get isLastChar(){return this.typingIdx===this.textLen}start(t,e,i,s){return void 0!==t&&this.setTypingContent(t),void 0!==e&&(this.speed=e),void 0===i&&(i=0),this.typingIdx=i+1,0===this.speed?this.stop(!0):this.startTimer(s),this}appendText(t){var e=this.text.concat(gl(t));return this.isTyping?this.setTypingContent(e):this.start(e,void 0,this.textLen),this}stop(t){return this.getTimer()&&this.freeTimer(),t&&(this.typingIdx=this.textLen,this.setText(this.text),this.emit("type"),this.emit("complete",this,this.gameObject)),this}pause(){var t=this.getTimer();return t&&(t.paused=!0),this}resume(){var t=this.getTimer();return t&&(t.paused=!1),this}setTypingContent(t){return this.text=gl(t),this.textLen=this.getTextLength(this.text),this}onTyping(){var t=this.getTypingString(this.text,this.typingIdx,this.textLen,this.typeMode);this.setText(t),this.emit("type"),this.isLastChar?(this.freeTimer(),this.emit("complete",this,this.gameObject)):(this.timer.delay=this.speed,this.typingIdx++)}getTypingString(t,e,i,s){var r;if(0===s){var n=0,o=e;this.insertIdx=o,r=this.getSubString(t,n,o)}else if(1===s){n=(o=i)-e;this.insertIdx=0,r=this.getSubString(t,n,o)}else if(2===s){var h=i/2;o=(n=Math.floor(h-e/2))+e;this.insertIdx=e%2?e:0,r=this.getSubString(t,n,o)}else if(3===s){var a,l=Math.floor(e/2);if(l>0){n=(o=i)-l;a=this.getSubString(t,n,o)}else a="";var u,c=e-l;if(c>0){o=(n=0)+c;this.insertIdx=o,u=this.getSubString(t,n,o)}else u="",this.insertIdx=0;r=u+a}return r}startTimer(t){var e;return this.timer&&this.freeTimer(),void 0===t?(0,e=0):(this.speed,e=t),this.timer=this.scene.time.addEvent({delay:0,startAt:e,loop:!0,callback:this.onTyping,callbackScope:this}),this}getTimer(){return this.timer}freeTimer(){return this.timer&&(this.timer.remove(),this.timer=null),this}setText(t){this.setTextCallback&&(t=this.setTextCallbackScope?this.setTextCallback.call(this.setTextCallbackScope,t,this.isLastChar,this.insertIdx):this.setTextCallback(t,this.isLastChar,this.insertIdx)),this.gameObject.setText(t)}getTextLength(t){var e=this.gameObject;return e.getPlainText?e.getPlainText(t).length:t.length}getSubString(t,e,i){var s=this.gameObject;return s.getSubString?s.getSubString(t,e,i):t.slice(e,i)}}Object.assign(fl.prototype,h);var gl=function(t){return Array.isArray(t)?t=t.join("\n"):"number"==typeof t&&(t=t.toString()),t};const vl={"left-to-right":0,"right-to-left":1,"middle-to-sides":2,"sides-to-middle":3};var ml=fl;const yl=Phaser.Utils.Objects.GetValue;var xl=function(t){return t.add.text(0,0,"",{wordWrap:{width:200},maxLines:5})},bl=class extends Go{constructor(t,e){void 0===e&&(e={text:xl(t)}),super(t,e),this.type="rexTextBox";var i=this.childrenMap.text;this.page=new cl(i,yl(e,"page",void 0)),this.typing=new ml(i,yl(e,"type",void 0)),this.typing.on("complete",this.onPageEnd,this).on("type",this.onType,this),this.textWidth=i.width,this.textHeight=i.height}start(t,e){return this.page.setText(t),void 0!==e&&this.typing.setTypeSpeed(e),this.typeNextPage(),this}typeNextPage(){if(this.page.isLastPage)this.emit("complete");else{var t=this.page.getNextPage();this.typing.start(t)}return this}pause(){return this.typing.pause(),this}resume(){return this.typing.resume(),this}stop(t){return this.typing.stop(t),this}get isTyping(){return this.typing.isTyping}get isLastPage(){return this.page.isLastPage}get isFirstPage(){return this.page.isFirstPage}get pageCount(){return this.page.pageCount}get pageIndex(){return this.page.pageIndex}onType(){var t=this.childrenMap.text;this.textWidth===t.width&&this.textHeight===t.height||(this.textWidth=t.width,this.textHeight=t.height,this.getTopmostSizer().layout()),this.emit("type")}onPageEnd(){this.emit("pageend")}};Wt.register("textBox",(function(t){var e=new bl(this.scene,t);return this.scene.add.existing(e),e})),z(window,"RexPlugins.UI.TextBox",bl);const wl=Phaser.Utils.Objects.GetValue,Cl=Phaser.Math.Percent,Sl=Phaser.Math.Linear;var Ol=class extends ao{constructor(t,e){super(t,e),this.type="rexNumberBar";var i,s=wl(e,"background",void 0),r=wl(e,"icon",void 0),n=wl(e,"iconMask",void 0),o=wl(e,"slider",void 0),h=wl(e,"text",void 0),a=wl(e,"space.left",0),l=wl(e,"space.right",0),u=wl(e,"space.top",0),c=wl(e,"space.bottom",0),d=wl(e,"space.icon",0),p=wl(e,"space.slider",0);(s&&this.addBackground(s),r)&&(f=0===this.orientation?{left:a,right:o||h?d:l,top:u,bottom:c}:{left:a,right:l,top:u,bottom:o||h?d:c},this.add(r,0,"center",f),n&&(n=new Vo(r,1),r.setMask(n.createGeometryMask()),this.add(n,null)));if(o){var f,g;if(o.orientation=0==this.orientation?1:0,o.eventEmitter=this,o.value=null,o.hasOwnProperty("input")||(o.input=-1),i=new Jh(t,o),f=0===this.orientation?{left:r?0:a,right:h?p:l,top:u,bottom:c}:{left:a,right:l,top:r?0:u,bottom:h?p:c},0===this.orientation)g=void 0===wl(o,"width",void 0)?1:0;else g=void 0===wl(o,"height",void 0)?1:0;this.add(i,g,"center",f)}h&&(f=0===this.orientation?{left:r||o?0:a,right:l,top:u,bottom:c}:{left:a,right:l,top:r||o?0:u,bottom:c},this.add(h,0,"center",f));this.addChildrenMap("background",s),this.addChildrenMap("icon",r),this.addChildrenMap("slider",i),this.addChildrenMap("text",h);var v=wl(e,"valuechangeCallback",null);if(null!==v){var m=wl(e,"valuechangeCallbackScope",void 0);this.on("valuechange",v,m)}this.setEnable(wl(e,"enable",void 0)),this.setValue(wl(e,"value",0))}setEnable(t){return this.childrenMap.slider?this:(void 0===t&&(t=!0),this.childrenMap.slider.enable=t,this)}get value(){return this.childrenMap.slider?this.childrenMap.slider.value:0}set value(t){this.childrenMap.slider&&(this.childrenMap.slider.value=t)}setValue(t,e,i){return void 0!==e&&(t=Cl(t,e,i)),this.value=t,this}addValue(t,e,i){return void 0!==e&&(t=Cl(t,e,i)),this.value+=t,this}getValue(t,e){var i=this.value;return void 0!==t&&(i=Sl(t,e,i)),i}get text(){var t=this.childrenMap.text;return void 0===t?"":t.text?t.text:t.getData("text")}set text(t){var e=this.childrenMap.text;void 0!==e&&(e.setText?e.setText(t):e.setData("text",t))}setText(t){return this.text=t,this}};Wt.register("numberBar",(function(t){var e=new Ol(this.scene,t);return this.scene.add.existing(e),e})),z(window,"RexPlugins.UI.NumberBar",Ol);const _l=Phaser.Utils.Objects.IsPlainObject,Pl=Phaser.Display.Align.TOP_LEFT;var Tl=function(t,e,i,s,r){if(_l(e)){var n=e;e=GetValue(n,"key",0),i=GetValue(n,"align",Pl),s=GetValue(n,"padding",0),r=GetValue(n,"expand",!1)}return"string"==typeof i&&(i=eo[i]),void 0===i&&(i=ALIGN_CENTER),void 0===s&&(s=0),void 0===r&&(r=!0),(n=this.getSizerConfig(t)).parent=this,n.align=i,n.padding=qn(s),n.expand=r,this.sizerChildren.has(e)&&this.sizerChildren.get(e).destroy(),this.sizerChildren.set(e,t),t.setVisible(!1),this.add(t),this},kl=function(t){return void 0===t?null:this.sizerChildren.has(t)?this.sizerChildren.get(t):null},Ml=function(t){this._previousKey=this._currentKey;var e=this.previousPage;e&&(0===this.swapMode?(e.setVisible(!1),this.resetChildVisibleState(e),this.emit("pageinvisible",e,this._previousKey,this)):e.destroy()),t&&!this.sizerChildren.has(t)&&this.emit("createpage",t,this),this._currentKey=t;var i=this.currentPage;return i&&(i.setVisible(!0),this.resetChildVisibleState(i),this.emit("pagevisible",i,this._currentKey,this)),this},El=function(){if(this.rexSizer.hidden)return 0;var t,e,i,s=0,r=this.sizerChildren.entries;for(var n in r)i=(t=r[n]).isRexSizer?Math.max(t.minWidth,t.childrenWidth):t.width,i+=(e=t.rexSizer.padding).left+e.right,s=Math.max(i,s);return s},jl=function(){if(this.rexSizer.hidden)return 0;var t,e,i,s=0,r=this.sizerChildren.entries;for(var n in r)i=(t=r[n]).isRexSizer?Math.max(t.minHeight,t.childrenHeight):t.height,i+=(e=t.rexSizer.padding).top+e.bottom,s=Math.max(i,s);return s},Il=function(t){void 0===t&&(t=[]);var e,i=this.sizerChildren.entries;for(var s in i)(e=i[s]).isRexSizer&&t.push(e);return t},zl=function(t,e){var i,s=e.rexSizer,r=s.padding;return s.expand&&(i=t.width-r.left-r.right),i},Dl=function(t,e){var i,s=e.rexSizer,r=s.padding;return s.expand&&(i=t.height-r.top-r.bottom),i};const Rl=Phaser.Display.Align.In.QuickSet;var Bl={addPage:Tl,getPage:kl,swapPage:Ml,getChildrenWidth:El,getChildrenHeight:jl,getChildrenSizers:Il,layout:function(t,e,i){if(this.rexSizer.hidden)return this;var s,r,n;this.layoutInit(t),void 0===e&&(e=Math.max(this.childrenWidth,this.minWidth)),void 0===i&&(i=Math.max(this.childrenHeight,this.minHeight)),this.resize(e,i);var o,h,a,l,u,c,d=this.left,p=this.top,f=this.pages;for(var g in f)n=(r=(s=f[g]).rexSizer).padding,s.isRexSizer?s.layout(this,zl(this,s),Dl(this,s)):(u=void 0,c=void 0,r.expand&&(c=this.height-n.top-n.bottom,u=this.width-n.left-n.right),kn(s,u,c)),o=d+n.left,a=this.width-n.left-n.right,h=p+n.top,l=this.height-n.top-n.bottom,En.setPosition(o,h).setSize(a,l),Rl(s,En,r.align),this.resetChildPositionState(s);return this.layoutBackgrounds(),this},_layoutInit:function(){this._childrenWidth=void 0,this._childrenHeight=void 0}};const Ll=Phaser.Utils.Objects.IsPlainObject,Yl=Phaser.Utils.Objects.GetValue,Al=Phaser.Structs.Map;class Wl extends Hn{constructor(t,e,i,s,r,n){Ll(e)?(e=Yl(n=e,"x",0),i=Yl(n,"y",0),s=Yl(n,"width",void 0),r=Yl(n,"height",void 0)):Ll(s)&&(s=Yl(n=s,"width",void 0),r=Yl(n,"height",void 0)),super(t,e,i,s,r,n),this.type="rexPages",this._previousKey=void 0,this._currentKey=void 0,this.sizerChildren=new Al,this.setSwapMode(Yl(n,"swapMode",0)),this.addChildrenMap("pages",this.pages)}destroy(t){this.scene&&(this.sizerChildren.clear(),super.destroy(t))}setSwapMode(t){return"string"==typeof t&&(t=Fl[t]),this.swapMode=t,this}get previousKey(){return this._previousKey}get currentKey(){return this._currentKey}set currentKey(t){this.swapPage(t)}get currentPage(){return this.getPage(this.currentKey)}get previousPage(){return this.getPage(this.previousKey)}get keys(){return this.sizerChildren.keys()}get pages(){return this.sizerChildren.entries}}Object.assign(Wl.prototype,Bl);const Fl={invisible:0,destroy:1};var Hl=Wl;Wt.register("pages",(function(t,e,i,s,r){var n=new Hl(this.scene,t,e,i,s,r);return this.scene.add.existing(n),n})),z(window,"RexPlugins.UI.Pages",Hl);const Vl=Phaser.Display.Align.TOP_LEFT;var Xl=function(t,e,i){void 0===i&&(i=!0),this.add(t),void 0===e&&(e=0);var s=this.getSizerConfig(t);return s.parent=this,s.align=Vl,s.padding=qn(e),s.expand=!0,this.textObject=t,this.textObjectType=hl(t)?0:1,s.preOffsetY=0,s.offsetY=0,i&&(this.textMask=new Vo(this.textObject),this.textObject.setMask(this.textMask.createGeometryMask()),this.add(this.textMask)),this},Gl=function(t){return void 0!==t&&(this.text=t),0===this.textObjectType?this.lines=this.textObject.getWrappedText(this.text):this.lines=this.textObject.getPenManager(this.text,this.lines),this.updateTextObject(),this},Nl=function(t){return(t-this.textLineSpacing)/(this.textLineHeight+this.textLineSpacing)},Ul=function(t){return t*(this.textLineHeight+this.textLineSpacing)-this.textLineSpacing},Jl=function(t){var e,i=t+this.textObject.style.maxLines;if(0===this.textObjectType)e=this.lines.slice(t,i).join("\n");else{var s=this.lines.getLineStartIndex(t),r=this.lines.getLineEndIndex(i-1);e=this.lines.getSliceTagText(s,r,!0)}return e},Zl=function(){var t=this.textObject.rexSizer;this.textObject.y+=t.offsetY-t.preOffsetY,t.preOffsetY=t.offsetY,this.resetChildPositionState(this.textObject)},Kl=function(){var t=Math.max(Math.floor(Nl.call(this,-this.textOY)),0),e=Ul.call(this,t)+this.textOY;return this.textObject.setText(Jl.call(this,t)),this.textObject.rexSizer.offsetY=e,Zl.call(this),this},$l=function(t,e,i){if(t.width!==e||t.height!==i){t.setFixedSize(e,i);var s=t.style,r=Math.max(e,0),n=Math.ceil(Nl.call(this,i))+1;0===this.textObjectType?(s.wordWrapWidth=r,s.maxLines=n):(s.wrapWidth=r,s.maxLines=n),this.setText()}};const ql=Phaser.Display.Align.In.QuickSet;var Ql={setTextObject:Xl,setText:Gl,updateTextObject:Kl,layout:function(t,e,i){if(this.rexSizer.hidden)return this;var s,r,n;this.layoutInit(t),void 0===e&&(e=this.minWidth),void 0===i&&(i=this.minHeight),this.resize(e,i);var o,h,a,l,u=this.left,c=this.top;return(s=this.textObject).rexSizer.hidden||(o=u+(n=(r=s.rexSizer).padding).left,h=c+n.top,a=this.width-n.left-n.right,l=this.height-n.top-n.bottom,$l.call(this,s,a,l),En.setPosition(o,h).setSize(a,l),ql(s,En,r.align),this.textMask&&(this.textMask.setPosition().resize(),this.resetChildPositionState(this.textMask)),r.preOffsetY=0,Zl.call(this)),this.layoutBackgrounds(),this}};const tu=Phaser.Utils.Objects.IsPlainObject,eu=Phaser.Utils.Objects.GetValue;class iu extends Hn{constructor(t,e,i,s,r,n){tu(e)?(e=eu(n=e,"x",0),i=eu(n,"y",0),s=eu(n,"width",void 0),r=eu(n,"height",void 0)):tu(s)&&(s=eu(n=s,"width",void 0),r=eu(n,"height",void 0)),super(t,e,i,s,r,n),this.type="rexTextBlock",this.textObject=void 0,this.textMask=void 0,this.textObjectType=void 0,this.lines=void 0,this.text=eu(n,"content",""),this._textOY=0,this.execeedTopState=!1,this.execeedBottomState=!1,this.setClampMode(eu(n,"clamplTextOY",!0));var o=eu(n,"background",void 0),h=eu(n,"text",void 0);void 0===h&&(h=su(t));var a=eu(n,"textMask",!0),l=eu(n,"space",void 0);o&&this.addBackground(o),this.setTextObject(h,l,a)}destroy(t){this.scene&&(this.textObject=void 0,this.textMask=void 0,void 0===this.lines||(0===this.textObjectType?this.lines.length=0:this.lines.destroy()),super.destroy(t))}setClampMode(t){return this.clampTextOYMode=t,this}get textLineHeight(){var t=this.textObject.style;return t.metrics.fontSize+t.strokeThickness}get textLineSpacing(){return this.textObject.lineSpacing}get linesCount(){return void 0===this.lines?0:0===this.textObjectType?this.lines.length:this.lines.linesCount}get visibleLinesCount(){return Math.floor(Nl.call(this,this.textObject.height))}get topTextOY(){return 0}get bottomTextOY(){return-this.textVisibleHeight}get textHeight(){return Ul.call(this,this.linesCount)}get textObjectHeight(){return this.textObject.height}get textVisibleHeight(){var t=this.textHeight,e=this.textObjectHeight;return t>e?t-e:0}textOYExceedTop(t){return void 0===t&&(t=this.textOY),t>this.topTextOY}textOYExeceedBottom(t){return void 0===t&&(t=this.textOY),t<this.bottomTextOY}get textOY(){return this._textOY}set textOY(t){var e=this.topTextOY,i=this.bottomTextOY,s=this.textOYExceedTop(t),r=this.textOYExeceedBottom(t);this.clampTextOYMode&&(this.visibleLinesCount>this.linesCount?t=0:s?t=e:r&&(t=i)),this._textOY!==t&&(this._textOY=t,this.updateTextObject()),s&&(this.execeedTopState||this.emit("execeedtop",this,t,e)),this.execeedTopState=s,r&&(this.execeedBottomState||this.emit("execeedbottom",this,t,i)),this.execeedBottomState=r}setTextOY(t){return this.textOY=t,this}set t(t){this.textOY=-this.textVisibleHeight*t}get t(){var t=this.textVisibleHeight;return 0===t?0:this.textOY/-t}setTextOYByPercentage(t){return this.t=t,this}}var su=function(t){return t.add.text(0,0,"")};Object.assign(iu.prototype,Ql);var ru=iu;Wt.register("textBlock",(function(t,e,i,s,r,n){var o=new ru(this.scene,t,e,i,s,r,n);return this.scene.add.existing(o),o})),z(window,"RexPlugins.UI.TextBlock",ru);var nu=function(t){Object.defineProperty(t,"childOY",{configurable:!0,get:function(){return t.textOY},set:function(e){t.textOY=e}}),Object.defineProperty(t,"topChildOY",{get:function(){return t.topTextOY}}),Object.defineProperty(t,"bottomChildOY",{get:function(){return t.bottomTextOY}})},ou=function(t){return this.childrenMap.child.setText(t),this.resizeController(),this},hu=function(t){return this.setText(this.text+t),this};const au=Phaser.Utils.Objects.GetValue;class lu extends pa{constructor(t,e){void 0===e&&(e={});var i=au(e,"text",void 0),s=au(e,"textWidth",void 0),r=au(e,"textHeight",void 0),n=au(e,"textMask",!0),o=au(e,"content",""),h=new ru(t,{width:s,height:r,text:i,textMask:n,content:o,clamplTextOY:au(e,"clamplChildOY",!1)}),a=void 0===s?1:0,l=void 0===r;nu(h),e.scrollMode=0,e.type="rexTextArea",e.child={gameObject:h,proportion:a,expand:l};var u=au(e,"space",void 0);u&&(u.child=u.text),super(t,e),this.addChildrenMap("text",i)}get text(){return this.childrenMap.child.text}get linesCount(){return this.childrenMap.child.linesCount}}var uu={setText:ou,appendText:hu};Object.assign(lu.prototype,uu);var cu=lu;Wt.register("textArea",(function(t){var e=new cu(this.scene,t);return this.scene.add.existing(e),e})),z(window,"RexPlugins.UI.TextArea",cu);const du=Phaser.Utils.Objects.GetValue,pu=Phaser.Display.Align.TOP_LEFT;var fu={setChild:function(t,e,i){t.setOrigin&&t.setOrigin(0),this.add(t);var s,r,n=this.getSizerConfig(t);if(n.parent=this,n.align=pu,n.expand=e,this.child=t,!0===i?(s=!0,r=0):!1===i?s=!1:(s=du(i,"mask",!0),r=du(i,"padding",0)),s){var o=new Vo(this,0,r);this.childMask=o.createGeometryMask(),this.add(o)}return this},getChildrenWidth:function(){if(this.rexSizer.hidden)return 0;var t=this.child;return t.rexSizer.hidden?0:0===this.scrollMode?t.isRexSizer?Math.max(t.minWidth,t.childrenWidth):t.width:0},getChildrenHeight:function(){if(this.rexSizer.hidden)return 0;var t=this.child;return t.rexSizer.hidden?0:0===this.scrollMode?0:t.isRexSizer?Math.max(t.minHeight,t.childrenHeight):t.height},resetChildPosition:function(){var t=this.left,e=this.top;0===this.scrollMode?e+=this.childOY:t+=this.childOY,this.child.setPosition(t,e),ka(this,this.childMask,this.child.getAllChildren()),this.resetChildPositionState(this.child)},layout:function(t,e,i){if(this.rexSizer.hidden)return this;this.layoutInit(t),void 0===e&&(e=Math.max(this.childrenWidth,this.minWidth)),void 0===i&&(i=Math.max(this.childrenHeight,this.minHeight)),this.resize(e,i);var s,r,n=this.child;if(!n.rexSizer.hidden&&(0===this.scrollMode?s=this.width:r=this.height,n.isRexSizer?n.layout(this,s,r):kn(n,s,r),this.resetChildPosition(),this.childMask)){var o=wa(this.childMask);o.setPosition().resize(),this.resetChildPositionState(o)}return this}};const gu=Phaser.Utils.Objects.IsPlainObject,vu=Phaser.Utils.Objects.GetValue;class mu extends Hn{constructor(t,e,i,s,r,n){gu(e)?(e=vu(n=e,"x",0),i=vu(n,"y",0),s=vu(n,"width",void 0),r=vu(n,"height",void 0)):gu(s)&&(s=vu(n=s,"width",void 0),r=vu(n,"height",void 0)),super(t,e,i,s,r,n),this.type="rexScrollableBlock",this.child=void 0,this.childMask=void 0,this._childOY=0,this.execeedTopState=!1,this.execeedBottomState=!1,this.setScrollMode(vu(n,"scrollMode",!0)),this.setClampMode(vu(n,"clamplChildOY",!0));var o=vu(n,"child",void 0),h=vu(n,"expand",!0),a=vu(n,"mask",void 0);this.setChild(o,h,a)}destroy(t){this.scene&&(this.child=void 0,this.childMask&&(this.childMask.destroy(),this.childMask=void 0),super.destroy(t))}setScrollMode(t){return"string"==typeof t&&(t=Zh[t.toLowerCase()]),this.scrollMode=t,this}setClampMode(t){return this.clampChildOYMode=t,this}get instHeight(){return 0===this.scrollMode?this.height:this.width}get instWidth(){return 0===this.scrollMode?this.width:this.height}get childHeight(){return 0===this.scrollMode?this.child.height:this.child.width}get childWidth(){return 0===this.scrollMode?this.child.width:this.child.height}get topChildOY(){return 0}get bottomChildOY(){return-this.visibleHeight}get visibleHeight(){var t=this.childHeight,e=this.instHeight;return t>e?t-e:0}childOYExceedTop(t){return void 0===t&&(t=this.childOY),t>this.topChildOY}childOYExeceedBottom(t){return void 0===t&&(t=this.childOY),t<this.bottomChildOY}get childOY(){return this._childOY}set childOY(t){var e=this.topChildOY,i=this.bottomChildOY,s=this.childOYExceedTop(t),r=this.childOYExeceedBottom(t);this.clampChildOYMode&&(this.instHeight>this.childHeight?t=0:s?t=e:r&&(t=i)),this._childOY!==t&&(this._childOY=t,this.resetChildPosition()),s&&(this.execeedTopState||this.emit("execeedtop",this,t,e)),this.execeedTopState=s,r&&(this.execeedBottomState||this.emit("execeedbottom",this,t,i)),this.execeedBottomState=r}setChildOY(t){return this.childOY=t,this}set t(t){this.childOY=-this.visibleHeight*t}get t(){var t=this.visibleHeight;return 0===t?0:this.childOY/-t}setChildOYByPercentage(t){return this.t=t,this}}Object.assign(mu.prototype,fu);var yu=mu;Wt.register("scrollableBlock",(function(t){var e=new yu(this.scene,t);return this.scene.add.existing(e),e})),z(window,"RexPlugins.UI.ScrollableBlock",yu);const xu=Phaser.Utils.Objects.GetValue;var bu=class extends pa{constructor(t,e){void 0===e&&(e={});var i=$h(e),s=xu(e,"panel",void 0);void 0===s&&(s={}),s.scrollMode=i,s.clamplChildOY=xu(e,"clamplChildOY",!1);var r,n,o=new yu(t,s),h=xu(s,"width",void 0),a=xu(s,"height",void 0);0===i?(r=void 0===h?1:0,n=void 0===a):(r=void 0===a?1:0,n=void 0===h),e.type="rexScrollablePanel",e.child={gameObject:o,proportion:r,expand:n};var l=xu(e,"space",void 0);l&&(l.child=l.panel),super(t,e),this.addChildrenMap("panel",this.childrenMap.child.child)}};Wt.register("scrollablePanel",(function(t){var e=new bu(this.scene,t);return this.scene.add.existing(e),e})),z(window,"RexPlugins.UI.ScrollablePanel",bu);var wu={popUp:0,fadeIn:1,scaleDown:0,fadeOut:1},Cu={popUp:function(t,e){t.popUp(e)},scaleDown:function(t,e){t.scaleDownDestroy(e,void 0,void 0,!1)},fadeIn:function(t,e){t.fadeIn(e)},fadeOut:function(t,e){t.fadeOut(e,!1)}},Su=function(t,e,i,s){void 0===i&&(i=0),void 0===s&&(s=e.length),t.length=s-i;for(var r=0,n=t.length;r<n;r++)t[r]=e[r+i];return t},Ou=/^\s*-?(\d*\.?\d+|\d+\.?\d*)(e[-+]?\d+)?\s*$/i,_u=function(t){return"string"!=typeof t?t:(""===t?t=null:Ou.test(t)?t=parseFloat(t):"false"===screen?t=!1:"true"===t&&(t=!0),t)},Pu=function(t){return"[object Array]"===Object.prototype.toString.call(t)};const Tu=Phaser.Utils.Objects.GetValue;var ku=function(t,e,i){var s,r=Tu(i,"reverse",!1);if(Pu(t[0]))if(r)for(n=(o=t.length)-1;n>=0;n--)s=ku(t[n],e,i);else for(var n=0,o=t.length;n<o;n++)s=ku(t[n],e,i);else s=Mu(t,e,i);return s},Mu=function(t,e,i){var s,r=Tu(i,"argsConvert",void 0),n=Tu(i,"argsConvertScope",void 0),o=t[0];if(Eu=Su(Eu,t,1),r){!0===r&&(r=_u,n=void 0);for(var h=0,a=Eu.length;h<a;h++)Eu[h]=n?r.call(n,Eu[h],t):r(Eu[h],t)}return"string"==typeof o?null==(s=e[o])&&(s=Tu(e,o,null)):s=o,s.apply(e,Eu)},Eu=[],ju=ku,Iu=function(t){return p(t)?t.events:t.on?t:void 0};var zu=[];const Du={ms:0,s:1,sec:1},Ru={abs:0,absolute:0,inc:1,increment:1};var Bu=class extends c{constructor(t,e){super(t,e),this.parent=t,this.scene=f(t),this.resetFromJSON(e),this.boot()}resetFromJSON(t){return this.isRunning=S()(t,"isRunning",!1),this.state=S()(t,"state",0),this.commands=S()(t,"commands",[]),this.scope=S()(t,"scope",void 0),this.setTimeUnit(S()(t,"timeUnit",0)),this.setDtMode(S()(t,"dtMode",0)),this.setTimeScale(S()(t,"timeScale",1)),this.index=S()(t,"index",0),this.nextDt=S()(t,"nextDt",0),this.seek(S()(t,"now",0)),this.timeScale=S()(t,"timeScale",1),this}toJSON(){return{isRunning:this.isRunning,state:this.state,commands:this.commands,scope:this.scope,timeUnit:this.timeUnit,dtMode:this.dtMode,index:this.index,nextDt:this.nextDt,now:this.now,timeScale:this.timeScale,tickingMode:this.tickingMode}}boot(){super.boot();var t=Iu(this.parent);t&&t.once("destroy",this.destroy,this)}shutdown(){super.shutdown(),this.parent=void 0,this.scene=void 0,this.commands=void 0}destroy(){this.shutdown()}startTicking(){super.startTicking(),this.scene.events.on("update",this.update,this)}stopTicking(){super.stopTicking(),this.scene&&this.scene.events.off("update",this.update,this)}load(t,e,i){this.stop();var s=S()(i,"timeUnit",void 0);void 0!==s&&this.setTimeUnit(s);var r=S()(i,"dtMode",void 0);return void 0!==r&&this.setDtMode(r),t=t.filter((function(t){var e=t[0];return!isNaN(e)})).map((function(t){return"string"==typeof t[0]&&(t[0]=parseFloat(t[0])),t})),0===this.dtMode&&t.sort((function(t,e){var i=t[0],s=e[0];return i>s?1:i<s?-1:0})),this.commands=t,this.scope=e,this}start(t){return void 0===t&&(t=0),this.stop(),this.index=0,this.isRunning=!0,this.state=1,this.nextDt=this.getNextDt(0),this.seek(t),this.update(),this}pause(){return this.isRunning=!1,this}resume(){return this.isRunning=!0,this}stop(){return this.isRunning=!1,this.state=0,this}seek(t){return this.now=t,this}get isPlaying(){return this.isRunning}get completed(){return 2===this.state}setTimeScale(t){this.timeScale=t}update(t,e){if(!this.isRunning)return this;if(void 0!==t){if(0===this.timeScale||0===e)return this;this.now+=e*this.timeScale}if(this.nextDt>this.now)return this;for(;;){var i=this.commands[this.index],s=i[1];if(Pu(s)||(s=Su(zu,i,1)),ju(s,this.scope),this.emit("runcommand",s,this.scope),this.index===this.commands.length-1)return this.complete(),this;if(this.index++,this.nextDt=this.getNextDt(this.nextDt),this.nextDt>this.now)return this}}complete(){super.complete(),this.state=2}getNextDt(t){var e=this.commands[this.index][0];return 1===this.timeUnit&&(e*=1e3),1===this.dtMode&&(e+=t),e}setDtMode(t){return"string"==typeof t&&(t=Ru[t]),this.dtMode=t,this}setTimeUnit(t){return"string"==typeof t&&(t=Du[t]),this.timeUnit=t,this}};const Lu=Phaser.Utils.Objects.GetValue;var Yu=class extends Go{constructor(t,e){void 0===e&&(e={text:createDefaultTextObject(t)}),super(t,e),this.type="rexToast",this.setTransitInTime(Lu(e,"duration.in",200)),this.setDisplayTime(Lu(e,"duration.hold",1200)),this.setTransitOutTime(Lu(e,"duration.out",200)),this.setTransitInCallback(Lu(e,"transitIn",wu.popUp)),this.setTransitOutCallback(Lu(e,"transitOut",wu.scaleDown)),this.player=new Bu(this,{dtMode:1}),this.messages=[],this.setVisible(!1)}destroy(t){this.scene&&(this.player.destroy(),this.player=void 0,this.messages=void 0,super.destroy(t))}setDisplayTime(t){return this.displayTime=t,this}setTransitOutTime(t){return this.transitOutTime=t,this}setTransitInTime(t){return this.transitInTime=t,this}setTransitInCallback(t){switch("string"==typeof t&&(t=wu[t]),t){case wu.popUp:t=Cu.popUp;break;case wu.fadeIn:t=Cu.fadeIn}return this.transitInCallback=t,this}setTransitOutCallback(t){switch("string"==typeof t&&(t=wu[t]),t){case wu.scaleDown:t=Cu.scaleDown;break;case wu.fadeOut:t=Cu.fadeOut}return this.transitOutCallback=t,this}show(t){if(void 0===t){if(0===this.messages.length)return this;t=this.messages.shift()}if(this.player.isPlaying)return this.messages.push(t),this;this.setScale(1,1).setVisible(!0),"string"==typeof t?this.setText(t):t(this),this.layout();var e=[[0,[this.transitInCallback,this,this.transitInTime]],[this.transitInTime,[ee]],[this.displayTime,[this.transitOutCallback,this,this.transitOutTime]],[this.transitOutTime,[this.setVisible,!1]],[30,[ee]]];return this.player.load(e,this).once("complete",(function(){this.show()}),this).start(),this}};Wt.register("toast",(function(t){var e=new Yu(this.scene,t);return this.scene.add.existing(e),e})),z(window,"RexPlugins.UI.Toast",Yu);Wt.register("tap",(function(t,e){return R(t)||(e=t,t=this.scene),new Xa(t,e)})),z(window,"RexPlugins.UI.Tap",Xa);Wt.register("press",(function(t,e){return R(t)||(e=t,t=this.scene),new Na(t,e)})),z(window,"RexPlugins.UI.Press",Na);var Au=rt;Wt.register("swipe",(function(t,e){return R(t)||(e=t,t=this.scene),new Au(t,e)})),z(window,"RexPlugins.UI.Swipe",Au);var Wu=G;Wt.register("pan",(function(t,e){return R(t)||(e=t,t=this.scene),new Wu(t,e)})),z(window,"RexPlugins.UI.Pan",Wu);var Fu=wt;Wt.register("pinch",(function(t){return new Fu(this.scene,t)})),z(window,"RexPlugins.UI.Pinch",Fu);var Hu=Bt;Wt.register("rotate",(function(t){return new Hu(this.scene,t)})),z(window,"RexPlugins.UI.Rotate",Hu);const Vu=Phaser.Utils.Objects.IsPlainObject,Xu=Phaser.Utils.Objects.GetValue;var Gu=function(t,e,i){var s;if(void 0===t)t=i.texture.key,e=i.frame.name;else if(Vu(t)){var r=t;t=Xu(r,"key",i.texture.key),e=Xu(r,"frame",i.frame.name)}else"string"==typeof t||(s=t);return void 0===s&&(s=function(i){i.setTexture(t,e)}),s};const Nu=Phaser.Utils.Objects.GetValue,Uu=Phaser.Utils.Objects.GetAdvancedValue;class Ju{constructor(t,e){this.gameObject=t,this.scene=f(t),this.setEventEmitter(Nu(e,"eventEmitter",void 0)),this.scaleStart={},this.scaleEnd={},this.tween=void 0,this.resetFromJSON(e),this.boot()}resetFromJSON(t){return this.setOrientation(Nu(t,"orientation",0)),this.setDelay(Uu(t,"delay",0)),this.setDuration(Uu(t,"duration",500)),this.setEase(Nu(t,"ease","Sine")),this.setFrontFace(Nu(t,"front",void 0)),this.setBackFace(Nu(t,"back",void 0)),this.setFace(Nu(t,"face",0)),this}boot(){this.gameObject.once&&this.gameObject.once("destroy",this.destroy,this)}shutdown(){return this.destroyEventEmitter(),this.stop(),this.gameObject=void 0,this.scene=void 0,this}destroy(){return this.shutdown(),this}setOrientation(t){return"string"==typeof t&&(t=Zu[t]),this.orientation=t,this}setDelay(t){return this.delay=t,this}setDuration(t){return this.duration=t,this}setEase(t){return void 0===t&&(t="Linear"),this.ease=t,this}get isRunning(){return!!this.tween}get face(){return this._face}set face(t){"string"==typeof t&&(t=Ku[t]),this._face=t,0===t&&this.frontFaceCallback?this.frontFaceCallback(this.gameObject):1===t&&this.backFaceCallback&&this.backFaceCallback(this.gameObject)}setFace(t){return this.face=t,this}toggleFace(){var t=0===this.face?1:0;return this.setFace(t),this}setFrontFace(t,e){return this.frontFaceCallback=Gu(t,e,this.gameObject),this}setBackFace(t,e){return this.backFaceCallback=Gu(t,e,this.gameObject),this}start(){if(this.isRunning)return this;if(0===this.duration)return this.toggleFace().complete(),this;var t={targets:this.gameObject,duration:this.duration/2,ease:this.ease,yoyo:!0,repeat:0,onYoyo:this.toggleFace,onYoyoScope:this,onComplete:this.complete,onCompleteScope:this};return t[0===this.orientation?"scaleX":"scaleY"]={from:1,to:0},this.tween=this.scene.tweens.add(t),this}restart(){return this.stop().start(),this}flip(t){return this.isRunning?this:(void 0!==t&&this.setDuration(t),this.start(),this)}stop(){return this.tween?(this.tween.remove(),this.tween=void 0,this):this}complete(){return this.stop(),this.emit("complete",this,this.gameObject),this}}Object.assign(Ju.prototype,h);const Zu={x:0,horizontal:0,y:1,vertical:1},Ku={front:0,back:1};var $u=Ju;Wt.register("flip",(function(t,e){return new $u(t,e)})),z(window,"RexPlugins.UI.Flip",$u);var qu=function(t){t.stopPropagation()},Qu=function(t){t.addEventListener("touchstart",qu,!1),t.addEventListener("touchmove",qu,!1),t.addEventListener("touchend",qu,!1),t.addEventListener("mousedown",qu,!1),t.addEventListener("mouseup",qu,!1),t.addEventListener("mousemove",qu,!1)};const tc=Phaser.GameObjects.DOMElement,ec=Phaser.Utils.Objects.IsPlainObject,ic=Phaser.Utils.Objects.GetValue;const sc={id:["id",void 0],text:["value",void 0],placeholder:["placeholder",void 0],tooltip:["title",void 0],readOnly:["readonly",!1],spellCheck:["spellcheck",!1],autoComplete:["autocomplete","off"]},rc={align:["text-align",void 0],width:["width",void 0],height:["height",void 0],fontFamily:["font-family",void 0],fontSize:["font-size",void 0],color:["color","#ffffff"],backgroundColor:["backgroundColor","transparent"],borderColor:["borderColor","transparent"],outline:["outline","none"]},nc={textchange:"oninput",click:"onclick",dblclick:"ondblclick",focus:"onfocus",blur:"onblur"};var oc=class extends tc{constructor(t,e,i,s,r,n){ec(e)?(e=ic(n=e,"x",0),i=ic(n,"y",0),s=ic(n,"width",void 0),r=ic(n,"height",void 0)):ec(s)&&(s=ic(n=s,"width",void 0),r=ic(n,"height",void 0)),void 0===n&&(n={});var o,h=t.scale.autoRound;void 0!==s&&(h&&(s=Math.floor(s)),n.width=s+"px"),void 0!==r&&(h&&(r=Math.floor(r)),n.height=r+"px");var a,l,u=ic(n,"type","text");for(var c in"textarea"===u?(o=document.createElement("textarea")).style.resize="none":(o=document.createElement("input")).type=u,sc)a=sc[c],void 0!==(l=ic(n,c,a[1]))&&(o[a[0]]=l);var d,p,f=ic(n,"style",void 0);for(var c in void 0===f&&(f={}),rc)d=rc[c],void 0!==(p=ic(n,c,d[1]))&&(f[d[0]]=p);var g=o.style;for(var c in n)c in sc||c in rc||c in g&&(f[c]=n[c]);f["box-sizing"]="border-box",super(t,e,i,o,f),this.type="rexInputText";for(let t in nc)this.node[nc[t]]=function(){this.emit(t,this)}.bind(this);Qu(this.node)}resize(t,e){var i=this.node.style;return i.width=t+"px",i.height=e+"px",this.updateSize(),this}get text(){return this.node.value}set text(t){this.node.value=t}setText(t){return this.text=t,this}selectText(){return this.node.select(),this}get placeholder(){return this.node.placeholder}set placeholder(t){this.node.placeholder=t}setPlaceholder(t){return this.placeholder=t,this}get tooltip(){return this.node.title}set tooltip(t){this.node.title=t}setTooltip(t){return this.tooltip=t,this}setTextChangedCallback(t){return this.onTextChanged=t,this}get readOnly(){return this.node.readOnly}set readOnly(t){this.node.readOnly=t}setReadOnly(t){return void 0===t&&(t=!0),this.readOnly=t,this}get spellCheck(){return this.node.spellcheck}set spellCheck(t){this.node.spellcheck=t}setSpellCheck(t){return this.spellCheck=t,this}setStyle(t,e){return this.node.style[t]=e,this}getStyle(t){return this.node.style[t]}scrollToBottom(){return this.node.scrollTop=this.node.scrollHeight,this}setEnabled(t){return void 0===t&&(t=!0),this.node.disabled=!t,this}setBlur(){return this.node.blur(),this}setFocus(){return this.node.focus(),this}};const hc=Phaser.Utils.Objects.GetValue;var ac=function(t,e){void 0===e&&(e={});var i=t.scene,s=t.style,r=hc(e,"backgroundColor",s.backgroundColor);null===r&&(r="transparent"),e.text=hc(e,"text",t.text),e.fontFamily=hc(e,"fontFamily",s.fontFamily),e.fontSize=hc(e,"fontSize",s.fontSize),e.color=hc(e,"color",s.color),e.backgroundColor=r;var n=new oc(i,t.x,t.y,hc(e,"width",t.width),hc(e,"height",t.height),e);return n.setOrigin(t.originX,t.originY),i.add.existing(n),n},lc=function(t){return t&&"function"==typeof t};const uc=Phaser.Utils.Objects.GetValue;var cc=void 0,dc=class{constructor(t){this.gameObject=t,this.scene=f(t),this.inputText=void 0,this.onClose=void 0,this.delayCall=void 0,this.boot()}boot(){return this.gameObject.once("destroy",this.destroy,this),this}shutdown(){return this.close(),this.gameObject=void 0,this.scene=void 0,cc===this&&(cc=void 0),this}destroy(){return this.shutdown(),this}open(t,e){void 0!==cc&&cc.close(),cc=this,lc(t)&&(e=t,t=void 0),void 0===e&&(e=uc(t,"onClose",void 0));var i=uc(t,"onTextChanged",void 0);return this.inputText=ac(this.gameObject,t).on("textchange",(function(t){var e=t.text;i?i(this.gameObject,e):this.gameObject.text=e}),this).setFocus(),this.gameObject.setVisible(!1),this.onClose=e,this.scene.input.keyboard.once("keydown-ENTER",this.close,this),this.delayCall=this.scene.time.delayedCall(0,(function(){this.scene.input.once("pointerdown",this.close,this)}),[],this),this}close(){return cc=void 0,this.inputText?(this.gameObject.setVisible(!0),this.inputText.destroy(),this.inputText=void 0,this.delayCall&&(this.delayCall.remove(),this.delayCall=void 0),this.scene.input.keyboard.off("keydown-ENTER",this.close,this),this.scene.input.off("pointerdown",this.close,this),this.onClose&&this.onClose(this.gameObject),this):this}get isOpened(){return void 0!==this.inputText}get text(){return this.isOpened?this.inputText.text:this.gameObject.text}};class pc extends Phaser.Plugins.ScenePlugin{constructor(t,e){super(t,e),this.add=new Wt(t)}}var fc={hide:th,show:Qo,isShown:eh,edit:function(t,e,i){return t._edit||(t._edit=new dc(t)),t._edit.open(e,i),t._edit}};Object.assign(pc.prototype,fc);var gc=pc;class vc extends Phaser.Plugins.BasePlugin{constructor(t){super(t),this.x=64,this.y=64,this.facing="right",this.startScene="mazelevel"}start(){let t=localStorage.getItem("mazeexit");t&&(console.log("Starting in "+t),this.setExit(JSON.parse(t)))}setExit({x:t=64,y:e=64,facing:i="right",scene:s="mazelevel"}={}){this.x=t,this.y=e,this.facing=i,this.startScene=s,localStorage.setItem("mazeexit",JSON.stringify({x:t,y:e,facing:i,scene:s}))}}var mc=vc,yc=i(8),xc=i.n(yc);class bc extends Phaser.Plugins.BasePlugin{constructor(t){super(t),this.tileTypes=[{top:!0,right:!0,bottom:!0,left:!0},{top:!1,right:!1,bottom:!1,left:!1},{top:!0,right:!1,bottom:!0,left:!1},{top:!1,right:!0,bottom:!1,left:!0},{top:!1,right:!0,bottom:!1,left:!1},{top:!1,right:!1,bottom:!1,left:!0},{top:!0,right:!1,bottom:!1,left:!1},{top:!1,right:!1,bottom:!0,left:!1},{top:!1,right:!1,bottom:!0,left:!0},{top:!0,right:!1,bottom:!1,left:!0},{top:!0,right:!0,bottom:!1,left:!1},{top:!1,right:!0,bottom:!0,left:!1},{top:!1,right:!0,bottom:!0,left:!0},{top:!0,right:!1,bottom:!0,left:!0},{top:!0,right:!0,bottom:!1,left:!0},{top:!0,right:!0,bottom:!0,left:!1}],this.topLeftMapping=[0,1,2,4,4,1,6,7,7,6,10,11,11,2,10,15],this.bottomRightMapping=[0,1,2,5,1,5,6,7,8,9,6,7,8,13,14,2],this.maze=void 0,this.gridWidth=0,this.gridHeight=0}start(){}generate(t,e){this.gridWidth=t,this.gridHeight=e,this.maze=xc()(this.gridWidth,this.gridHeight,!0);for(let t of this.maze)for(let e of t)for(let t=0;t<this.tileTypes.length;t++)e.top==this.tileTypes[t].top&&e.right==this.tileTypes[t].right&&e.bottom==this.tileTypes[t].bottom&&e.left==this.tileTypes[t].left&&(e.type=t);return this.maze}openTopLeft(){this.maze[0][0].type=this.topLeftMapping[this.maze[0][0].type]}openBottomRight(){this.maze[this.gridHeight-1][this.gridWidth-1].type=this.bottomRightMapping[this.maze[this.gridHeight-1][this.gridWidth-1].type]}createMapData({key:t="map",shardW:e=16,shardH:i=16,layer:s=0}={}){let r=[];for(let t=0;t<this.gridHeight*i;t++){let t=[];r.push(t);for(let i=0;i<this.gridWidth*e;i++)t.push(0)}for(let n of this.maze)for(let o of n)if(void 0!==o.type){let n=this.game.cache.tilemap.entries.entries[t+o.type].data.layers[s].data;for(let t=0;t<i;t++)for(let s=0;s<e;s++){let h=t*e+s,a=o.x*e+s;r[o.y*i+t][a]=n[h]-1}}return r}}var wc=bc;class Cc extends Phaser.Scene{constructor(){super({key:"preloader"})}preload(){let t=this.add.graphics();this.load.on("progress",e=>{t.clear(),t.fillStyle(r.a.config.settings.backgroundColor,1),t.fillRect(0,this.sys.game.config.height/2-30,this.sys.game.config.width*e,60)}),this.load.on("complete",()=>{t.destroy()}),this.load.image("tiles",r.a.config.assets.tileset);for(let t=0;t<16;t++)this.load.tilemapTiledJSON("map"+t,r.a.config.assets.mapArray[t]);this.load.image("player",r.a.config.settings.playerImg||"https://images.koji-cdn.com/f852518e-69be-4b7d-9c6d-c224dfe35cd0/rhp2y-player.png"),this.load.image("gamepaused",r.a.config.assets.gamepaused),this.load.image("playIcon",r.a.config.settings.menuIcon||"https://images.koji-cdn.com/f852518e-69be-4b7d-9c6d-c224dfe35cd0/s51bz-playIcon.png"),this.load.image("retryIcon",r.a.config.settings.retryIcon||"https://images.koji-cdn.com/f852518e-69be-4b7d-9c6d-c224dfe35cd0/nvuhq-retryIcon.png")}create(){this.scene.start("menu")}}var Sc=Cc;class Oc extends Phaser.Scene{constructor(){super({key:"booter"}),this.blurredScene=void 0}create(){this.sys.game.events.on("pause",()=>{for(let t of this.scene.manager.scenes)this.blurredScene=t.scene.key,t.onGamePause&&(t.onGamePause(),t.scene.pause())},this),this.sys.game.events.on("blur",()=>{for(let t of this.scene.manager.scenes)t.scene.settings.active&&(this.blurredScene=t.scene.key,t.onGamePause&&(t.onGamePause(),t.scene.pause()))},this),this.sys.game.events.on("focus",()=>{if(this.blurredScene){this.scene.resume(this.blurredScene);let t=this.scene.manager.getScene(this.blurredScene);t.onGameResume&&t.onGameResume()}this.blurredScene=void 0},this),this.sys.game.events.on("resume",()=>{if(this.blurredScene){this.scene.resume(this.blurredScene);let t=this.scene.manager.getScene(this.blurredScene);t.onGameResume&&t.onGameResume()}this.blurredScene=void 0},this),window.onresize=this.onWindowResize.bind(this),this.onWindowResize(),this.scene.start("preloader")}onWindowResize(){let t=Math.max(window.innerWidth,window.innerHeight),e=2*Math.max(1,Math.floor(t/window.maxSize));this.sys.game.config.zoom=e;let i=Math.ceil(window.innerWidth/e),s=Math.ceil(window.innerHeight/e);this.sys.game.renderer.resize(i,s,1),this.sys.game.config.width=i,this.sys.game.config.height=s,this.sys.canvas.style.width=i*e+"px",this.sys.canvas.style.height=s*e+"px";for(let t of this.scene.manager.scenes)t.cameras&&t.cameras.main&&t.cameras.main.setViewport(0,0,i,s),t.scene.settings.active&&t.resizeField&&t.resizeField(i,s);if(this.blurredScene){let t=this.scene.manager.getScene(this.blurredScene);t.cameras.main.setViewport(0,0,i,s),t.resizeField&&t.resizeField(i,s)}}}var _c=Oc;class Pc extends Phaser.Scene{constructor(t){super(t||{key:"level"}),this.gamepaused=void 0,this.player=void 0,this.exits=void 0}create(){this.cameras.main.setRoundPixels(!0),this.cursors=this.input.keyboard.createCursorKeys(),this.exits=[],this.cameras.main.setBackgroundColor(r.a.config.settings.backgroundColor||"#d76b6b"),this.swipe=this.rexGestures.add.swipe({direction:1,enable:!0})}postCreate(){this.gamepaused=this.add.image(this.sys.game.config.width/2,this.sys.game.config.height/2,"gamepaused"),this.gamepaused.visible=!1,this.gamepaused.setScrollFactor(0),this.gamepaused.setDepth(3),this.resizeField(this.sys.game.config.width,this.sys.game.config.height)}addPlayer({x:t=64,y:e=64}={}){this.player=this.physics.add.image(t,e,"player"),this.player.setBounce(.2),this.player.setCollideWorldBounds(!0),this.player.body.setGravityY(300),this.player.alive=!0,this.player.disappear=()=>{this.player.alive=!1,this.player.visible=!1,this.player.body.enable=!1},this.player.flipX=!0,this.cameras.main.startFollow(this.player,!0),this.timer=void 0}addExit({x:t=-480,y:e=0,w:i=512,h:s=2048,startX:r=64,startY:n=64,facing:o="right",scene:h=!1}={}){if(!h)return;let a={rect:new Phaser.Geom.Rectangle(t,e,i,s),startX:r,startY:n,facing:o,scene:h};this.exits.push(a)}checkExits(){if(this.exits&&this.exits.length&&this.player)for(let t of this.exits)if(Phaser.Geom.Rectangle.ContainsPoint(t.rect,this.player)){this.leaveThroughExit(t),this.player.disappear(),this.exits=[];break}}leaveThroughExit({startX:t=0,startY:e=0,facing:i="right",scene:s=!1}={}){s&&(this.startPosition.setExit({x:t,y:e,facing:i,scene:s}),this.cameras.main.once("camerafadeoutcomplete",t=>{this.scene.start(s)},this),fadeColor={r:5,g:4,b:4},this.cameras.main.fadeOut(3e3,fadeColor.r,fadeColor.g,fadeColor.b),this.timer.remove())}resizeField(t,e){this.gamepaused.x=t/2,this.gamepaused.y=e/2,this.centerMap&&this.cameras.main.setBounds((this.centerMap.widthInPixels-t)/2,(this.centerMap.heightInPixels-e)/2,t,e)}onGamePause(){this.timer.paused=!0,this.gamepaused.visible=!0}onGameResume(){this.timer.paused=!1,this.gamepaused.visible=!1}}var Tc=Pc;var kc=class extends Tc{constructor(t){super(t||{key:"mazelevel"}),this.prefabShardWidth=128,this.prefabShardHeight=128,this.prefabMapWidth=0,this.prefabMapHeight=0}create(){super.create(),this.addPlayer({x:this.startPosition.x,y:this.startPosition.y});this.maze.generate(32,8);this.maze.openBottomRight(),this.prefabMapWidth=this.prefabShardWidth*this.maze.gridWidth,this.prefabMapHeight=this.prefabShardHeight*this.maze.gridHeight,this.cameras.main.setBounds(16,0,this.prefabMapWidth-32,this.prefabMapHeight),this.physics.world.setBounds(0,0,this.prefabMapWidth,this.prefabMapHeight);let t=this.maze.createMapData({key:"map",shardW:16,shardH:16}),e=this.make.tilemap({data:t,tileWidth:8,tileHeight:8}),i=e.addTilesetImage("tiles","tiles",8,8,0,0),s=e.createStaticLayer(0,i,0,0);e.setCollisionBetween(192,255),this.physics.add.collider(this.player,s),this.addExit({scene:"mazelevel",x:4080,startX:64,startY:64,facing:"right"}),this.cameras.main.setBackgroundColor(r.a.config.settings.backgroundColor||"#d76b6b"),this.postCreate(),r.a.config.settings.countdown&&(this.timer=this.time.delayedCall(r.a.config.settings.time?1e3*r.a.config.settings.time:6e4,()=>{this.cameras.main.flash(1500,255,0,0),setTimeout(()=>{this.scene.start("gameover")},600)})),this.txt=this.add.text(5,10),this.txt.setScrollFactor(0,0)}update(t,e){if(r.a.config.settings.countdown){let t=Math.round((r.a.config.settings.time?r.a.config.settings.time:60)-this.timer.getElapsedSeconds());this.txt.setText("Time left:"+t),this.txt.setColor(r.a.config.settings.textColor||"#000")}this.cursors.left.isDown?(this.player.setVelocityX(-200),this.player.flipX=!1):this.cursors.right.isDown?(this.player.setVelocityX(200),this.player.flipX=!0):this.player.setVelocityX(0),this.cursors.up.isDown&&this.player.body.onFloor()?this.player.setVelocityY(-350):this.cursors.up.isDown&&this.player.body.onWall()&&this.player.setVelocityY(-305),this.input.activePointer.wasTouch&&(this.prefInput="touch"),"touch"==this.prefInput&&(this.input.activePointer.isDown&&(this.player.setVelocityX(this.player.flipX?250:-250),this.player.body.onFloor()?this.player.setVelocityY(-350):this.player.body.onWall()&&this.player.setVelocityY(-305)),this.swipe.on("swipe",()=>{!0===this.swipe.right?this.player.flipX=!0:this.player.flipX=!1},this)),this.checkExits()}};class Mc extends Phaser.Scene{constructor(){super({key:"menu"})}create(){let t=this.add.image(this.sys.game.config.width/2,this.sys.game.config.height/2,"playIcon");t.setInteractive(),t.on("pointerdown",t=>{this.scene.start(this.startPosition.startScene)})}}var Ec=Mc;class jc extends Phaser.Scene{constructor(){super({key:"gameover"})}create(){let t=this.add.image(this.sys.game.config.width/2,this.sys.game.config.height/2,"retryIcon");t.setInteractive(),t.on("pointerdown",e=>{t.destroy(),this.scene.start(this.startPosition.startScene)})}}var Ic=jc;window.fadeColor={r:22,g:25,b:30},window.maxSize=920;let zc=Math.max(window.innerWidth,window.innerHeight),Dc=2*Math.max(1,Math.floor(zc/window.maxSize));var Rc={type:Phaser.WEBGL,parent:"phaser-game",width:window.innerWidth/Dc,height:window.innerHeight/Dc,backgroundColor:r.a.config.settings.backgroundColor||"#d76b6b",pixelArt:!0,zoom:Dc,physics:{default:"arcade",arcade:{gravity:{y:500}}},plugins:{scene:[{key:"rexGestures",plugin:Yt,mapping:"rexGestures"},{key:"rexUI",plugin:gc,mapping:"rexUI"}],global:[{key:"startPosition",plugin:mc,mapping:"startPosition",start:!0},{key:"mazePlugin",plugin:wc,mapping:"maze",start:!0}]},input:{queue:!0},scene:[_c,Sc,Ec,kc,Ic]};window.game=new Phaser.Game(Rc)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,